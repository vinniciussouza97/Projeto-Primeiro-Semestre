
Projeto_Completo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bd4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000864  20000000  00402bd4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000100  20000864  00403438  00020864  2**2
                  ALLOC
  3 .stack        00003004  20000964  00403538  00020864  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020864  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002088e  2**0
                  CONTENTS, READONLY
  6 .debug_info   000114d9  00000000  00000000  000208e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002789  00000000  00000000  00031dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000980  00000000  00000000  00034549  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000008c0  00000000  00000000  00034ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00013318  00000000  00000000  00035789  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b16f  00000000  00000000  00048aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00053398  00000000  00000000  00053c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001d24  00000000  00000000  000a6fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003e56  00000000  00000000  000a8ccc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	68 39 00 20 a1 09 40 00 9d 09 40 00 9d 09 40 00     h9. ..@...@...@.
  400010:	9d 09 40 00 9d 09 40 00 9d 09 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	9d 09 40 00 9d 09 40 00 00 00 00 00 9d 09 40 00     ..@...@.......@.
  40003c:	9d 09 40 00 9d 09 40 00 9d 09 40 00 9d 09 40 00     ..@...@...@...@.
  40004c:	9d 09 40 00 9d 09 40 00 9d 09 40 00 9d 09 40 00     ..@...@...@...@.
  40005c:	9d 09 40 00 9d 09 40 00 9d 09 40 00 00 00 00 00     ..@...@...@.....
  40006c:	25 08 40 00 39 08 40 00 4d 08 40 00 9d 09 40 00     %.@.9.@.M.@...@.
  40007c:	9d 09 40 00 00 00 00 00 00 00 00 00 9d 09 40 00     ..@...........@.
  40008c:	9d 09 40 00 9d 09 40 00 9d 09 40 00 9d 09 40 00     ..@...@...@...@.
  40009c:	e1 0d 40 00 9d 09 40 00 9d 09 40 00 9d 09 40 00     ..@...@...@...@.
  4000ac:	9d 09 40 00 9d 09 40 00 9d 09 40 00 9d 09 40 00     ..@...@...@...@.
  4000bc:	9d 09 40 00 9d 09 40 00 9d 09 40 00 9d 09 40 00     ..@...@...@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000864 	.word	0x20000864
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402bd4 	.word	0x00402bd4

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00402bd4 	.word	0x00402bd4
  40012c:	20000868 	.word	0x20000868
  400130:	00402bd4 	.word	0x00402bd4
  400134:	00000000 	.word	0x00000000

00400138 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40013c:	b980      	cbnz	r0, 400160 <_read+0x28>
  40013e:	460c      	mov	r4, r1
  400140:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400142:	2a00      	cmp	r2, #0
  400144:	dd0f      	ble.n	400166 <_read+0x2e>
  400146:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400148:	4e08      	ldr	r6, [pc, #32]	; (40016c <_read+0x34>)
  40014a:	4d09      	ldr	r5, [pc, #36]	; (400170 <_read+0x38>)
  40014c:	6830      	ldr	r0, [r6, #0]
  40014e:	4621      	mov	r1, r4
  400150:	682b      	ldr	r3, [r5, #0]
  400152:	4798      	blx	r3
		ptr++;
  400154:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400156:	42bc      	cmp	r4, r7
  400158:	d1f8      	bne.n	40014c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40015a:	4640      	mov	r0, r8
  40015c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400160:	f04f 38ff 	mov.w	r8, #4294967295
  400164:	e7f9      	b.n	40015a <_read+0x22>
	for (; len > 0; --len) {
  400166:	4680      	mov	r8, r0
  400168:	e7f7      	b.n	40015a <_read+0x22>
  40016a:	bf00      	nop
  40016c:	20000934 	.word	0x20000934
  400170:	2000092c 	.word	0x2000092c

00400174 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400174:	6943      	ldr	r3, [r0, #20]
  400176:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40017a:	bf1d      	ittte	ne
  40017c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400180:	61c1      	strne	r1, [r0, #28]
	return 0;
  400182:	2000      	movne	r0, #0
		return 1;
  400184:	2001      	moveq	r0, #1
}
  400186:	4770      	bx	lr

00400188 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400188:	6943      	ldr	r3, [r0, #20]
  40018a:	f013 0f01 	tst.w	r3, #1
  40018e:	d005      	beq.n	40019c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400190:	6983      	ldr	r3, [r0, #24]
  400192:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400196:	600b      	str	r3, [r1, #0]

	return 0;
  400198:	2000      	movs	r0, #0
  40019a:	4770      	bx	lr
		return 1;
  40019c:	2001      	movs	r0, #1
}
  40019e:	4770      	bx	lr

004001a0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001a0:	3801      	subs	r0, #1
  4001a2:	2802      	cmp	r0, #2
  4001a4:	d815      	bhi.n	4001d2 <_write+0x32>
{
  4001a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001aa:	460e      	mov	r6, r1
  4001ac:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4001ae:	b19a      	cbz	r2, 4001d8 <_write+0x38>
  4001b0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001b2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001ec <_write+0x4c>
  4001b6:	4f0c      	ldr	r7, [pc, #48]	; (4001e8 <_write+0x48>)
  4001b8:	f8d8 0000 	ldr.w	r0, [r8]
  4001bc:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001c0:	683b      	ldr	r3, [r7, #0]
  4001c2:	4798      	blx	r3
  4001c4:	2800      	cmp	r0, #0
  4001c6:	db0a      	blt.n	4001de <_write+0x3e>
  4001c8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4001ca:	3c01      	subs	r4, #1
  4001cc:	d1f4      	bne.n	4001b8 <_write+0x18>
  4001ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001d2:	f04f 30ff 	mov.w	r0, #4294967295
  4001d6:	4770      	bx	lr
	for (; len != 0; --len) {
  4001d8:	4610      	mov	r0, r2
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001e6:	bf00      	nop
  4001e8:	20000930 	.word	0x20000930
  4001ec:	20000934 	.word	0x20000934

004001f0 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4001f0:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4001f2:	0189      	lsls	r1, r1, #6
  4001f4:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4001f6:	2402      	movs	r4, #2
  4001f8:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4001fa:	f04f 31ff 	mov.w	r1, #4294967295
  4001fe:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400200:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400202:	605a      	str	r2, [r3, #4]
}
  400204:	bc10      	pop	{r4}
  400206:	4770      	bx	lr

00400208 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400208:	0189      	lsls	r1, r1, #6
  40020a:	2305      	movs	r3, #5
  40020c:	5043      	str	r3, [r0, r1]
  40020e:	4770      	bx	lr

00400210 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400210:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400214:	61ca      	str	r2, [r1, #28]
  400216:	4770      	bx	lr

00400218 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400218:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  40021c:	624a      	str	r2, [r1, #36]	; 0x24
  40021e:	4770      	bx	lr

00400220 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400220:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400224:	6a08      	ldr	r0, [r1, #32]
}
  400226:	4770      	bx	lr

00400228 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400228:	b4f0      	push	{r4, r5, r6, r7}
  40022a:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40022c:	2402      	movs	r4, #2
  40022e:	9401      	str	r4, [sp, #4]
  400230:	2408      	movs	r4, #8
  400232:	9402      	str	r4, [sp, #8]
  400234:	2420      	movs	r4, #32
  400236:	9403      	str	r4, [sp, #12]
  400238:	2480      	movs	r4, #128	; 0x80
  40023a:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40023c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40023e:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400240:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400242:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400246:	d814      	bhi.n	400272 <tc_find_mck_divisor+0x4a>
  400248:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  40024a:	42a0      	cmp	r0, r4
  40024c:	d217      	bcs.n	40027e <tc_find_mck_divisor+0x56>
  40024e:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400250:	af01      	add	r7, sp, #4
  400252:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400256:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  40025a:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  40025c:	4284      	cmp	r4, r0
  40025e:	d30a      	bcc.n	400276 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400260:	4286      	cmp	r6, r0
  400262:	d90d      	bls.n	400280 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400264:	3501      	adds	r5, #1
	for (ul_index = 0;
  400266:	2d05      	cmp	r5, #5
  400268:	d1f3      	bne.n	400252 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  40026a:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  40026c:	b006      	add	sp, #24
  40026e:	bcf0      	pop	{r4, r5, r6, r7}
  400270:	4770      	bx	lr
			return 0;
  400272:	2000      	movs	r0, #0
  400274:	e7fa      	b.n	40026c <tc_find_mck_divisor+0x44>
  400276:	2000      	movs	r0, #0
  400278:	e7f8      	b.n	40026c <tc_find_mck_divisor+0x44>
	return 1;
  40027a:	2001      	movs	r0, #1
  40027c:	e7f6      	b.n	40026c <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40027e:	2500      	movs	r5, #0
	if (p_uldiv) {
  400280:	b12a      	cbz	r2, 40028e <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400282:	a906      	add	r1, sp, #24
  400284:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400288:	f851 1c14 	ldr.w	r1, [r1, #-20]
  40028c:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  40028e:	2b00      	cmp	r3, #0
  400290:	d0f3      	beq.n	40027a <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400292:	601d      	str	r5, [r3, #0]
	return 1;
  400294:	2001      	movs	r0, #1
  400296:	e7e9      	b.n	40026c <tc_find_mck_divisor+0x44>

00400298 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400298:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40029a:	23ac      	movs	r3, #172	; 0xac
  40029c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40029e:	680b      	ldr	r3, [r1, #0]
  4002a0:	684a      	ldr	r2, [r1, #4]
  4002a2:	fbb3 f3f2 	udiv	r3, r3, r2
  4002a6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4002a8:	1e5c      	subs	r4, r3, #1
  4002aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4002ae:	4294      	cmp	r4, r2
  4002b0:	d80b      	bhi.n	4002ca <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  4002b2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4002b4:	688b      	ldr	r3, [r1, #8]
  4002b6:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4002b8:	f240 2302 	movw	r3, #514	; 0x202
  4002bc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4002c0:	2350      	movs	r3, #80	; 0x50
  4002c2:	6003      	str	r3, [r0, #0]

	return 0;
  4002c4:	2000      	movs	r0, #0
}
  4002c6:	bc10      	pop	{r4}
  4002c8:	4770      	bx	lr
		return 1;
  4002ca:	2001      	movs	r0, #1
  4002cc:	e7fb      	b.n	4002c6 <uart_init+0x2e>

004002ce <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4002ce:	6943      	ldr	r3, [r0, #20]
  4002d0:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4002d4:	bf1a      	itte	ne
  4002d6:	61c1      	strne	r1, [r0, #28]
	return 0;
  4002d8:	2000      	movne	r0, #0
		return 1;
  4002da:	2001      	moveq	r0, #1
}
  4002dc:	4770      	bx	lr

004002de <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4002de:	6943      	ldr	r3, [r0, #20]
  4002e0:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4002e4:	bf1d      	ittte	ne
  4002e6:	6983      	ldrne	r3, [r0, #24]
  4002e8:	700b      	strbne	r3, [r1, #0]
	return 0;
  4002ea:	2000      	movne	r0, #0
		return 1;
  4002ec:	2001      	moveq	r0, #1
}
  4002ee:	4770      	bx	lr

004002f0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4002f0:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4002f2:	480e      	ldr	r0, [pc, #56]	; (40032c <sysclk_init+0x3c>)
  4002f4:	4b0e      	ldr	r3, [pc, #56]	; (400330 <sysclk_init+0x40>)
  4002f6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4002f8:	213e      	movs	r1, #62	; 0x3e
  4002fa:	2000      	movs	r0, #0
  4002fc:	4b0d      	ldr	r3, [pc, #52]	; (400334 <sysclk_init+0x44>)
  4002fe:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400300:	4c0d      	ldr	r4, [pc, #52]	; (400338 <sysclk_init+0x48>)
  400302:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400304:	2800      	cmp	r0, #0
  400306:	d0fc      	beq.n	400302 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400308:	4b0c      	ldr	r3, [pc, #48]	; (40033c <sysclk_init+0x4c>)
  40030a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40030c:	4a0c      	ldr	r2, [pc, #48]	; (400340 <sysclk_init+0x50>)
  40030e:	4b0d      	ldr	r3, [pc, #52]	; (400344 <sysclk_init+0x54>)
  400310:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400312:	4c0d      	ldr	r4, [pc, #52]	; (400348 <sysclk_init+0x58>)
  400314:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400316:	2800      	cmp	r0, #0
  400318:	d0fc      	beq.n	400314 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40031a:	2010      	movs	r0, #16
  40031c:	4b0b      	ldr	r3, [pc, #44]	; (40034c <sysclk_init+0x5c>)
  40031e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400320:	4b0b      	ldr	r3, [pc, #44]	; (400350 <sysclk_init+0x60>)
  400322:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400324:	4801      	ldr	r0, [pc, #4]	; (40032c <sysclk_init+0x3c>)
  400326:	4b02      	ldr	r3, [pc, #8]	; (400330 <sysclk_init+0x40>)
  400328:	4798      	blx	r3
  40032a:	bd10      	pop	{r4, pc}
  40032c:	07270e00 	.word	0x07270e00
  400330:	00400b5d 	.word	0x00400b5d
  400334:	004008c5 	.word	0x004008c5
  400338:	00400919 	.word	0x00400919
  40033c:	00400929 	.word	0x00400929
  400340:	20133f01 	.word	0x20133f01
  400344:	400e0400 	.word	0x400e0400
  400348:	00400939 	.word	0x00400939
  40034c:	00400861 	.word	0x00400861
  400350:	00400a4d 	.word	0x00400a4d

00400354 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400354:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400356:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40035a:	4b46      	ldr	r3, [pc, #280]	; (400474 <board_init+0x120>)
  40035c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40035e:	200b      	movs	r0, #11
  400360:	4c45      	ldr	r4, [pc, #276]	; (400478 <board_init+0x124>)
  400362:	47a0      	blx	r4
  400364:	200c      	movs	r0, #12
  400366:	47a0      	blx	r4
  400368:	200d      	movs	r0, #13
  40036a:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  40036c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400370:	2013      	movs	r0, #19
  400372:	4c42      	ldr	r4, [pc, #264]	; (40047c <board_init+0x128>)
  400374:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  400376:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40037a:	2014      	movs	r0, #20
  40037c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  40037e:	4940      	ldr	r1, [pc, #256]	; (400480 <board_init+0x12c>)
  400380:	2023      	movs	r0, #35	; 0x23
  400382:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400384:	493f      	ldr	r1, [pc, #252]	; (400484 <board_init+0x130>)
  400386:	204c      	movs	r0, #76	; 0x4c
  400388:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40038a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40038e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400392:	483d      	ldr	r0, [pc, #244]	; (400488 <board_init+0x134>)
  400394:	4b3d      	ldr	r3, [pc, #244]	; (40048c <board_init+0x138>)
  400396:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
  400398:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40039c:	2000      	movs	r0, #0
  40039e:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
  4003a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4003a4:	2008      	movs	r0, #8
  4003a6:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
  4003a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4003ac:	2052      	movs	r0, #82	; 0x52
  4003ae:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  4003b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003b4:	200c      	movs	r0, #12
  4003b6:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  4003b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003bc:	200d      	movs	r0, #13
  4003be:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  4003c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003c4:	200e      	movs	r0, #14
  4003c6:	47a0      	blx	r4
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#  ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  4003c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003cc:	200b      	movs	r0, #11
  4003ce:	47a0      	blx	r4
#  endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  4003d0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003d4:	2015      	movs	r0, #21
  4003d6:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  4003d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003dc:	2016      	movs	r0, #22
  4003de:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART1_SCK_IDX, PIN_USART1_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM33312 enable pin */
	gpio_configure_pin(PIN_USART1_EN_IDX, PIN_USART1_EN_FLAGS);
  4003e0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4003e4:	2017      	movs	r0, #23
  4003e6:	47a0      	blx	r4
	gpio_set_pin_low(PIN_USART1_EN_IDX);
  4003e8:	2017      	movs	r0, #23
  4003ea:	4b29      	ldr	r3, [pc, #164]	; (400490 <board_init+0x13c>)
  4003ec:	4798      	blx	r3
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#if defined(CONF_BOARD_ILI9325) || defined(CONF_BOARD_ILI93XX)
	/* Configure LCD EBI pins */
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  4003ee:	4d29      	ldr	r5, [pc, #164]	; (400494 <board_init+0x140>)
  4003f0:	4629      	mov	r1, r5
  4003f2:	2040      	movs	r0, #64	; 0x40
  4003f4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  4003f6:	4629      	mov	r1, r5
  4003f8:	2041      	movs	r0, #65	; 0x41
  4003fa:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  4003fc:	4629      	mov	r1, r5
  4003fe:	2042      	movs	r0, #66	; 0x42
  400400:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  400402:	4629      	mov	r1, r5
  400404:	2043      	movs	r0, #67	; 0x43
  400406:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  400408:	4629      	mov	r1, r5
  40040a:	2044      	movs	r0, #68	; 0x44
  40040c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  40040e:	4629      	mov	r1, r5
  400410:	2045      	movs	r0, #69	; 0x45
  400412:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  400414:	4629      	mov	r1, r5
  400416:	2046      	movs	r0, #70	; 0x46
  400418:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  40041a:	4629      	mov	r1, r5
  40041c:	2047      	movs	r0, #71	; 0x47
  40041e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  400420:	4629      	mov	r1, r5
  400422:	204b      	movs	r0, #75	; 0x4b
  400424:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  400426:	4629      	mov	r1, r5
  400428:	2048      	movs	r0, #72	; 0x48
  40042a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS1, PIN_EBI_NCS1_FLAGS);
  40042c:	4629      	mov	r1, r5
  40042e:	204f      	movs	r0, #79	; 0x4f
  400430:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  400432:	4629      	mov	r1, r5
  400434:	2053      	movs	r0, #83	; 0x53
  400436:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_AAT3155
	/* Configure Backlight control pin */
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  400438:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40043c:	204d      	movs	r0, #77	; 0x4d
  40043e:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_ADS7843
	/* Configure Touchscreen SPI pins */
	gpio_configure_pin(BOARD_ADS7843_IRQ_GPIO,BOARD_ADS7843_IRQ_FLAGS);
  400440:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
  400444:	4629      	mov	r1, r5
  400446:	2010      	movs	r0, #16
  400448:	47a0      	blx	r4
	gpio_configure_pin(BOARD_ADS7843_BUSY_GPIO, BOARD_ADS7843_BUSY_FLAGS);
  40044a:	4629      	mov	r1, r5
  40044c:	2011      	movs	r0, #17
  40044e:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400450:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400454:	200c      	movs	r0, #12
  400456:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400458:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40045c:	200d      	movs	r0, #13
  40045e:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400460:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400464:	200e      	movs	r0, #14
  400466:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  400468:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40046c:	200b      	movs	r0, #11
  40046e:	47a0      	blx	r4
  400470:	bd38      	pop	{r3, r4, r5, pc}
  400472:	bf00      	nop
  400474:	400e1450 	.word	0x400e1450
  400478:	00400949 	.word	0x00400949
  40047c:	004005c5 	.word	0x004005c5
  400480:	28000079 	.word	0x28000079
  400484:	28000059 	.word	0x28000059
  400488:	400e0e00 	.word	0x400e0e00
  40048c:	004006e5 	.word	0x004006e5
  400490:	00400589 	.word	0x00400589
  400494:	08000001 	.word	0x08000001

00400498 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400498:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40049a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40049e:	d039      	beq.n	400514 <pio_set_peripheral+0x7c>
  4004a0:	d813      	bhi.n	4004ca <pio_set_peripheral+0x32>
  4004a2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4004a6:	d025      	beq.n	4004f4 <pio_set_peripheral+0x5c>
  4004a8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4004ac:	d10a      	bne.n	4004c4 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ae:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4004b0:	4313      	orrs	r3, r2
  4004b2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4004b4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004b6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4004b8:	400b      	ands	r3, r1
  4004ba:	ea23 0302 	bic.w	r3, r3, r2
  4004be:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4004c0:	6042      	str	r2, [r0, #4]
  4004c2:	4770      	bx	lr
	switch (ul_type) {
  4004c4:	2900      	cmp	r1, #0
  4004c6:	d1fb      	bne.n	4004c0 <pio_set_peripheral+0x28>
  4004c8:	4770      	bx	lr
  4004ca:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4004ce:	d020      	beq.n	400512 <pio_set_peripheral+0x7a>
  4004d0:	d809      	bhi.n	4004e6 <pio_set_peripheral+0x4e>
  4004d2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4004d6:	d1f3      	bne.n	4004c0 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004d8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4004da:	4313      	orrs	r3, r2
  4004dc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004de:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004e0:	4313      	orrs	r3, r2
  4004e2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004e4:	e7ec      	b.n	4004c0 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4004e6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4004ea:	d012      	beq.n	400512 <pio_set_peripheral+0x7a>
  4004ec:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4004f0:	d00f      	beq.n	400512 <pio_set_peripheral+0x7a>
  4004f2:	e7e5      	b.n	4004c0 <pio_set_peripheral+0x28>
{
  4004f4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004f6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004f8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4004fa:	43d3      	mvns	r3, r2
  4004fc:	4021      	ands	r1, r4
  4004fe:	461c      	mov	r4, r3
  400500:	4019      	ands	r1, r3
  400502:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400504:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400506:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400508:	400b      	ands	r3, r1
  40050a:	4023      	ands	r3, r4
  40050c:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40050e:	6042      	str	r2, [r0, #4]
}
  400510:	bc10      	pop	{r4}
  400512:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400514:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400516:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400518:	400b      	ands	r3, r1
  40051a:	ea23 0302 	bic.w	r3, r3, r2
  40051e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400520:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400522:	4313      	orrs	r3, r2
  400524:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400526:	e7cb      	b.n	4004c0 <pio_set_peripheral+0x28>

00400528 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400528:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40052a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  40052e:	bf14      	ite	ne
  400530:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400532:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400534:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400538:	bf14      	ite	ne
  40053a:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  40053c:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  40053e:	f012 0f02 	tst.w	r2, #2
  400542:	d107      	bne.n	400554 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400544:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400548:	bf18      	it	ne
  40054a:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  40054e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400550:	6001      	str	r1, [r0, #0]
  400552:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  400554:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400558:	e7f9      	b.n	40054e <pio_set_input+0x26>

0040055a <pio_set_output>:
{
  40055a:	b410      	push	{r4}
  40055c:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40055e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400560:	b944      	cbnz	r4, 400574 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  400562:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400564:	b143      	cbz	r3, 400578 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  400566:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400568:	b942      	cbnz	r2, 40057c <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  40056a:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40056c:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40056e:	6001      	str	r1, [r0, #0]
}
  400570:	bc10      	pop	{r4}
  400572:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400574:	6641      	str	r1, [r0, #100]	; 0x64
  400576:	e7f5      	b.n	400564 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400578:	6541      	str	r1, [r0, #84]	; 0x54
  40057a:	e7f5      	b.n	400568 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40057c:	6301      	str	r1, [r0, #48]	; 0x30
  40057e:	e7f5      	b.n	40056c <pio_set_output+0x12>

00400580 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400580:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400582:	4770      	bx	lr

00400584 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400584:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400586:	4770      	bx	lr

00400588 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400588:	0943      	lsrs	r3, r0, #5
  40058a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40058e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400592:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  400594:	f000 001f 	and.w	r0, r0, #31
  400598:	2201      	movs	r2, #1
  40059a:	fa02 f000 	lsl.w	r0, r2, r0
  40059e:	6358      	str	r0, [r3, #52]	; 0x34
  4005a0:	4770      	bx	lr

004005a2 <pio_toggle_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4005a2:	0943      	lsrs	r3, r0, #5
  4005a4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4005a8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4005ac:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  4005ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
  4005b0:	f000 021f 	and.w	r2, r0, #31
  4005b4:	2001      	movs	r0, #1
  4005b6:	4090      	lsls	r0, r2
  4005b8:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4005ba:	bf14      	ite	ne
  4005bc:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4005be:	6318      	streq	r0, [r3, #48]	; 0x30
  4005c0:	4770      	bx	lr
	...

004005c4 <pio_configure_pin>:
{
  4005c4:	b570      	push	{r4, r5, r6, lr}
  4005c6:	b082      	sub	sp, #8
  4005c8:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4005ca:	0943      	lsrs	r3, r0, #5
  4005cc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4005d0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4005d4:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4005d6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4005da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4005de:	d053      	beq.n	400688 <pio_configure_pin+0xc4>
  4005e0:	d80a      	bhi.n	4005f8 <pio_configure_pin+0x34>
  4005e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4005e6:	d02d      	beq.n	400644 <pio_configure_pin+0x80>
  4005e8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4005ec:	d03b      	beq.n	400666 <pio_configure_pin+0xa2>
  4005ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4005f2:	d015      	beq.n	400620 <pio_configure_pin+0x5c>
		return 0;
  4005f4:	2000      	movs	r0, #0
  4005f6:	e023      	b.n	400640 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  4005f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4005fc:	d055      	beq.n	4006aa <pio_configure_pin+0xe6>
  4005fe:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400602:	d052      	beq.n	4006aa <pio_configure_pin+0xe6>
  400604:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400608:	d1f4      	bne.n	4005f4 <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40060a:	f000 011f 	and.w	r1, r0, #31
  40060e:	2601      	movs	r6, #1
  400610:	462a      	mov	r2, r5
  400612:	fa06 f101 	lsl.w	r1, r6, r1
  400616:	4620      	mov	r0, r4
  400618:	4b2f      	ldr	r3, [pc, #188]	; (4006d8 <pio_configure_pin+0x114>)
  40061a:	4798      	blx	r3
	return 1;
  40061c:	4630      	mov	r0, r6
		break;
  40061e:	e00f      	b.n	400640 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400620:	f000 001f 	and.w	r0, r0, #31
  400624:	2601      	movs	r6, #1
  400626:	4086      	lsls	r6, r0
  400628:	4632      	mov	r2, r6
  40062a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40062e:	4620      	mov	r0, r4
  400630:	4b2a      	ldr	r3, [pc, #168]	; (4006dc <pio_configure_pin+0x118>)
  400632:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400634:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400638:	bf14      	ite	ne
  40063a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40063c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40063e:	2001      	movs	r0, #1
}
  400640:	b002      	add	sp, #8
  400642:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400644:	f000 001f 	and.w	r0, r0, #31
  400648:	2601      	movs	r6, #1
  40064a:	4086      	lsls	r6, r0
  40064c:	4632      	mov	r2, r6
  40064e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400652:	4620      	mov	r0, r4
  400654:	4b21      	ldr	r3, [pc, #132]	; (4006dc <pio_configure_pin+0x118>)
  400656:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400658:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40065c:	bf14      	ite	ne
  40065e:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400660:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400662:	2001      	movs	r0, #1
  400664:	e7ec      	b.n	400640 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400666:	f000 001f 	and.w	r0, r0, #31
  40066a:	2601      	movs	r6, #1
  40066c:	4086      	lsls	r6, r0
  40066e:	4632      	mov	r2, r6
  400670:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400674:	4620      	mov	r0, r4
  400676:	4b19      	ldr	r3, [pc, #100]	; (4006dc <pio_configure_pin+0x118>)
  400678:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40067a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40067e:	bf14      	ite	ne
  400680:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400682:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400684:	2001      	movs	r0, #1
  400686:	e7db      	b.n	400640 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400688:	f000 001f 	and.w	r0, r0, #31
  40068c:	2601      	movs	r6, #1
  40068e:	4086      	lsls	r6, r0
  400690:	4632      	mov	r2, r6
  400692:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400696:	4620      	mov	r0, r4
  400698:	4b10      	ldr	r3, [pc, #64]	; (4006dc <pio_configure_pin+0x118>)
  40069a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40069c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4006a0:	bf14      	ite	ne
  4006a2:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4006a4:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4006a6:	2001      	movs	r0, #1
  4006a8:	e7ca      	b.n	400640 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4006aa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4006ae:	f000 011f 	and.w	r1, r0, #31
  4006b2:	2601      	movs	r6, #1
  4006b4:	ea05 0306 	and.w	r3, r5, r6
  4006b8:	9300      	str	r3, [sp, #0]
  4006ba:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4006be:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4006c2:	bf14      	ite	ne
  4006c4:	2200      	movne	r2, #0
  4006c6:	2201      	moveq	r2, #1
  4006c8:	fa06 f101 	lsl.w	r1, r6, r1
  4006cc:	4620      	mov	r0, r4
  4006ce:	4c04      	ldr	r4, [pc, #16]	; (4006e0 <pio_configure_pin+0x11c>)
  4006d0:	47a0      	blx	r4
	return 1;
  4006d2:	4630      	mov	r0, r6
		break;
  4006d4:	e7b4      	b.n	400640 <pio_configure_pin+0x7c>
  4006d6:	bf00      	nop
  4006d8:	00400529 	.word	0x00400529
  4006dc:	00400499 	.word	0x00400499
  4006e0:	0040055b 	.word	0x0040055b

004006e4 <pio_configure_pin_group>:
{
  4006e4:	b570      	push	{r4, r5, r6, lr}
  4006e6:	b082      	sub	sp, #8
  4006e8:	4605      	mov	r5, r0
  4006ea:	460e      	mov	r6, r1
  4006ec:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  4006ee:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4006f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4006f6:	d03d      	beq.n	400774 <pio_configure_pin_group+0x90>
  4006f8:	d80a      	bhi.n	400710 <pio_configure_pin_group+0x2c>
  4006fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4006fe:	d021      	beq.n	400744 <pio_configure_pin_group+0x60>
  400700:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400704:	d02a      	beq.n	40075c <pio_configure_pin_group+0x78>
  400706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40070a:	d00e      	beq.n	40072a <pio_configure_pin_group+0x46>
		return 0;
  40070c:	2000      	movs	r0, #0
  40070e:	e017      	b.n	400740 <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  400710:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400714:	d03a      	beq.n	40078c <pio_configure_pin_group+0xa8>
  400716:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40071a:	d037      	beq.n	40078c <pio_configure_pin_group+0xa8>
  40071c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400720:	d1f4      	bne.n	40070c <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  400722:	4b23      	ldr	r3, [pc, #140]	; (4007b0 <pio_configure_pin_group+0xcc>)
  400724:	4798      	blx	r3
	return 1;
  400726:	2001      	movs	r0, #1
		break;
  400728:	e00a      	b.n	400740 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40072a:	460a      	mov	r2, r1
  40072c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400730:	4b20      	ldr	r3, [pc, #128]	; (4007b4 <pio_configure_pin_group+0xd0>)
  400732:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400734:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400738:	bf14      	ite	ne
  40073a:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40073c:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40073e:	2001      	movs	r0, #1
}
  400740:	b002      	add	sp, #8
  400742:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400744:	460a      	mov	r2, r1
  400746:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40074a:	4b1a      	ldr	r3, [pc, #104]	; (4007b4 <pio_configure_pin_group+0xd0>)
  40074c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40074e:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400752:	bf14      	ite	ne
  400754:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400756:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400758:	2001      	movs	r0, #1
  40075a:	e7f1      	b.n	400740 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40075c:	460a      	mov	r2, r1
  40075e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400762:	4b14      	ldr	r3, [pc, #80]	; (4007b4 <pio_configure_pin_group+0xd0>)
  400764:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400766:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40076a:	bf14      	ite	ne
  40076c:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40076e:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400770:	2001      	movs	r0, #1
  400772:	e7e5      	b.n	400740 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400774:	460a      	mov	r2, r1
  400776:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40077a:	4b0e      	ldr	r3, [pc, #56]	; (4007b4 <pio_configure_pin_group+0xd0>)
  40077c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40077e:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400782:	bf14      	ite	ne
  400784:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400786:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400788:	2001      	movs	r0, #1
  40078a:	e7d9      	b.n	400740 <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40078c:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  400790:	f004 0301 	and.w	r3, r4, #1
  400794:	9300      	str	r3, [sp, #0]
  400796:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40079a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40079e:	bf14      	ite	ne
  4007a0:	2200      	movne	r2, #0
  4007a2:	2201      	moveq	r2, #1
  4007a4:	4631      	mov	r1, r6
  4007a6:	4628      	mov	r0, r5
  4007a8:	4c03      	ldr	r4, [pc, #12]	; (4007b8 <pio_configure_pin_group+0xd4>)
  4007aa:	47a0      	blx	r4
	return 1;
  4007ac:	2001      	movs	r0, #1
		break;
  4007ae:	e7c7      	b.n	400740 <pio_configure_pin_group+0x5c>
  4007b0:	00400529 	.word	0x00400529
  4007b4:	00400499 	.word	0x00400499
  4007b8:	0040055b 	.word	0x0040055b

004007bc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4007bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4007c0:	4681      	mov	r9, r0
  4007c2:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4007c4:	4b12      	ldr	r3, [pc, #72]	; (400810 <pio_handler_process+0x54>)
  4007c6:	4798      	blx	r3
  4007c8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4007ca:	4648      	mov	r0, r9
  4007cc:	4b11      	ldr	r3, [pc, #68]	; (400814 <pio_handler_process+0x58>)
  4007ce:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4007d0:	4005      	ands	r5, r0
  4007d2:	d013      	beq.n	4007fc <pio_handler_process+0x40>
  4007d4:	4c10      	ldr	r4, [pc, #64]	; (400818 <pio_handler_process+0x5c>)
  4007d6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4007da:	e003      	b.n	4007e4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4007dc:	42b4      	cmp	r4, r6
  4007de:	d00d      	beq.n	4007fc <pio_handler_process+0x40>
  4007e0:	3410      	adds	r4, #16
		while (status != 0) {
  4007e2:	b15d      	cbz	r5, 4007fc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4007e4:	6820      	ldr	r0, [r4, #0]
  4007e6:	42b8      	cmp	r0, r7
  4007e8:	d1f8      	bne.n	4007dc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4007ea:	6861      	ldr	r1, [r4, #4]
  4007ec:	4229      	tst	r1, r5
  4007ee:	d0f5      	beq.n	4007dc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4007f0:	68e3      	ldr	r3, [r4, #12]
  4007f2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4007f4:	6863      	ldr	r3, [r4, #4]
  4007f6:	ea25 0503 	bic.w	r5, r5, r3
  4007fa:	e7ef      	b.n	4007dc <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4007fc:	4b07      	ldr	r3, [pc, #28]	; (40081c <pio_handler_process+0x60>)
  4007fe:	681b      	ldr	r3, [r3, #0]
  400800:	b123      	cbz	r3, 40080c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400802:	4b07      	ldr	r3, [pc, #28]	; (400820 <pio_handler_process+0x64>)
  400804:	681b      	ldr	r3, [r3, #0]
  400806:	b10b      	cbz	r3, 40080c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400808:	4648      	mov	r0, r9
  40080a:	4798      	blx	r3
  40080c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400810:	00400581 	.word	0x00400581
  400814:	00400585 	.word	0x00400585
  400818:	20000880 	.word	0x20000880
  40081c:	20000938 	.word	0x20000938
  400820:	200008f0 	.word	0x200008f0

00400824 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400824:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400826:	210b      	movs	r1, #11
  400828:	4801      	ldr	r0, [pc, #4]	; (400830 <PIOA_Handler+0xc>)
  40082a:	4b02      	ldr	r3, [pc, #8]	; (400834 <PIOA_Handler+0x10>)
  40082c:	4798      	blx	r3
  40082e:	bd08      	pop	{r3, pc}
  400830:	400e0e00 	.word	0x400e0e00
  400834:	004007bd 	.word	0x004007bd

00400838 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400838:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40083a:	210c      	movs	r1, #12
  40083c:	4801      	ldr	r0, [pc, #4]	; (400844 <PIOB_Handler+0xc>)
  40083e:	4b02      	ldr	r3, [pc, #8]	; (400848 <PIOB_Handler+0x10>)
  400840:	4798      	blx	r3
  400842:	bd08      	pop	{r3, pc}
  400844:	400e1000 	.word	0x400e1000
  400848:	004007bd 	.word	0x004007bd

0040084c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40084c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40084e:	210d      	movs	r1, #13
  400850:	4801      	ldr	r0, [pc, #4]	; (400858 <PIOC_Handler+0xc>)
  400852:	4b02      	ldr	r3, [pc, #8]	; (40085c <PIOC_Handler+0x10>)
  400854:	4798      	blx	r3
  400856:	bd08      	pop	{r3, pc}
  400858:	400e1200 	.word	0x400e1200
  40085c:	004007bd 	.word	0x004007bd

00400860 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400860:	4a17      	ldr	r2, [pc, #92]	; (4008c0 <pmc_switch_mck_to_pllack+0x60>)
  400862:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400868:	4318      	orrs	r0, r3
  40086a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40086c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40086e:	f013 0f08 	tst.w	r3, #8
  400872:	d10a      	bne.n	40088a <pmc_switch_mck_to_pllack+0x2a>
  400874:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400878:	4911      	ldr	r1, [pc, #68]	; (4008c0 <pmc_switch_mck_to_pllack+0x60>)
  40087a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40087c:	f012 0f08 	tst.w	r2, #8
  400880:	d103      	bne.n	40088a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400882:	3b01      	subs	r3, #1
  400884:	d1f9      	bne.n	40087a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400886:	2001      	movs	r0, #1
  400888:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40088a:	4a0d      	ldr	r2, [pc, #52]	; (4008c0 <pmc_switch_mck_to_pllack+0x60>)
  40088c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40088e:	f023 0303 	bic.w	r3, r3, #3
  400892:	f043 0302 	orr.w	r3, r3, #2
  400896:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400898:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40089a:	f013 0f08 	tst.w	r3, #8
  40089e:	d10a      	bne.n	4008b6 <pmc_switch_mck_to_pllack+0x56>
  4008a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4008a4:	4906      	ldr	r1, [pc, #24]	; (4008c0 <pmc_switch_mck_to_pllack+0x60>)
  4008a6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4008a8:	f012 0f08 	tst.w	r2, #8
  4008ac:	d105      	bne.n	4008ba <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4008ae:	3b01      	subs	r3, #1
  4008b0:	d1f9      	bne.n	4008a6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4008b2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4008b4:	4770      	bx	lr
	return 0;
  4008b6:	2000      	movs	r0, #0
  4008b8:	4770      	bx	lr
  4008ba:	2000      	movs	r0, #0
  4008bc:	4770      	bx	lr
  4008be:	bf00      	nop
  4008c0:	400e0400 	.word	0x400e0400

004008c4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4008c4:	b9c8      	cbnz	r0, 4008fa <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008c6:	4a11      	ldr	r2, [pc, #68]	; (40090c <pmc_switch_mainck_to_xtal+0x48>)
  4008c8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4008ca:	0209      	lsls	r1, r1, #8
  4008cc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4008ce:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4008d2:	f023 0303 	bic.w	r3, r3, #3
  4008d6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4008da:	f043 0301 	orr.w	r3, r3, #1
  4008de:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008e0:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4008e2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008e4:	f013 0f01 	tst.w	r3, #1
  4008e8:	d0fb      	beq.n	4008e2 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4008ea:	4a08      	ldr	r2, [pc, #32]	; (40090c <pmc_switch_mainck_to_xtal+0x48>)
  4008ec:	6a13      	ldr	r3, [r2, #32]
  4008ee:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4008f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4008f6:	6213      	str	r3, [r2, #32]
  4008f8:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4008fa:	4904      	ldr	r1, [pc, #16]	; (40090c <pmc_switch_mainck_to_xtal+0x48>)
  4008fc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4008fe:	4a04      	ldr	r2, [pc, #16]	; (400910 <pmc_switch_mainck_to_xtal+0x4c>)
  400900:	401a      	ands	r2, r3
  400902:	4b04      	ldr	r3, [pc, #16]	; (400914 <pmc_switch_mainck_to_xtal+0x50>)
  400904:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400906:	620b      	str	r3, [r1, #32]
  400908:	4770      	bx	lr
  40090a:	bf00      	nop
  40090c:	400e0400 	.word	0x400e0400
  400910:	fec8fffc 	.word	0xfec8fffc
  400914:	01370002 	.word	0x01370002

00400918 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400918:	4b02      	ldr	r3, [pc, #8]	; (400924 <pmc_osc_is_ready_mainck+0xc>)
  40091a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40091c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400920:	4770      	bx	lr
  400922:	bf00      	nop
  400924:	400e0400 	.word	0x400e0400

00400928 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400928:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40092c:	4b01      	ldr	r3, [pc, #4]	; (400934 <pmc_disable_pllack+0xc>)
  40092e:	629a      	str	r2, [r3, #40]	; 0x28
  400930:	4770      	bx	lr
  400932:	bf00      	nop
  400934:	400e0400 	.word	0x400e0400

00400938 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400938:	4b02      	ldr	r3, [pc, #8]	; (400944 <pmc_is_locked_pllack+0xc>)
  40093a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40093c:	f000 0002 	and.w	r0, r0, #2
  400940:	4770      	bx	lr
  400942:	bf00      	nop
  400944:	400e0400 	.word	0x400e0400

00400948 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400948:	2822      	cmp	r0, #34	; 0x22
  40094a:	d81e      	bhi.n	40098a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40094c:	281f      	cmp	r0, #31
  40094e:	d80c      	bhi.n	40096a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400950:	4b11      	ldr	r3, [pc, #68]	; (400998 <pmc_enable_periph_clk+0x50>)
  400952:	699a      	ldr	r2, [r3, #24]
  400954:	2301      	movs	r3, #1
  400956:	4083      	lsls	r3, r0
  400958:	4393      	bics	r3, r2
  40095a:	d018      	beq.n	40098e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40095c:	2301      	movs	r3, #1
  40095e:	fa03 f000 	lsl.w	r0, r3, r0
  400962:	4b0d      	ldr	r3, [pc, #52]	; (400998 <pmc_enable_periph_clk+0x50>)
  400964:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400966:	2000      	movs	r0, #0
  400968:	4770      	bx	lr
		ul_id -= 32;
  40096a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40096c:	4b0a      	ldr	r3, [pc, #40]	; (400998 <pmc_enable_periph_clk+0x50>)
  40096e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400972:	2301      	movs	r3, #1
  400974:	4083      	lsls	r3, r0
  400976:	4393      	bics	r3, r2
  400978:	d00b      	beq.n	400992 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40097a:	2301      	movs	r3, #1
  40097c:	fa03 f000 	lsl.w	r0, r3, r0
  400980:	4b05      	ldr	r3, [pc, #20]	; (400998 <pmc_enable_periph_clk+0x50>)
  400982:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400986:	2000      	movs	r0, #0
  400988:	4770      	bx	lr
		return 1;
  40098a:	2001      	movs	r0, #1
  40098c:	4770      	bx	lr
	return 0;
  40098e:	2000      	movs	r0, #0
  400990:	4770      	bx	lr
  400992:	2000      	movs	r0, #0
}
  400994:	4770      	bx	lr
  400996:	bf00      	nop
  400998:	400e0400 	.word	0x400e0400

0040099c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40099c:	e7fe      	b.n	40099c <Dummy_Handler>
	...

004009a0 <Reset_Handler>:
{
  4009a0:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  4009a2:	4b21      	ldr	r3, [pc, #132]	; (400a28 <Reset_Handler+0x88>)
  4009a4:	4a21      	ldr	r2, [pc, #132]	; (400a2c <Reset_Handler+0x8c>)
  4009a6:	429a      	cmp	r2, r3
  4009a8:	d928      	bls.n	4009fc <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  4009aa:	4b21      	ldr	r3, [pc, #132]	; (400a30 <Reset_Handler+0x90>)
  4009ac:	4a1e      	ldr	r2, [pc, #120]	; (400a28 <Reset_Handler+0x88>)
  4009ae:	429a      	cmp	r2, r3
  4009b0:	d20c      	bcs.n	4009cc <Reset_Handler+0x2c>
  4009b2:	3b01      	subs	r3, #1
  4009b4:	1a9b      	subs	r3, r3, r2
  4009b6:	f023 0303 	bic.w	r3, r3, #3
  4009ba:	3304      	adds	r3, #4
  4009bc:	4413      	add	r3, r2
  4009be:	491b      	ldr	r1, [pc, #108]	; (400a2c <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  4009c0:	f851 0b04 	ldr.w	r0, [r1], #4
  4009c4:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4009c8:	429a      	cmp	r2, r3
  4009ca:	d1f9      	bne.n	4009c0 <Reset_Handler+0x20>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4009cc:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  4009ce:	4b19      	ldr	r3, [pc, #100]	; (400a34 <Reset_Handler+0x94>)
  4009d0:	4a19      	ldr	r2, [pc, #100]	; (400a38 <Reset_Handler+0x98>)
  4009d2:	429a      	cmp	r2, r3
  4009d4:	d20a      	bcs.n	4009ec <Reset_Handler+0x4c>
  4009d6:	3b01      	subs	r3, #1
  4009d8:	1a9b      	subs	r3, r3, r2
  4009da:	f023 0303 	bic.w	r3, r3, #3
  4009de:	3304      	adds	r3, #4
  4009e0:	4413      	add	r3, r2
		*pDest++ = 0;
  4009e2:	2100      	movs	r1, #0
  4009e4:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4009e8:	429a      	cmp	r2, r3
  4009ea:	d1fb      	bne.n	4009e4 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  4009ec:	4b13      	ldr	r3, [pc, #76]	; (400a3c <Reset_Handler+0x9c>)
  4009ee:	4a14      	ldr	r2, [pc, #80]	; (400a40 <Reset_Handler+0xa0>)
  4009f0:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  4009f2:	4b14      	ldr	r3, [pc, #80]	; (400a44 <Reset_Handler+0xa4>)
  4009f4:	4798      	blx	r3
	main();
  4009f6:	4b14      	ldr	r3, [pc, #80]	; (400a48 <Reset_Handler+0xa8>)
  4009f8:	4798      	blx	r3
  4009fa:	e7fe      	b.n	4009fa <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  4009fc:	4b0a      	ldr	r3, [pc, #40]	; (400a28 <Reset_Handler+0x88>)
  4009fe:	4a0b      	ldr	r2, [pc, #44]	; (400a2c <Reset_Handler+0x8c>)
  400a00:	429a      	cmp	r2, r3
  400a02:	d2e3      	bcs.n	4009cc <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400a04:	4b0a      	ldr	r3, [pc, #40]	; (400a30 <Reset_Handler+0x90>)
  400a06:	4808      	ldr	r0, [pc, #32]	; (400a28 <Reset_Handler+0x88>)
  400a08:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400a0a:	4611      	mov	r1, r2
  400a0c:	3a04      	subs	r2, #4
  400a0e:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  400a10:	2800      	cmp	r0, #0
  400a12:	d0db      	beq.n	4009cc <Reset_Handler+0x2c>
  400a14:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  400a18:	f852 0904 	ldr.w	r0, [r2], #-4
  400a1c:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  400a20:	42ca      	cmn	r2, r1
  400a22:	d1f9      	bne.n	400a18 <Reset_Handler+0x78>
  400a24:	e7d2      	b.n	4009cc <Reset_Handler+0x2c>
  400a26:	bf00      	nop
  400a28:	20000000 	.word	0x20000000
  400a2c:	00402bd4 	.word	0x00402bd4
  400a30:	20000864 	.word	0x20000864
  400a34:	20000964 	.word	0x20000964
  400a38:	20000864 	.word	0x20000864
  400a3c:	e000ed00 	.word	0xe000ed00
  400a40:	00400000 	.word	0x00400000
  400a44:	00400ebd 	.word	0x00400ebd
  400a48:	00400e01 	.word	0x00400e01

00400a4c <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400a4c:	4b3c      	ldr	r3, [pc, #240]	; (400b40 <SystemCoreClockUpdate+0xf4>)
  400a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a50:	f003 0303 	and.w	r3, r3, #3
  400a54:	2b03      	cmp	r3, #3
  400a56:	d80e      	bhi.n	400a76 <SystemCoreClockUpdate+0x2a>
  400a58:	e8df f003 	tbb	[pc, r3]
  400a5c:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400a60:	4b38      	ldr	r3, [pc, #224]	; (400b44 <SystemCoreClockUpdate+0xf8>)
  400a62:	695b      	ldr	r3, [r3, #20]
  400a64:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400a68:	bf14      	ite	ne
  400a6a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400a6e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400a72:	4b35      	ldr	r3, [pc, #212]	; (400b48 <SystemCoreClockUpdate+0xfc>)
  400a74:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400a76:	4b32      	ldr	r3, [pc, #200]	; (400b40 <SystemCoreClockUpdate+0xf4>)
  400a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a7e:	2b70      	cmp	r3, #112	; 0x70
  400a80:	d055      	beq.n	400b2e <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a82:	4b2f      	ldr	r3, [pc, #188]	; (400b40 <SystemCoreClockUpdate+0xf4>)
  400a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  400a86:	4930      	ldr	r1, [pc, #192]	; (400b48 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a88:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  400a8c:	680b      	ldr	r3, [r1, #0]
  400a8e:	40d3      	lsrs	r3, r2
  400a90:	600b      	str	r3, [r1, #0]
  400a92:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400a94:	4b2a      	ldr	r3, [pc, #168]	; (400b40 <SystemCoreClockUpdate+0xf4>)
  400a96:	6a1b      	ldr	r3, [r3, #32]
  400a98:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a9c:	d003      	beq.n	400aa6 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400a9e:	4a2b      	ldr	r2, [pc, #172]	; (400b4c <SystemCoreClockUpdate+0x100>)
  400aa0:	4b29      	ldr	r3, [pc, #164]	; (400b48 <SystemCoreClockUpdate+0xfc>)
  400aa2:	601a      	str	r2, [r3, #0]
  400aa4:	e7e7      	b.n	400a76 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400aa6:	4a2a      	ldr	r2, [pc, #168]	; (400b50 <SystemCoreClockUpdate+0x104>)
  400aa8:	4b27      	ldr	r3, [pc, #156]	; (400b48 <SystemCoreClockUpdate+0xfc>)
  400aaa:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400aac:	4b24      	ldr	r3, [pc, #144]	; (400b40 <SystemCoreClockUpdate+0xf4>)
  400aae:	6a1b      	ldr	r3, [r3, #32]
  400ab0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ab4:	2b10      	cmp	r3, #16
  400ab6:	d005      	beq.n	400ac4 <SystemCoreClockUpdate+0x78>
  400ab8:	2b20      	cmp	r3, #32
  400aba:	d1dc      	bne.n	400a76 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400abc:	4a23      	ldr	r2, [pc, #140]	; (400b4c <SystemCoreClockUpdate+0x100>)
  400abe:	4b22      	ldr	r3, [pc, #136]	; (400b48 <SystemCoreClockUpdate+0xfc>)
  400ac0:	601a      	str	r2, [r3, #0]
			break;
  400ac2:	e7d8      	b.n	400a76 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400ac4:	4a23      	ldr	r2, [pc, #140]	; (400b54 <SystemCoreClockUpdate+0x108>)
  400ac6:	4b20      	ldr	r3, [pc, #128]	; (400b48 <SystemCoreClockUpdate+0xfc>)
  400ac8:	601a      	str	r2, [r3, #0]
			break;
  400aca:	e7d4      	b.n	400a76 <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400acc:	4b1c      	ldr	r3, [pc, #112]	; (400b40 <SystemCoreClockUpdate+0xf4>)
  400ace:	6a1b      	ldr	r3, [r3, #32]
  400ad0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ad4:	d018      	beq.n	400b08 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400ad6:	4a1d      	ldr	r2, [pc, #116]	; (400b4c <SystemCoreClockUpdate+0x100>)
  400ad8:	4b1b      	ldr	r3, [pc, #108]	; (400b48 <SystemCoreClockUpdate+0xfc>)
  400ada:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400adc:	4b18      	ldr	r3, [pc, #96]	; (400b40 <SystemCoreClockUpdate+0xf4>)
  400ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ae0:	f003 0303 	and.w	r3, r3, #3
  400ae4:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400ae6:	4a16      	ldr	r2, [pc, #88]	; (400b40 <SystemCoreClockUpdate+0xf4>)
  400ae8:	bf07      	ittee	eq
  400aea:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400aec:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400aee:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400af0:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400af2:	4815      	ldr	r0, [pc, #84]	; (400b48 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400af4:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400af8:	6803      	ldr	r3, [r0, #0]
  400afa:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  400afe:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400b00:	fbb3 f3f2 	udiv	r3, r3, r2
  400b04:	6003      	str	r3, [r0, #0]
  400b06:	e7b6      	b.n	400a76 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b08:	4a11      	ldr	r2, [pc, #68]	; (400b50 <SystemCoreClockUpdate+0x104>)
  400b0a:	4b0f      	ldr	r3, [pc, #60]	; (400b48 <SystemCoreClockUpdate+0xfc>)
  400b0c:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400b0e:	4b0c      	ldr	r3, [pc, #48]	; (400b40 <SystemCoreClockUpdate+0xf4>)
  400b10:	6a1b      	ldr	r3, [r3, #32]
  400b12:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b16:	2b10      	cmp	r3, #16
  400b18:	d005      	beq.n	400b26 <SystemCoreClockUpdate+0xda>
  400b1a:	2b20      	cmp	r3, #32
  400b1c:	d1de      	bne.n	400adc <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400b1e:	4a0b      	ldr	r2, [pc, #44]	; (400b4c <SystemCoreClockUpdate+0x100>)
  400b20:	4b09      	ldr	r3, [pc, #36]	; (400b48 <SystemCoreClockUpdate+0xfc>)
  400b22:	601a      	str	r2, [r3, #0]
					break;
  400b24:	e7da      	b.n	400adc <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400b26:	4a0b      	ldr	r2, [pc, #44]	; (400b54 <SystemCoreClockUpdate+0x108>)
  400b28:	4b07      	ldr	r3, [pc, #28]	; (400b48 <SystemCoreClockUpdate+0xfc>)
  400b2a:	601a      	str	r2, [r3, #0]
					break;
  400b2c:	e7d6      	b.n	400adc <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400b2e:	4a06      	ldr	r2, [pc, #24]	; (400b48 <SystemCoreClockUpdate+0xfc>)
  400b30:	6813      	ldr	r3, [r2, #0]
  400b32:	4909      	ldr	r1, [pc, #36]	; (400b58 <SystemCoreClockUpdate+0x10c>)
  400b34:	fba1 1303 	umull	r1, r3, r1, r3
  400b38:	085b      	lsrs	r3, r3, #1
  400b3a:	6013      	str	r3, [r2, #0]
  400b3c:	4770      	bx	lr
  400b3e:	bf00      	nop
  400b40:	400e0400 	.word	0x400e0400
  400b44:	400e1410 	.word	0x400e1410
  400b48:	2000000c 	.word	0x2000000c
  400b4c:	00b71b00 	.word	0x00b71b00
  400b50:	003d0900 	.word	0x003d0900
  400b54:	007a1200 	.word	0x007a1200
  400b58:	aaaaaaab 	.word	0xaaaaaaab

00400b5c <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400b5c:	4b1a      	ldr	r3, [pc, #104]	; (400bc8 <system_init_flash+0x6c>)
  400b5e:	4298      	cmp	r0, r3
  400b60:	d914      	bls.n	400b8c <system_init_flash+0x30>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400b62:	4b1a      	ldr	r3, [pc, #104]	; (400bcc <system_init_flash+0x70>)
  400b64:	4298      	cmp	r0, r3
  400b66:	d919      	bls.n	400b9c <system_init_flash+0x40>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400b68:	4b19      	ldr	r3, [pc, #100]	; (400bd0 <system_init_flash+0x74>)
  400b6a:	4298      	cmp	r0, r3
  400b6c:	d91d      	bls.n	400baa <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400b6e:	4b19      	ldr	r3, [pc, #100]	; (400bd4 <system_init_flash+0x78>)
  400b70:	4298      	cmp	r0, r3
  400b72:	d921      	bls.n	400bb8 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400b74:	4b18      	ldr	r3, [pc, #96]	; (400bd8 <system_init_flash+0x7c>)
  400b76:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400b78:	bf94      	ite	ls
  400b7a:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b7e:	4b17      	ldrhi	r3, [pc, #92]	; (400bdc <system_init_flash+0x80>)
  400b80:	4a17      	ldr	r2, [pc, #92]	; (400be0 <system_init_flash+0x84>)
  400b82:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b84:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400b88:	6013      	str	r3, [r2, #0]
  400b8a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400b8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400b90:	4a13      	ldr	r2, [pc, #76]	; (400be0 <system_init_flash+0x84>)
  400b92:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400b94:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400b98:	6013      	str	r3, [r2, #0]
  400b9a:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400b9c:	4b11      	ldr	r3, [pc, #68]	; (400be4 <system_init_flash+0x88>)
  400b9e:	4a10      	ldr	r2, [pc, #64]	; (400be0 <system_init_flash+0x84>)
  400ba0:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ba2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ba6:	6013      	str	r3, [r2, #0]
  400ba8:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400baa:	4b0f      	ldr	r3, [pc, #60]	; (400be8 <system_init_flash+0x8c>)
  400bac:	4a0c      	ldr	r2, [pc, #48]	; (400be0 <system_init_flash+0x84>)
  400bae:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400bb0:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400bb4:	6013      	str	r3, [r2, #0]
  400bb6:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400bb8:	4b0c      	ldr	r3, [pc, #48]	; (400bec <system_init_flash+0x90>)
  400bba:	4a09      	ldr	r2, [pc, #36]	; (400be0 <system_init_flash+0x84>)
  400bbc:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400bbe:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400bc2:	6013      	str	r3, [r2, #0]
  400bc4:	4770      	bx	lr
  400bc6:	bf00      	nop
  400bc8:	01312cff 	.word	0x01312cff
  400bcc:	026259ff 	.word	0x026259ff
  400bd0:	039386ff 	.word	0x039386ff
  400bd4:	04c4b3ff 	.word	0x04c4b3ff
  400bd8:	05f5e0ff 	.word	0x05f5e0ff
  400bdc:	04000500 	.word	0x04000500
  400be0:	400e0a00 	.word	0x400e0a00
  400be4:	04000100 	.word	0x04000100
  400be8:	04000200 	.word	0x04000200
  400bec:	04000300 	.word	0x04000300

00400bf0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400bf0:	4b0a      	ldr	r3, [pc, #40]	; (400c1c <_sbrk+0x2c>)
  400bf2:	681b      	ldr	r3, [r3, #0]
  400bf4:	b153      	cbz	r3, 400c0c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400bf6:	4b09      	ldr	r3, [pc, #36]	; (400c1c <_sbrk+0x2c>)
  400bf8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400bfa:	181a      	adds	r2, r3, r0
  400bfc:	4908      	ldr	r1, [pc, #32]	; (400c20 <_sbrk+0x30>)
  400bfe:	4291      	cmp	r1, r2
  400c00:	db08      	blt.n	400c14 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400c02:	4610      	mov	r0, r2
  400c04:	4a05      	ldr	r2, [pc, #20]	; (400c1c <_sbrk+0x2c>)
  400c06:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400c08:	4618      	mov	r0, r3
  400c0a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400c0c:	4a05      	ldr	r2, [pc, #20]	; (400c24 <_sbrk+0x34>)
  400c0e:	4b03      	ldr	r3, [pc, #12]	; (400c1c <_sbrk+0x2c>)
  400c10:	601a      	str	r2, [r3, #0]
  400c12:	e7f0      	b.n	400bf6 <_sbrk+0x6>
		return (caddr_t) -1;	
  400c14:	f04f 30ff 	mov.w	r0, #4294967295
}
  400c18:	4770      	bx	lr
  400c1a:	bf00      	nop
  400c1c:	200008f4 	.word	0x200008f4
  400c20:	20027ffc 	.word	0x20027ffc
  400c24:	20003968 	.word	0x20003968

00400c28 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400c28:	f04f 30ff 	mov.w	r0, #4294967295
  400c2c:	4770      	bx	lr

00400c2e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400c32:	604b      	str	r3, [r1, #4]

	return 0;
}
  400c34:	2000      	movs	r0, #0
  400c36:	4770      	bx	lr

00400c38 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400c38:	2001      	movs	r0, #1
  400c3a:	4770      	bx	lr

00400c3c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400c3c:	2000      	movs	r0, #0
  400c3e:	4770      	bx	lr

00400c40 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400c40:	b5f0      	push	{r4, r5, r6, r7, lr}
  400c42:	b083      	sub	sp, #12
  400c44:	4605      	mov	r5, r0
  400c46:	460c      	mov	r4, r1
	uint32_t val = 0;
  400c48:	2300      	movs	r3, #0
  400c4a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400c4c:	4b18      	ldr	r3, [pc, #96]	; (400cb0 <usart_serial_getchar+0x70>)
  400c4e:	4298      	cmp	r0, r3
  400c50:	d00a      	beq.n	400c68 <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400c52:	4b18      	ldr	r3, [pc, #96]	; (400cb4 <usart_serial_getchar+0x74>)
  400c54:	4298      	cmp	r0, r3
  400c56:	d00f      	beq.n	400c78 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400c58:	4b17      	ldr	r3, [pc, #92]	; (400cb8 <usart_serial_getchar+0x78>)
  400c5a:	4298      	cmp	r0, r3
  400c5c:	d014      	beq.n	400c88 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400c5e:	4b17      	ldr	r3, [pc, #92]	; (400cbc <usart_serial_getchar+0x7c>)
  400c60:	429d      	cmp	r5, r3
  400c62:	d01b      	beq.n	400c9c <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400c64:	b003      	add	sp, #12
  400c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400c68:	461f      	mov	r7, r3
  400c6a:	4e15      	ldr	r6, [pc, #84]	; (400cc0 <usart_serial_getchar+0x80>)
  400c6c:	4621      	mov	r1, r4
  400c6e:	4638      	mov	r0, r7
  400c70:	47b0      	blx	r6
  400c72:	2800      	cmp	r0, #0
  400c74:	d1fa      	bne.n	400c6c <usart_serial_getchar+0x2c>
  400c76:	e7f2      	b.n	400c5e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400c78:	461e      	mov	r6, r3
  400c7a:	4d11      	ldr	r5, [pc, #68]	; (400cc0 <usart_serial_getchar+0x80>)
  400c7c:	4621      	mov	r1, r4
  400c7e:	4630      	mov	r0, r6
  400c80:	47a8      	blx	r5
  400c82:	2800      	cmp	r0, #0
  400c84:	d1fa      	bne.n	400c7c <usart_serial_getchar+0x3c>
  400c86:	e7ed      	b.n	400c64 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400c88:	461e      	mov	r6, r3
  400c8a:	4d0e      	ldr	r5, [pc, #56]	; (400cc4 <usart_serial_getchar+0x84>)
  400c8c:	a901      	add	r1, sp, #4
  400c8e:	4630      	mov	r0, r6
  400c90:	47a8      	blx	r5
  400c92:	2800      	cmp	r0, #0
  400c94:	d1fa      	bne.n	400c8c <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400c96:	9b01      	ldr	r3, [sp, #4]
  400c98:	7023      	strb	r3, [r4, #0]
  400c9a:	e7e3      	b.n	400c64 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400c9c:	461e      	mov	r6, r3
  400c9e:	4d09      	ldr	r5, [pc, #36]	; (400cc4 <usart_serial_getchar+0x84>)
  400ca0:	a901      	add	r1, sp, #4
  400ca2:	4630      	mov	r0, r6
  400ca4:	47a8      	blx	r5
  400ca6:	2800      	cmp	r0, #0
  400ca8:	d1fa      	bne.n	400ca0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400caa:	9b01      	ldr	r3, [sp, #4]
  400cac:	7023      	strb	r3, [r4, #0]
}
  400cae:	e7d9      	b.n	400c64 <usart_serial_getchar+0x24>
  400cb0:	400e0600 	.word	0x400e0600
  400cb4:	400e0800 	.word	0x400e0800
  400cb8:	40024000 	.word	0x40024000
  400cbc:	40028000 	.word	0x40028000
  400cc0:	004002df 	.word	0x004002df
  400cc4:	00400189 	.word	0x00400189

00400cc8 <usart_serial_putchar>:
{
  400cc8:	b570      	push	{r4, r5, r6, lr}
  400cca:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400ccc:	4b18      	ldr	r3, [pc, #96]	; (400d30 <usart_serial_putchar+0x68>)
  400cce:	4298      	cmp	r0, r3
  400cd0:	d00a      	beq.n	400ce8 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400cd2:	4b18      	ldr	r3, [pc, #96]	; (400d34 <usart_serial_putchar+0x6c>)
  400cd4:	4298      	cmp	r0, r3
  400cd6:	d010      	beq.n	400cfa <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400cd8:	4b17      	ldr	r3, [pc, #92]	; (400d38 <usart_serial_putchar+0x70>)
  400cda:	4298      	cmp	r0, r3
  400cdc:	d016      	beq.n	400d0c <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400cde:	4b17      	ldr	r3, [pc, #92]	; (400d3c <usart_serial_putchar+0x74>)
  400ce0:	4298      	cmp	r0, r3
  400ce2:	d01c      	beq.n	400d1e <usart_serial_putchar+0x56>
	return 0;
  400ce4:	2000      	movs	r0, #0
}
  400ce6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400ce8:	461e      	mov	r6, r3
  400cea:	4d15      	ldr	r5, [pc, #84]	; (400d40 <usart_serial_putchar+0x78>)
  400cec:	4621      	mov	r1, r4
  400cee:	4630      	mov	r0, r6
  400cf0:	47a8      	blx	r5
  400cf2:	2800      	cmp	r0, #0
  400cf4:	d1fa      	bne.n	400cec <usart_serial_putchar+0x24>
		return 1;
  400cf6:	2001      	movs	r0, #1
  400cf8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400cfa:	461e      	mov	r6, r3
  400cfc:	4d10      	ldr	r5, [pc, #64]	; (400d40 <usart_serial_putchar+0x78>)
  400cfe:	4621      	mov	r1, r4
  400d00:	4630      	mov	r0, r6
  400d02:	47a8      	blx	r5
  400d04:	2800      	cmp	r0, #0
  400d06:	d1fa      	bne.n	400cfe <usart_serial_putchar+0x36>
		return 1;
  400d08:	2001      	movs	r0, #1
  400d0a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400d0c:	461e      	mov	r6, r3
  400d0e:	4d0d      	ldr	r5, [pc, #52]	; (400d44 <usart_serial_putchar+0x7c>)
  400d10:	4621      	mov	r1, r4
  400d12:	4630      	mov	r0, r6
  400d14:	47a8      	blx	r5
  400d16:	2800      	cmp	r0, #0
  400d18:	d1fa      	bne.n	400d10 <usart_serial_putchar+0x48>
		return 1;
  400d1a:	2001      	movs	r0, #1
  400d1c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400d1e:	461e      	mov	r6, r3
  400d20:	4d08      	ldr	r5, [pc, #32]	; (400d44 <usart_serial_putchar+0x7c>)
  400d22:	4621      	mov	r1, r4
  400d24:	4630      	mov	r0, r6
  400d26:	47a8      	blx	r5
  400d28:	2800      	cmp	r0, #0
  400d2a:	d1fa      	bne.n	400d22 <usart_serial_putchar+0x5a>
		return 1;
  400d2c:	2001      	movs	r0, #1
  400d2e:	bd70      	pop	{r4, r5, r6, pc}
  400d30:	400e0600 	.word	0x400e0600
  400d34:	400e0800 	.word	0x400e0800
  400d38:	40024000 	.word	0x40024000
  400d3c:	40028000 	.word	0x40028000
  400d40:	004002cf 	.word	0x004002cf
  400d44:	00400175 	.word	0x00400175

00400d48 <inicializacao_UART>:
	tc_enable_interrupt(TC,	CHANNEL, TC_IER_CPCS);
	tc_start(TC, CHANNEL);
}

void inicializacao_UART ()
{
  400d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d4c:	b084      	sub	sp, #16
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400d4e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400ddc <inicializacao_UART+0x94>
  400d52:	f8cd 8004 	str.w	r8, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400d56:	4c16      	ldr	r4, [pc, #88]	; (400db0 <inicializacao_UART+0x68>)
  400d58:	6823      	ldr	r3, [r4, #0]
  400d5a:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400d5c:	68a3      	ldr	r3, [r4, #8]
  400d5e:	9303      	str	r3, [sp, #12]
  400d60:	2008      	movs	r0, #8
  400d62:	4f14      	ldr	r7, [pc, #80]	; (400db4 <inicializacao_UART+0x6c>)
  400d64:	47b8      	blx	r7
		uart_init((Uart*)p_usart, &uart_settings);
  400d66:	4d14      	ldr	r5, [pc, #80]	; (400db8 <inicializacao_UART+0x70>)
  400d68:	a901      	add	r1, sp, #4
  400d6a:	4628      	mov	r0, r5
  400d6c:	4e13      	ldr	r6, [pc, #76]	; (400dbc <inicializacao_UART+0x74>)
  400d6e:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400d70:	4b13      	ldr	r3, [pc, #76]	; (400dc0 <inicializacao_UART+0x78>)
  400d72:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400d74:	4a13      	ldr	r2, [pc, #76]	; (400dc4 <inicializacao_UART+0x7c>)
  400d76:	4b14      	ldr	r3, [pc, #80]	; (400dc8 <inicializacao_UART+0x80>)
  400d78:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400d7a:	4a14      	ldr	r2, [pc, #80]	; (400dcc <inicializacao_UART+0x84>)
  400d7c:	4b14      	ldr	r3, [pc, #80]	; (400dd0 <inicializacao_UART+0x88>)
  400d7e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400d80:	f8cd 8004 	str.w	r8, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400d84:	6823      	ldr	r3, [r4, #0]
  400d86:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400d88:	68a3      	ldr	r3, [r4, #8]
  400d8a:	9303      	str	r3, [sp, #12]
  400d8c:	2008      	movs	r0, #8
  400d8e:	47b8      	blx	r7
		uart_init((Uart*)p_usart, &uart_settings);
  400d90:	a901      	add	r1, sp, #4
  400d92:	4628      	mov	r0, r5
  400d94:	47b0      	blx	r6
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400d96:	4d0f      	ldr	r5, [pc, #60]	; (400dd4 <inicializacao_UART+0x8c>)
  400d98:	682b      	ldr	r3, [r5, #0]
  400d9a:	2100      	movs	r1, #0
  400d9c:	6898      	ldr	r0, [r3, #8]
  400d9e:	4c0e      	ldr	r4, [pc, #56]	; (400dd8 <inicializacao_UART+0x90>)
  400da0:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400da2:	682b      	ldr	r3, [r5, #0]
  400da4:	2100      	movs	r1, #0
  400da6:	6858      	ldr	r0, [r3, #4]
  400da8:	47a0      	blx	r4
		.paritytype = CONF_UART_PARITY,
		.stopbits = CONF_UART_STOP_BITS
	};
	usart_serial_init(CONF_UART, &usart_options);
	stdio_serial_init((Usart *)CONF_UART, &usart_options);
}
  400daa:	b004      	add	sp, #16
  400dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400db0:	20000010 	.word	0x20000010
  400db4:	00400949 	.word	0x00400949
  400db8:	400e0600 	.word	0x400e0600
  400dbc:	00400299 	.word	0x00400299
  400dc0:	20000934 	.word	0x20000934
  400dc4:	00400cc9 	.word	0x00400cc9
  400dc8:	20000930 	.word	0x20000930
  400dcc:	00400c41 	.word	0x00400c41
  400dd0:	2000092c 	.word	0x2000092c
  400dd4:	20000020 	.word	0x20000020
  400dd8:	00401055 	.word	0x00401055
  400ddc:	07270e00 	.word	0x07270e00

00400de0 <TC0_Handler>:

void TC_Handler(void)
{
  400de0:	b508      	push	{r3, lr}
	tc_get_status(TC,CHANNEL);
  400de2:	2100      	movs	r1, #0
  400de4:	4803      	ldr	r0, [pc, #12]	; (400df4 <TC0_Handler+0x14>)
  400de6:	4b04      	ldr	r3, [pc, #16]	; (400df8 <TC0_Handler+0x18>)
  400de8:	4798      	blx	r3
	LED_Toggle(LED0_GPIO);
  400dea:	2013      	movs	r0, #19
  400dec:	4b03      	ldr	r3, [pc, #12]	; (400dfc <TC0_Handler+0x1c>)
  400dee:	4798      	blx	r3
  400df0:	bd08      	pop	{r3, pc}
  400df2:	bf00      	nop
  400df4:	40010000 	.word	0x40010000
  400df8:	00400221 	.word	0x00400221
  400dfc:	004005a3 	.word	0x004005a3

00400e00 <main>:
	sprintf(buffer,"Tempo: %i\tLuz: %f\n\r", escuro, luz_min);
	puts(buffer);
}

int main (void)
{
  400e00:	b500      	push	{lr}
  400e02:	b085      	sub	sp, #20
	sysclk_init();
  400e04:	4b1d      	ldr	r3, [pc, #116]	; (400e7c <main+0x7c>)
  400e06:	4798      	blx	r3
	board_init();
  400e08:	4b1d      	ldr	r3, [pc, #116]	; (400e80 <main+0x80>)
  400e0a:	4798      	blx	r3
	inicializacao_UART();
  400e0c:	4b1d      	ldr	r3, [pc, #116]	; (400e84 <main+0x84>)
  400e0e:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC);
  400e10:	2017      	movs	r0, #23
  400e12:	4b1d      	ldr	r3, [pc, #116]	; (400e88 <main+0x88>)
  400e14:	4798      	blx	r3
	tc_find_mck_divisor( freq_desejada, ul_sysclk, &ul_div, &ul_tcclks,	BOARD_MCK);
  400e16:	4d1d      	ldr	r5, [pc, #116]	; (400e8c <main+0x8c>)
  400e18:	9500      	str	r5, [sp, #0]
  400e1a:	ab03      	add	r3, sp, #12
  400e1c:	aa02      	add	r2, sp, #8
  400e1e:	4629      	mov	r1, r5
  400e20:	2001      	movs	r0, #1
  400e22:	4c1b      	ldr	r4, [pc, #108]	; (400e90 <main+0x90>)
  400e24:	47a0      	blx	r4
	tc_init(TC, CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  400e26:	4c1b      	ldr	r4, [pc, #108]	; (400e94 <main+0x94>)
  400e28:	9a03      	ldr	r2, [sp, #12]
  400e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  400e2e:	2100      	movs	r1, #0
  400e30:	4620      	mov	r0, r4
  400e32:	4b19      	ldr	r3, [pc, #100]	; (400e98 <main+0x98>)
  400e34:	4798      	blx	r3
	tc_write_rc(TC, CHANNEL, counts);
  400e36:	9a02      	ldr	r2, [sp, #8]
  400e38:	fbb5 f2f2 	udiv	r2, r5, r2
  400e3c:	2100      	movs	r1, #0
  400e3e:	4620      	mov	r0, r4
  400e40:	4b16      	ldr	r3, [pc, #88]	; (400e9c <main+0x9c>)
  400e42:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400e44:	4b16      	ldr	r3, [pc, #88]	; (400ea0 <main+0xa0>)
  400e46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400e4a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400e4e:	2140      	movs	r1, #64	; 0x40
  400e50:	f883 1317 	strb.w	r1, [r3, #791]	; 0x317
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400e54:	601a      	str	r2, [r3, #0]
	tc_enable_interrupt(TC,	CHANNEL, TC_IER_CPCS);
  400e56:	2210      	movs	r2, #16
  400e58:	2100      	movs	r1, #0
  400e5a:	4620      	mov	r0, r4
  400e5c:	4b11      	ldr	r3, [pc, #68]	; (400ea4 <main+0xa4>)
  400e5e:	4798      	blx	r3
	tc_start(TC, CHANNEL);
  400e60:	2100      	movs	r1, #0
  400e62:	4620      	mov	r0, r4
  400e64:	4b10      	ldr	r3, [pc, #64]	; (400ea8 <main+0xa8>)
  400e66:	4798      	blx	r3
	tc_config(1);
//configuracoes_gerais();

	while(1)
	{
		puts("TESTE\r");
  400e68:	4e10      	ldr	r6, [pc, #64]	; (400eac <main+0xac>)
  400e6a:	4d11      	ldr	r5, [pc, #68]	; (400eb0 <main+0xb0>)
		delay_s(1);
  400e6c:	4c11      	ldr	r4, [pc, #68]	; (400eb4 <main+0xb4>)
		puts("TESTE\r");
  400e6e:	4630      	mov	r0, r6
  400e70:	47a8      	blx	r5
		delay_s(1);
  400e72:	4620      	mov	r0, r4
  400e74:	4b10      	ldr	r3, [pc, #64]	; (400eb8 <main+0xb8>)
  400e76:	4798      	blx	r3
  400e78:	e7f9      	b.n	400e6e <main+0x6e>
  400e7a:	bf00      	nop
  400e7c:	004002f1 	.word	0x004002f1
  400e80:	00400355 	.word	0x00400355
  400e84:	00400d49 	.word	0x00400d49
  400e88:	00400949 	.word	0x00400949
  400e8c:	07270e00 	.word	0x07270e00
  400e90:	00400229 	.word	0x00400229
  400e94:	40010000 	.word	0x40010000
  400e98:	004001f1 	.word	0x004001f1
  400e9c:	00400211 	.word	0x00400211
  400ea0:	e000e100 	.word	0xe000e100
  400ea4:	00400219 	.word	0x00400219
  400ea8:	00400209 	.word	0x00400209
  400eac:	00402ba0 	.word	0x00402ba0
  400eb0:	00401045 	.word	0x00401045
  400eb4:	0082ca25 	.word	0x0082ca25
  400eb8:	20000001 	.word	0x20000001

00400ebc <__libc_init_array>:
  400ebc:	b570      	push	{r4, r5, r6, lr}
  400ebe:	4e0f      	ldr	r6, [pc, #60]	; (400efc <__libc_init_array+0x40>)
  400ec0:	4d0f      	ldr	r5, [pc, #60]	; (400f00 <__libc_init_array+0x44>)
  400ec2:	1b76      	subs	r6, r6, r5
  400ec4:	10b6      	asrs	r6, r6, #2
  400ec6:	bf18      	it	ne
  400ec8:	2400      	movne	r4, #0
  400eca:	d005      	beq.n	400ed8 <__libc_init_array+0x1c>
  400ecc:	3401      	adds	r4, #1
  400ece:	f855 3b04 	ldr.w	r3, [r5], #4
  400ed2:	4798      	blx	r3
  400ed4:	42a6      	cmp	r6, r4
  400ed6:	d1f9      	bne.n	400ecc <__libc_init_array+0x10>
  400ed8:	4e0a      	ldr	r6, [pc, #40]	; (400f04 <__libc_init_array+0x48>)
  400eda:	4d0b      	ldr	r5, [pc, #44]	; (400f08 <__libc_init_array+0x4c>)
  400edc:	1b76      	subs	r6, r6, r5
  400ede:	f001 fe67 	bl	402bb0 <_init>
  400ee2:	10b6      	asrs	r6, r6, #2
  400ee4:	bf18      	it	ne
  400ee6:	2400      	movne	r4, #0
  400ee8:	d006      	beq.n	400ef8 <__libc_init_array+0x3c>
  400eea:	3401      	adds	r4, #1
  400eec:	f855 3b04 	ldr.w	r3, [r5], #4
  400ef0:	4798      	blx	r3
  400ef2:	42a6      	cmp	r6, r4
  400ef4:	d1f9      	bne.n	400eea <__libc_init_array+0x2e>
  400ef6:	bd70      	pop	{r4, r5, r6, pc}
  400ef8:	bd70      	pop	{r4, r5, r6, pc}
  400efa:	bf00      	nop
  400efc:	00402bbc 	.word	0x00402bbc
  400f00:	00402bbc 	.word	0x00402bbc
  400f04:	00402bc4 	.word	0x00402bc4
  400f08:	00402bbc 	.word	0x00402bbc

00400f0c <memset>:
  400f0c:	b470      	push	{r4, r5, r6}
  400f0e:	0786      	lsls	r6, r0, #30
  400f10:	d046      	beq.n	400fa0 <memset+0x94>
  400f12:	1e54      	subs	r4, r2, #1
  400f14:	2a00      	cmp	r2, #0
  400f16:	d041      	beq.n	400f9c <memset+0x90>
  400f18:	b2ca      	uxtb	r2, r1
  400f1a:	4603      	mov	r3, r0
  400f1c:	e002      	b.n	400f24 <memset+0x18>
  400f1e:	f114 34ff 	adds.w	r4, r4, #4294967295
  400f22:	d33b      	bcc.n	400f9c <memset+0x90>
  400f24:	f803 2b01 	strb.w	r2, [r3], #1
  400f28:	079d      	lsls	r5, r3, #30
  400f2a:	d1f8      	bne.n	400f1e <memset+0x12>
  400f2c:	2c03      	cmp	r4, #3
  400f2e:	d92e      	bls.n	400f8e <memset+0x82>
  400f30:	b2cd      	uxtb	r5, r1
  400f32:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400f36:	2c0f      	cmp	r4, #15
  400f38:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400f3c:	d919      	bls.n	400f72 <memset+0x66>
  400f3e:	f103 0210 	add.w	r2, r3, #16
  400f42:	4626      	mov	r6, r4
  400f44:	3e10      	subs	r6, #16
  400f46:	2e0f      	cmp	r6, #15
  400f48:	f842 5c10 	str.w	r5, [r2, #-16]
  400f4c:	f842 5c0c 	str.w	r5, [r2, #-12]
  400f50:	f842 5c08 	str.w	r5, [r2, #-8]
  400f54:	f842 5c04 	str.w	r5, [r2, #-4]
  400f58:	f102 0210 	add.w	r2, r2, #16
  400f5c:	d8f2      	bhi.n	400f44 <memset+0x38>
  400f5e:	f1a4 0210 	sub.w	r2, r4, #16
  400f62:	f022 020f 	bic.w	r2, r2, #15
  400f66:	f004 040f 	and.w	r4, r4, #15
  400f6a:	3210      	adds	r2, #16
  400f6c:	2c03      	cmp	r4, #3
  400f6e:	4413      	add	r3, r2
  400f70:	d90d      	bls.n	400f8e <memset+0x82>
  400f72:	461e      	mov	r6, r3
  400f74:	4622      	mov	r2, r4
  400f76:	3a04      	subs	r2, #4
  400f78:	2a03      	cmp	r2, #3
  400f7a:	f846 5b04 	str.w	r5, [r6], #4
  400f7e:	d8fa      	bhi.n	400f76 <memset+0x6a>
  400f80:	1f22      	subs	r2, r4, #4
  400f82:	f022 0203 	bic.w	r2, r2, #3
  400f86:	3204      	adds	r2, #4
  400f88:	4413      	add	r3, r2
  400f8a:	f004 0403 	and.w	r4, r4, #3
  400f8e:	b12c      	cbz	r4, 400f9c <memset+0x90>
  400f90:	b2c9      	uxtb	r1, r1
  400f92:	441c      	add	r4, r3
  400f94:	f803 1b01 	strb.w	r1, [r3], #1
  400f98:	429c      	cmp	r4, r3
  400f9a:	d1fb      	bne.n	400f94 <memset+0x88>
  400f9c:	bc70      	pop	{r4, r5, r6}
  400f9e:	4770      	bx	lr
  400fa0:	4614      	mov	r4, r2
  400fa2:	4603      	mov	r3, r0
  400fa4:	e7c2      	b.n	400f2c <memset+0x20>
  400fa6:	bf00      	nop

00400fa8 <_puts_r>:
  400fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
  400faa:	4605      	mov	r5, r0
  400fac:	b089      	sub	sp, #36	; 0x24
  400fae:	4608      	mov	r0, r1
  400fb0:	460c      	mov	r4, r1
  400fb2:	f000 f925 	bl	401200 <strlen>
  400fb6:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400fb8:	4f21      	ldr	r7, [pc, #132]	; (401040 <_puts_r+0x98>)
  400fba:	9404      	str	r4, [sp, #16]
  400fbc:	2601      	movs	r6, #1
  400fbe:	1c44      	adds	r4, r0, #1
  400fc0:	a904      	add	r1, sp, #16
  400fc2:	2202      	movs	r2, #2
  400fc4:	9403      	str	r4, [sp, #12]
  400fc6:	9005      	str	r0, [sp, #20]
  400fc8:	68ac      	ldr	r4, [r5, #8]
  400fca:	9706      	str	r7, [sp, #24]
  400fcc:	9607      	str	r6, [sp, #28]
  400fce:	9101      	str	r1, [sp, #4]
  400fd0:	9202      	str	r2, [sp, #8]
  400fd2:	b353      	cbz	r3, 40102a <_puts_r+0x82>
  400fd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400fd6:	f013 0f01 	tst.w	r3, #1
  400fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400fde:	b29a      	uxth	r2, r3
  400fe0:	d101      	bne.n	400fe6 <_puts_r+0x3e>
  400fe2:	0590      	lsls	r0, r2, #22
  400fe4:	d525      	bpl.n	401032 <_puts_r+0x8a>
  400fe6:	0491      	lsls	r1, r2, #18
  400fe8:	d406      	bmi.n	400ff8 <_puts_r+0x50>
  400fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  400fec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400ff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  400ff4:	81a3      	strh	r3, [r4, #12]
  400ff6:	6662      	str	r2, [r4, #100]	; 0x64
  400ff8:	4628      	mov	r0, r5
  400ffa:	aa01      	add	r2, sp, #4
  400ffc:	4621      	mov	r1, r4
  400ffe:	f000 fbfd 	bl	4017fc <__sfvwrite_r>
  401002:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401004:	2800      	cmp	r0, #0
  401006:	bf0c      	ite	eq
  401008:	250a      	moveq	r5, #10
  40100a:	f04f 35ff 	movne.w	r5, #4294967295
  40100e:	07da      	lsls	r2, r3, #31
  401010:	d402      	bmi.n	401018 <_puts_r+0x70>
  401012:	89a3      	ldrh	r3, [r4, #12]
  401014:	059b      	lsls	r3, r3, #22
  401016:	d502      	bpl.n	40101e <_puts_r+0x76>
  401018:	4628      	mov	r0, r5
  40101a:	b009      	add	sp, #36	; 0x24
  40101c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40101e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401020:	f000 fd94 	bl	401b4c <__retarget_lock_release_recursive>
  401024:	4628      	mov	r0, r5
  401026:	b009      	add	sp, #36	; 0x24
  401028:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40102a:	4628      	mov	r0, r5
  40102c:	f000 fa5e 	bl	4014ec <__sinit>
  401030:	e7d0      	b.n	400fd4 <_puts_r+0x2c>
  401032:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401034:	f000 fd88 	bl	401b48 <__retarget_lock_acquire_recursive>
  401038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40103c:	b29a      	uxth	r2, r3
  40103e:	e7d2      	b.n	400fe6 <_puts_r+0x3e>
  401040:	00402bac 	.word	0x00402bac

00401044 <puts>:
  401044:	4b02      	ldr	r3, [pc, #8]	; (401050 <puts+0xc>)
  401046:	4601      	mov	r1, r0
  401048:	6818      	ldr	r0, [r3, #0]
  40104a:	f7ff bfad 	b.w	400fa8 <_puts_r>
  40104e:	bf00      	nop
  401050:	20000020 	.word	0x20000020

00401054 <setbuf>:
  401054:	2900      	cmp	r1, #0
  401056:	bf0c      	ite	eq
  401058:	2202      	moveq	r2, #2
  40105a:	2200      	movne	r2, #0
  40105c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401060:	f000 b800 	b.w	401064 <setvbuf>

00401064 <setvbuf>:
  401064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401068:	4c61      	ldr	r4, [pc, #388]	; (4011f0 <setvbuf+0x18c>)
  40106a:	6825      	ldr	r5, [r4, #0]
  40106c:	b083      	sub	sp, #12
  40106e:	4604      	mov	r4, r0
  401070:	460f      	mov	r7, r1
  401072:	4690      	mov	r8, r2
  401074:	461e      	mov	r6, r3
  401076:	b115      	cbz	r5, 40107e <setvbuf+0x1a>
  401078:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40107a:	2b00      	cmp	r3, #0
  40107c:	d064      	beq.n	401148 <setvbuf+0xe4>
  40107e:	f1b8 0f02 	cmp.w	r8, #2
  401082:	d006      	beq.n	401092 <setvbuf+0x2e>
  401084:	f1b8 0f01 	cmp.w	r8, #1
  401088:	f200 809f 	bhi.w	4011ca <setvbuf+0x166>
  40108c:	2e00      	cmp	r6, #0
  40108e:	f2c0 809c 	blt.w	4011ca <setvbuf+0x166>
  401092:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401094:	07d8      	lsls	r0, r3, #31
  401096:	d534      	bpl.n	401102 <setvbuf+0x9e>
  401098:	4621      	mov	r1, r4
  40109a:	4628      	mov	r0, r5
  40109c:	f000 f9ce 	bl	40143c <_fflush_r>
  4010a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4010a2:	b141      	cbz	r1, 4010b6 <setvbuf+0x52>
  4010a4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4010a8:	4299      	cmp	r1, r3
  4010aa:	d002      	beq.n	4010b2 <setvbuf+0x4e>
  4010ac:	4628      	mov	r0, r5
  4010ae:	f000 fabf 	bl	401630 <_free_r>
  4010b2:	2300      	movs	r3, #0
  4010b4:	6323      	str	r3, [r4, #48]	; 0x30
  4010b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4010ba:	2200      	movs	r2, #0
  4010bc:	61a2      	str	r2, [r4, #24]
  4010be:	6062      	str	r2, [r4, #4]
  4010c0:	061a      	lsls	r2, r3, #24
  4010c2:	d43a      	bmi.n	40113a <setvbuf+0xd6>
  4010c4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4010c8:	f023 0303 	bic.w	r3, r3, #3
  4010cc:	f1b8 0f02 	cmp.w	r8, #2
  4010d0:	81a3      	strh	r3, [r4, #12]
  4010d2:	d01d      	beq.n	401110 <setvbuf+0xac>
  4010d4:	ab01      	add	r3, sp, #4
  4010d6:	466a      	mov	r2, sp
  4010d8:	4621      	mov	r1, r4
  4010da:	4628      	mov	r0, r5
  4010dc:	f000 fd38 	bl	401b50 <__swhatbuf_r>
  4010e0:	89a3      	ldrh	r3, [r4, #12]
  4010e2:	4318      	orrs	r0, r3
  4010e4:	81a0      	strh	r0, [r4, #12]
  4010e6:	2e00      	cmp	r6, #0
  4010e8:	d132      	bne.n	401150 <setvbuf+0xec>
  4010ea:	9e00      	ldr	r6, [sp, #0]
  4010ec:	4630      	mov	r0, r6
  4010ee:	f000 fda7 	bl	401c40 <malloc>
  4010f2:	4607      	mov	r7, r0
  4010f4:	2800      	cmp	r0, #0
  4010f6:	d06b      	beq.n	4011d0 <setvbuf+0x16c>
  4010f8:	89a3      	ldrh	r3, [r4, #12]
  4010fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4010fe:	81a3      	strh	r3, [r4, #12]
  401100:	e028      	b.n	401154 <setvbuf+0xf0>
  401102:	89a3      	ldrh	r3, [r4, #12]
  401104:	0599      	lsls	r1, r3, #22
  401106:	d4c7      	bmi.n	401098 <setvbuf+0x34>
  401108:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40110a:	f000 fd1d 	bl	401b48 <__retarget_lock_acquire_recursive>
  40110e:	e7c3      	b.n	401098 <setvbuf+0x34>
  401110:	2500      	movs	r5, #0
  401112:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401114:	2600      	movs	r6, #0
  401116:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40111a:	f043 0302 	orr.w	r3, r3, #2
  40111e:	2001      	movs	r0, #1
  401120:	60a6      	str	r6, [r4, #8]
  401122:	07ce      	lsls	r6, r1, #31
  401124:	81a3      	strh	r3, [r4, #12]
  401126:	6022      	str	r2, [r4, #0]
  401128:	6122      	str	r2, [r4, #16]
  40112a:	6160      	str	r0, [r4, #20]
  40112c:	d401      	bmi.n	401132 <setvbuf+0xce>
  40112e:	0598      	lsls	r0, r3, #22
  401130:	d53e      	bpl.n	4011b0 <setvbuf+0x14c>
  401132:	4628      	mov	r0, r5
  401134:	b003      	add	sp, #12
  401136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40113a:	6921      	ldr	r1, [r4, #16]
  40113c:	4628      	mov	r0, r5
  40113e:	f000 fa77 	bl	401630 <_free_r>
  401142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401146:	e7bd      	b.n	4010c4 <setvbuf+0x60>
  401148:	4628      	mov	r0, r5
  40114a:	f000 f9cf 	bl	4014ec <__sinit>
  40114e:	e796      	b.n	40107e <setvbuf+0x1a>
  401150:	2f00      	cmp	r7, #0
  401152:	d0cb      	beq.n	4010ec <setvbuf+0x88>
  401154:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401156:	2b00      	cmp	r3, #0
  401158:	d033      	beq.n	4011c2 <setvbuf+0x15e>
  40115a:	9b00      	ldr	r3, [sp, #0]
  40115c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401160:	6027      	str	r7, [r4, #0]
  401162:	429e      	cmp	r6, r3
  401164:	bf1c      	itt	ne
  401166:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40116a:	81a2      	strhne	r2, [r4, #12]
  40116c:	f1b8 0f01 	cmp.w	r8, #1
  401170:	bf04      	itt	eq
  401172:	f042 0201 	orreq.w	r2, r2, #1
  401176:	81a2      	strheq	r2, [r4, #12]
  401178:	b292      	uxth	r2, r2
  40117a:	f012 0308 	ands.w	r3, r2, #8
  40117e:	6127      	str	r7, [r4, #16]
  401180:	6166      	str	r6, [r4, #20]
  401182:	d00e      	beq.n	4011a2 <setvbuf+0x13e>
  401184:	07d1      	lsls	r1, r2, #31
  401186:	d51a      	bpl.n	4011be <setvbuf+0x15a>
  401188:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40118a:	4276      	negs	r6, r6
  40118c:	2300      	movs	r3, #0
  40118e:	f015 0501 	ands.w	r5, r5, #1
  401192:	61a6      	str	r6, [r4, #24]
  401194:	60a3      	str	r3, [r4, #8]
  401196:	d009      	beq.n	4011ac <setvbuf+0x148>
  401198:	2500      	movs	r5, #0
  40119a:	4628      	mov	r0, r5
  40119c:	b003      	add	sp, #12
  40119e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4011a2:	60a3      	str	r3, [r4, #8]
  4011a4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4011a6:	f015 0501 	ands.w	r5, r5, #1
  4011aa:	d1f5      	bne.n	401198 <setvbuf+0x134>
  4011ac:	0593      	lsls	r3, r2, #22
  4011ae:	d4c0      	bmi.n	401132 <setvbuf+0xce>
  4011b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4011b2:	f000 fccb 	bl	401b4c <__retarget_lock_release_recursive>
  4011b6:	4628      	mov	r0, r5
  4011b8:	b003      	add	sp, #12
  4011ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4011be:	60a6      	str	r6, [r4, #8]
  4011c0:	e7f0      	b.n	4011a4 <setvbuf+0x140>
  4011c2:	4628      	mov	r0, r5
  4011c4:	f000 f992 	bl	4014ec <__sinit>
  4011c8:	e7c7      	b.n	40115a <setvbuf+0xf6>
  4011ca:	f04f 35ff 	mov.w	r5, #4294967295
  4011ce:	e7b0      	b.n	401132 <setvbuf+0xce>
  4011d0:	f8dd 9000 	ldr.w	r9, [sp]
  4011d4:	45b1      	cmp	r9, r6
  4011d6:	d004      	beq.n	4011e2 <setvbuf+0x17e>
  4011d8:	4648      	mov	r0, r9
  4011da:	f000 fd31 	bl	401c40 <malloc>
  4011de:	4607      	mov	r7, r0
  4011e0:	b920      	cbnz	r0, 4011ec <setvbuf+0x188>
  4011e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4011e6:	f04f 35ff 	mov.w	r5, #4294967295
  4011ea:	e792      	b.n	401112 <setvbuf+0xae>
  4011ec:	464e      	mov	r6, r9
  4011ee:	e783      	b.n	4010f8 <setvbuf+0x94>
  4011f0:	20000020 	.word	0x20000020
	...

00401200 <strlen>:
  401200:	f890 f000 	pld	[r0]
  401204:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401208:	f020 0107 	bic.w	r1, r0, #7
  40120c:	f06f 0c00 	mvn.w	ip, #0
  401210:	f010 0407 	ands.w	r4, r0, #7
  401214:	f891 f020 	pld	[r1, #32]
  401218:	f040 8049 	bne.w	4012ae <strlen+0xae>
  40121c:	f04f 0400 	mov.w	r4, #0
  401220:	f06f 0007 	mvn.w	r0, #7
  401224:	e9d1 2300 	ldrd	r2, r3, [r1]
  401228:	f891 f040 	pld	[r1, #64]	; 0x40
  40122c:	f100 0008 	add.w	r0, r0, #8
  401230:	fa82 f24c 	uadd8	r2, r2, ip
  401234:	faa4 f28c 	sel	r2, r4, ip
  401238:	fa83 f34c 	uadd8	r3, r3, ip
  40123c:	faa2 f38c 	sel	r3, r2, ip
  401240:	bb4b      	cbnz	r3, 401296 <strlen+0x96>
  401242:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401246:	fa82 f24c 	uadd8	r2, r2, ip
  40124a:	f100 0008 	add.w	r0, r0, #8
  40124e:	faa4 f28c 	sel	r2, r4, ip
  401252:	fa83 f34c 	uadd8	r3, r3, ip
  401256:	faa2 f38c 	sel	r3, r2, ip
  40125a:	b9e3      	cbnz	r3, 401296 <strlen+0x96>
  40125c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401260:	fa82 f24c 	uadd8	r2, r2, ip
  401264:	f100 0008 	add.w	r0, r0, #8
  401268:	faa4 f28c 	sel	r2, r4, ip
  40126c:	fa83 f34c 	uadd8	r3, r3, ip
  401270:	faa2 f38c 	sel	r3, r2, ip
  401274:	b97b      	cbnz	r3, 401296 <strlen+0x96>
  401276:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40127a:	f101 0120 	add.w	r1, r1, #32
  40127e:	fa82 f24c 	uadd8	r2, r2, ip
  401282:	f100 0008 	add.w	r0, r0, #8
  401286:	faa4 f28c 	sel	r2, r4, ip
  40128a:	fa83 f34c 	uadd8	r3, r3, ip
  40128e:	faa2 f38c 	sel	r3, r2, ip
  401292:	2b00      	cmp	r3, #0
  401294:	d0c6      	beq.n	401224 <strlen+0x24>
  401296:	2a00      	cmp	r2, #0
  401298:	bf04      	itt	eq
  40129a:	3004      	addeq	r0, #4
  40129c:	461a      	moveq	r2, r3
  40129e:	ba12      	rev	r2, r2
  4012a0:	fab2 f282 	clz	r2, r2
  4012a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4012a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4012ac:	4770      	bx	lr
  4012ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4012b2:	f004 0503 	and.w	r5, r4, #3
  4012b6:	f1c4 0000 	rsb	r0, r4, #0
  4012ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4012be:	f014 0f04 	tst.w	r4, #4
  4012c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4012c6:	fa0c f505 	lsl.w	r5, ip, r5
  4012ca:	ea62 0205 	orn	r2, r2, r5
  4012ce:	bf1c      	itt	ne
  4012d0:	ea63 0305 	ornne	r3, r3, r5
  4012d4:	4662      	movne	r2, ip
  4012d6:	f04f 0400 	mov.w	r4, #0
  4012da:	e7a9      	b.n	401230 <strlen+0x30>

004012dc <register_fini>:
  4012dc:	4b02      	ldr	r3, [pc, #8]	; (4012e8 <register_fini+0xc>)
  4012de:	b113      	cbz	r3, 4012e6 <register_fini+0xa>
  4012e0:	4802      	ldr	r0, [pc, #8]	; (4012ec <register_fini+0x10>)
  4012e2:	f000 b805 	b.w	4012f0 <atexit>
  4012e6:	4770      	bx	lr
  4012e8:	00000000 	.word	0x00000000
  4012ec:	0040155d 	.word	0x0040155d

004012f0 <atexit>:
  4012f0:	2300      	movs	r3, #0
  4012f2:	4601      	mov	r1, r0
  4012f4:	461a      	mov	r2, r3
  4012f6:	4618      	mov	r0, r3
  4012f8:	f001 bb2a 	b.w	402950 <__register_exitproc>

004012fc <__sflush_r>:
  4012fc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  401300:	b29a      	uxth	r2, r3
  401302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401306:	460d      	mov	r5, r1
  401308:	0711      	lsls	r1, r2, #28
  40130a:	4680      	mov	r8, r0
  40130c:	d43a      	bmi.n	401384 <__sflush_r+0x88>
  40130e:	686a      	ldr	r2, [r5, #4]
  401310:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401314:	2a00      	cmp	r2, #0
  401316:	81ab      	strh	r3, [r5, #12]
  401318:	dd6f      	ble.n	4013fa <__sflush_r+0xfe>
  40131a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40131c:	2c00      	cmp	r4, #0
  40131e:	d049      	beq.n	4013b4 <__sflush_r+0xb8>
  401320:	2200      	movs	r2, #0
  401322:	b29b      	uxth	r3, r3
  401324:	f8d8 6000 	ldr.w	r6, [r8]
  401328:	f8c8 2000 	str.w	r2, [r8]
  40132c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  401330:	d067      	beq.n	401402 <__sflush_r+0x106>
  401332:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401334:	075f      	lsls	r7, r3, #29
  401336:	d505      	bpl.n	401344 <__sflush_r+0x48>
  401338:	6869      	ldr	r1, [r5, #4]
  40133a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40133c:	1a52      	subs	r2, r2, r1
  40133e:	b10b      	cbz	r3, 401344 <__sflush_r+0x48>
  401340:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  401342:	1ad2      	subs	r2, r2, r3
  401344:	2300      	movs	r3, #0
  401346:	69e9      	ldr	r1, [r5, #28]
  401348:	4640      	mov	r0, r8
  40134a:	47a0      	blx	r4
  40134c:	1c44      	adds	r4, r0, #1
  40134e:	d03c      	beq.n	4013ca <__sflush_r+0xce>
  401350:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  401354:	692a      	ldr	r2, [r5, #16]
  401356:	602a      	str	r2, [r5, #0]
  401358:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40135c:	2200      	movs	r2, #0
  40135e:	81ab      	strh	r3, [r5, #12]
  401360:	04db      	lsls	r3, r3, #19
  401362:	606a      	str	r2, [r5, #4]
  401364:	d447      	bmi.n	4013f6 <__sflush_r+0xfa>
  401366:	6b29      	ldr	r1, [r5, #48]	; 0x30
  401368:	f8c8 6000 	str.w	r6, [r8]
  40136c:	b311      	cbz	r1, 4013b4 <__sflush_r+0xb8>
  40136e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  401372:	4299      	cmp	r1, r3
  401374:	d002      	beq.n	40137c <__sflush_r+0x80>
  401376:	4640      	mov	r0, r8
  401378:	f000 f95a 	bl	401630 <_free_r>
  40137c:	2000      	movs	r0, #0
  40137e:	6328      	str	r0, [r5, #48]	; 0x30
  401380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401384:	692e      	ldr	r6, [r5, #16]
  401386:	b1ae      	cbz	r6, 4013b4 <__sflush_r+0xb8>
  401388:	682c      	ldr	r4, [r5, #0]
  40138a:	602e      	str	r6, [r5, #0]
  40138c:	0791      	lsls	r1, r2, #30
  40138e:	bf0c      	ite	eq
  401390:	696b      	ldreq	r3, [r5, #20]
  401392:	2300      	movne	r3, #0
  401394:	1ba4      	subs	r4, r4, r6
  401396:	60ab      	str	r3, [r5, #8]
  401398:	e00a      	b.n	4013b0 <__sflush_r+0xb4>
  40139a:	4623      	mov	r3, r4
  40139c:	4632      	mov	r2, r6
  40139e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4013a0:	69e9      	ldr	r1, [r5, #28]
  4013a2:	4640      	mov	r0, r8
  4013a4:	47b8      	blx	r7
  4013a6:	2800      	cmp	r0, #0
  4013a8:	eba4 0400 	sub.w	r4, r4, r0
  4013ac:	4406      	add	r6, r0
  4013ae:	dd04      	ble.n	4013ba <__sflush_r+0xbe>
  4013b0:	2c00      	cmp	r4, #0
  4013b2:	dcf2      	bgt.n	40139a <__sflush_r+0x9e>
  4013b4:	2000      	movs	r0, #0
  4013b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4013ba:	89ab      	ldrh	r3, [r5, #12]
  4013bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4013c0:	81ab      	strh	r3, [r5, #12]
  4013c2:	f04f 30ff 	mov.w	r0, #4294967295
  4013c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4013ca:	f8d8 4000 	ldr.w	r4, [r8]
  4013ce:	2c1d      	cmp	r4, #29
  4013d0:	d8f3      	bhi.n	4013ba <__sflush_r+0xbe>
  4013d2:	4b19      	ldr	r3, [pc, #100]	; (401438 <__sflush_r+0x13c>)
  4013d4:	40e3      	lsrs	r3, r4
  4013d6:	43db      	mvns	r3, r3
  4013d8:	f013 0301 	ands.w	r3, r3, #1
  4013dc:	d1ed      	bne.n	4013ba <__sflush_r+0xbe>
  4013de:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4013e2:	606b      	str	r3, [r5, #4]
  4013e4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4013e8:	6929      	ldr	r1, [r5, #16]
  4013ea:	81ab      	strh	r3, [r5, #12]
  4013ec:	04da      	lsls	r2, r3, #19
  4013ee:	6029      	str	r1, [r5, #0]
  4013f0:	d5b9      	bpl.n	401366 <__sflush_r+0x6a>
  4013f2:	2c00      	cmp	r4, #0
  4013f4:	d1b7      	bne.n	401366 <__sflush_r+0x6a>
  4013f6:	6528      	str	r0, [r5, #80]	; 0x50
  4013f8:	e7b5      	b.n	401366 <__sflush_r+0x6a>
  4013fa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4013fc:	2a00      	cmp	r2, #0
  4013fe:	dc8c      	bgt.n	40131a <__sflush_r+0x1e>
  401400:	e7d8      	b.n	4013b4 <__sflush_r+0xb8>
  401402:	2301      	movs	r3, #1
  401404:	69e9      	ldr	r1, [r5, #28]
  401406:	4640      	mov	r0, r8
  401408:	47a0      	blx	r4
  40140a:	1c43      	adds	r3, r0, #1
  40140c:	4602      	mov	r2, r0
  40140e:	d002      	beq.n	401416 <__sflush_r+0x11a>
  401410:	89ab      	ldrh	r3, [r5, #12]
  401412:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401414:	e78e      	b.n	401334 <__sflush_r+0x38>
  401416:	f8d8 3000 	ldr.w	r3, [r8]
  40141a:	2b00      	cmp	r3, #0
  40141c:	d0f8      	beq.n	401410 <__sflush_r+0x114>
  40141e:	2b1d      	cmp	r3, #29
  401420:	d001      	beq.n	401426 <__sflush_r+0x12a>
  401422:	2b16      	cmp	r3, #22
  401424:	d102      	bne.n	40142c <__sflush_r+0x130>
  401426:	f8c8 6000 	str.w	r6, [r8]
  40142a:	e7c3      	b.n	4013b4 <__sflush_r+0xb8>
  40142c:	89ab      	ldrh	r3, [r5, #12]
  40142e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401432:	81ab      	strh	r3, [r5, #12]
  401434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401438:	20400001 	.word	0x20400001

0040143c <_fflush_r>:
  40143c:	b538      	push	{r3, r4, r5, lr}
  40143e:	460d      	mov	r5, r1
  401440:	4604      	mov	r4, r0
  401442:	b108      	cbz	r0, 401448 <_fflush_r+0xc>
  401444:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401446:	b1bb      	cbz	r3, 401478 <_fflush_r+0x3c>
  401448:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40144c:	b188      	cbz	r0, 401472 <_fflush_r+0x36>
  40144e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  401450:	07db      	lsls	r3, r3, #31
  401452:	d401      	bmi.n	401458 <_fflush_r+0x1c>
  401454:	0581      	lsls	r1, r0, #22
  401456:	d517      	bpl.n	401488 <_fflush_r+0x4c>
  401458:	4620      	mov	r0, r4
  40145a:	4629      	mov	r1, r5
  40145c:	f7ff ff4e 	bl	4012fc <__sflush_r>
  401460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  401462:	07da      	lsls	r2, r3, #31
  401464:	4604      	mov	r4, r0
  401466:	d402      	bmi.n	40146e <_fflush_r+0x32>
  401468:	89ab      	ldrh	r3, [r5, #12]
  40146a:	059b      	lsls	r3, r3, #22
  40146c:	d507      	bpl.n	40147e <_fflush_r+0x42>
  40146e:	4620      	mov	r0, r4
  401470:	bd38      	pop	{r3, r4, r5, pc}
  401472:	4604      	mov	r4, r0
  401474:	4620      	mov	r0, r4
  401476:	bd38      	pop	{r3, r4, r5, pc}
  401478:	f000 f838 	bl	4014ec <__sinit>
  40147c:	e7e4      	b.n	401448 <_fflush_r+0xc>
  40147e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  401480:	f000 fb64 	bl	401b4c <__retarget_lock_release_recursive>
  401484:	4620      	mov	r0, r4
  401486:	bd38      	pop	{r3, r4, r5, pc}
  401488:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40148a:	f000 fb5d 	bl	401b48 <__retarget_lock_acquire_recursive>
  40148e:	e7e3      	b.n	401458 <_fflush_r+0x1c>

00401490 <_cleanup_r>:
  401490:	4901      	ldr	r1, [pc, #4]	; (401498 <_cleanup_r+0x8>)
  401492:	f000 bb2b 	b.w	401aec <_fwalk_reent>
  401496:	bf00      	nop
  401498:	00402a39 	.word	0x00402a39

0040149c <std.isra.0>:
  40149c:	b510      	push	{r4, lr}
  40149e:	2300      	movs	r3, #0
  4014a0:	4604      	mov	r4, r0
  4014a2:	8181      	strh	r1, [r0, #12]
  4014a4:	81c2      	strh	r2, [r0, #14]
  4014a6:	6003      	str	r3, [r0, #0]
  4014a8:	6043      	str	r3, [r0, #4]
  4014aa:	6083      	str	r3, [r0, #8]
  4014ac:	6643      	str	r3, [r0, #100]	; 0x64
  4014ae:	6103      	str	r3, [r0, #16]
  4014b0:	6143      	str	r3, [r0, #20]
  4014b2:	6183      	str	r3, [r0, #24]
  4014b4:	4619      	mov	r1, r3
  4014b6:	2208      	movs	r2, #8
  4014b8:	305c      	adds	r0, #92	; 0x5c
  4014ba:	f7ff fd27 	bl	400f0c <memset>
  4014be:	4807      	ldr	r0, [pc, #28]	; (4014dc <std.isra.0+0x40>)
  4014c0:	4907      	ldr	r1, [pc, #28]	; (4014e0 <std.isra.0+0x44>)
  4014c2:	4a08      	ldr	r2, [pc, #32]	; (4014e4 <std.isra.0+0x48>)
  4014c4:	4b08      	ldr	r3, [pc, #32]	; (4014e8 <std.isra.0+0x4c>)
  4014c6:	6220      	str	r0, [r4, #32]
  4014c8:	61e4      	str	r4, [r4, #28]
  4014ca:	6261      	str	r1, [r4, #36]	; 0x24
  4014cc:	62a2      	str	r2, [r4, #40]	; 0x28
  4014ce:	62e3      	str	r3, [r4, #44]	; 0x2c
  4014d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4014d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4014d8:	f000 bb32 	b.w	401b40 <__retarget_lock_init_recursive>
  4014dc:	004027d5 	.word	0x004027d5
  4014e0:	004027f9 	.word	0x004027f9
  4014e4:	00402835 	.word	0x00402835
  4014e8:	00402855 	.word	0x00402855

004014ec <__sinit>:
  4014ec:	b510      	push	{r4, lr}
  4014ee:	4604      	mov	r4, r0
  4014f0:	4812      	ldr	r0, [pc, #72]	; (40153c <__sinit+0x50>)
  4014f2:	f000 fb29 	bl	401b48 <__retarget_lock_acquire_recursive>
  4014f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4014f8:	b9d2      	cbnz	r2, 401530 <__sinit+0x44>
  4014fa:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4014fe:	4810      	ldr	r0, [pc, #64]	; (401540 <__sinit+0x54>)
  401500:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  401504:	2103      	movs	r1, #3
  401506:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40150a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40150c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  401510:	6860      	ldr	r0, [r4, #4]
  401512:	2104      	movs	r1, #4
  401514:	f7ff ffc2 	bl	40149c <std.isra.0>
  401518:	2201      	movs	r2, #1
  40151a:	2109      	movs	r1, #9
  40151c:	68a0      	ldr	r0, [r4, #8]
  40151e:	f7ff ffbd 	bl	40149c <std.isra.0>
  401522:	2202      	movs	r2, #2
  401524:	2112      	movs	r1, #18
  401526:	68e0      	ldr	r0, [r4, #12]
  401528:	f7ff ffb8 	bl	40149c <std.isra.0>
  40152c:	2301      	movs	r3, #1
  40152e:	63a3      	str	r3, [r4, #56]	; 0x38
  401530:	4802      	ldr	r0, [pc, #8]	; (40153c <__sinit+0x50>)
  401532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401536:	f000 bb09 	b.w	401b4c <__retarget_lock_release_recursive>
  40153a:	bf00      	nop
  40153c:	20000948 	.word	0x20000948
  401540:	00401491 	.word	0x00401491

00401544 <__sfp_lock_acquire>:
  401544:	4801      	ldr	r0, [pc, #4]	; (40154c <__sfp_lock_acquire+0x8>)
  401546:	f000 baff 	b.w	401b48 <__retarget_lock_acquire_recursive>
  40154a:	bf00      	nop
  40154c:	2000095c 	.word	0x2000095c

00401550 <__sfp_lock_release>:
  401550:	4801      	ldr	r0, [pc, #4]	; (401558 <__sfp_lock_release+0x8>)
  401552:	f000 bafb 	b.w	401b4c <__retarget_lock_release_recursive>
  401556:	bf00      	nop
  401558:	2000095c 	.word	0x2000095c

0040155c <__libc_fini_array>:
  40155c:	b538      	push	{r3, r4, r5, lr}
  40155e:	4c0a      	ldr	r4, [pc, #40]	; (401588 <__libc_fini_array+0x2c>)
  401560:	4d0a      	ldr	r5, [pc, #40]	; (40158c <__libc_fini_array+0x30>)
  401562:	1b64      	subs	r4, r4, r5
  401564:	10a4      	asrs	r4, r4, #2
  401566:	d00a      	beq.n	40157e <__libc_fini_array+0x22>
  401568:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40156c:	3b01      	subs	r3, #1
  40156e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401572:	3c01      	subs	r4, #1
  401574:	f855 3904 	ldr.w	r3, [r5], #-4
  401578:	4798      	blx	r3
  40157a:	2c00      	cmp	r4, #0
  40157c:	d1f9      	bne.n	401572 <__libc_fini_array+0x16>
  40157e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401582:	f001 bb1f 	b.w	402bc4 <_fini>
  401586:	bf00      	nop
  401588:	00402bd4 	.word	0x00402bd4
  40158c:	00402bd0 	.word	0x00402bd0

00401590 <_malloc_trim_r>:
  401590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401592:	4f24      	ldr	r7, [pc, #144]	; (401624 <_malloc_trim_r+0x94>)
  401594:	460c      	mov	r4, r1
  401596:	4606      	mov	r6, r0
  401598:	f000 ff58 	bl	40244c <__malloc_lock>
  40159c:	68bb      	ldr	r3, [r7, #8]
  40159e:	685d      	ldr	r5, [r3, #4]
  4015a0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4015a4:	310f      	adds	r1, #15
  4015a6:	f025 0503 	bic.w	r5, r5, #3
  4015aa:	4429      	add	r1, r5
  4015ac:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4015b0:	f021 010f 	bic.w	r1, r1, #15
  4015b4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4015b8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4015bc:	db07      	blt.n	4015ce <_malloc_trim_r+0x3e>
  4015be:	2100      	movs	r1, #0
  4015c0:	4630      	mov	r0, r6
  4015c2:	f001 f8f5 	bl	4027b0 <_sbrk_r>
  4015c6:	68bb      	ldr	r3, [r7, #8]
  4015c8:	442b      	add	r3, r5
  4015ca:	4298      	cmp	r0, r3
  4015cc:	d004      	beq.n	4015d8 <_malloc_trim_r+0x48>
  4015ce:	4630      	mov	r0, r6
  4015d0:	f000 ff42 	bl	402458 <__malloc_unlock>
  4015d4:	2000      	movs	r0, #0
  4015d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4015d8:	4261      	negs	r1, r4
  4015da:	4630      	mov	r0, r6
  4015dc:	f001 f8e8 	bl	4027b0 <_sbrk_r>
  4015e0:	3001      	adds	r0, #1
  4015e2:	d00d      	beq.n	401600 <_malloc_trim_r+0x70>
  4015e4:	4b10      	ldr	r3, [pc, #64]	; (401628 <_malloc_trim_r+0x98>)
  4015e6:	68ba      	ldr	r2, [r7, #8]
  4015e8:	6819      	ldr	r1, [r3, #0]
  4015ea:	1b2d      	subs	r5, r5, r4
  4015ec:	f045 0501 	orr.w	r5, r5, #1
  4015f0:	4630      	mov	r0, r6
  4015f2:	1b09      	subs	r1, r1, r4
  4015f4:	6055      	str	r5, [r2, #4]
  4015f6:	6019      	str	r1, [r3, #0]
  4015f8:	f000 ff2e 	bl	402458 <__malloc_unlock>
  4015fc:	2001      	movs	r0, #1
  4015fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401600:	2100      	movs	r1, #0
  401602:	4630      	mov	r0, r6
  401604:	f001 f8d4 	bl	4027b0 <_sbrk_r>
  401608:	68ba      	ldr	r2, [r7, #8]
  40160a:	1a83      	subs	r3, r0, r2
  40160c:	2b0f      	cmp	r3, #15
  40160e:	ddde      	ble.n	4015ce <_malloc_trim_r+0x3e>
  401610:	4c06      	ldr	r4, [pc, #24]	; (40162c <_malloc_trim_r+0x9c>)
  401612:	4905      	ldr	r1, [pc, #20]	; (401628 <_malloc_trim_r+0x98>)
  401614:	6824      	ldr	r4, [r4, #0]
  401616:	f043 0301 	orr.w	r3, r3, #1
  40161a:	1b00      	subs	r0, r0, r4
  40161c:	6053      	str	r3, [r2, #4]
  40161e:	6008      	str	r0, [r1, #0]
  401620:	e7d5      	b.n	4015ce <_malloc_trim_r+0x3e>
  401622:	bf00      	nop
  401624:	20000454 	.word	0x20000454
  401628:	200008f8 	.word	0x200008f8
  40162c:	2000085c 	.word	0x2000085c

00401630 <_free_r>:
  401630:	2900      	cmp	r1, #0
  401632:	d044      	beq.n	4016be <_free_r+0x8e>
  401634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401638:	460d      	mov	r5, r1
  40163a:	4680      	mov	r8, r0
  40163c:	f000 ff06 	bl	40244c <__malloc_lock>
  401640:	f855 7c04 	ldr.w	r7, [r5, #-4]
  401644:	4969      	ldr	r1, [pc, #420]	; (4017ec <_free_r+0x1bc>)
  401646:	f027 0301 	bic.w	r3, r7, #1
  40164a:	f1a5 0408 	sub.w	r4, r5, #8
  40164e:	18e2      	adds	r2, r4, r3
  401650:	688e      	ldr	r6, [r1, #8]
  401652:	6850      	ldr	r0, [r2, #4]
  401654:	42b2      	cmp	r2, r6
  401656:	f020 0003 	bic.w	r0, r0, #3
  40165a:	d05e      	beq.n	40171a <_free_r+0xea>
  40165c:	07fe      	lsls	r6, r7, #31
  40165e:	6050      	str	r0, [r2, #4]
  401660:	d40b      	bmi.n	40167a <_free_r+0x4a>
  401662:	f855 7c08 	ldr.w	r7, [r5, #-8]
  401666:	1be4      	subs	r4, r4, r7
  401668:	f101 0e08 	add.w	lr, r1, #8
  40166c:	68a5      	ldr	r5, [r4, #8]
  40166e:	4575      	cmp	r5, lr
  401670:	443b      	add	r3, r7
  401672:	d06d      	beq.n	401750 <_free_r+0x120>
  401674:	68e7      	ldr	r7, [r4, #12]
  401676:	60ef      	str	r7, [r5, #12]
  401678:	60bd      	str	r5, [r7, #8]
  40167a:	1815      	adds	r5, r2, r0
  40167c:	686d      	ldr	r5, [r5, #4]
  40167e:	07ed      	lsls	r5, r5, #31
  401680:	d53e      	bpl.n	401700 <_free_r+0xd0>
  401682:	f043 0201 	orr.w	r2, r3, #1
  401686:	6062      	str	r2, [r4, #4]
  401688:	50e3      	str	r3, [r4, r3]
  40168a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40168e:	d217      	bcs.n	4016c0 <_free_r+0x90>
  401690:	08db      	lsrs	r3, r3, #3
  401692:	1c58      	adds	r0, r3, #1
  401694:	109a      	asrs	r2, r3, #2
  401696:	684d      	ldr	r5, [r1, #4]
  401698:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40169c:	60a7      	str	r7, [r4, #8]
  40169e:	2301      	movs	r3, #1
  4016a0:	4093      	lsls	r3, r2
  4016a2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4016a6:	432b      	orrs	r3, r5
  4016a8:	3a08      	subs	r2, #8
  4016aa:	60e2      	str	r2, [r4, #12]
  4016ac:	604b      	str	r3, [r1, #4]
  4016ae:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4016b2:	60fc      	str	r4, [r7, #12]
  4016b4:	4640      	mov	r0, r8
  4016b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4016ba:	f000 becd 	b.w	402458 <__malloc_unlock>
  4016be:	4770      	bx	lr
  4016c0:	0a5a      	lsrs	r2, r3, #9
  4016c2:	2a04      	cmp	r2, #4
  4016c4:	d852      	bhi.n	40176c <_free_r+0x13c>
  4016c6:	099a      	lsrs	r2, r3, #6
  4016c8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4016cc:	00ff      	lsls	r7, r7, #3
  4016ce:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4016d2:	19c8      	adds	r0, r1, r7
  4016d4:	59ca      	ldr	r2, [r1, r7]
  4016d6:	3808      	subs	r0, #8
  4016d8:	4290      	cmp	r0, r2
  4016da:	d04f      	beq.n	40177c <_free_r+0x14c>
  4016dc:	6851      	ldr	r1, [r2, #4]
  4016de:	f021 0103 	bic.w	r1, r1, #3
  4016e2:	428b      	cmp	r3, r1
  4016e4:	d232      	bcs.n	40174c <_free_r+0x11c>
  4016e6:	6892      	ldr	r2, [r2, #8]
  4016e8:	4290      	cmp	r0, r2
  4016ea:	d1f7      	bne.n	4016dc <_free_r+0xac>
  4016ec:	68c3      	ldr	r3, [r0, #12]
  4016ee:	60a0      	str	r0, [r4, #8]
  4016f0:	60e3      	str	r3, [r4, #12]
  4016f2:	609c      	str	r4, [r3, #8]
  4016f4:	60c4      	str	r4, [r0, #12]
  4016f6:	4640      	mov	r0, r8
  4016f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4016fc:	f000 beac 	b.w	402458 <__malloc_unlock>
  401700:	6895      	ldr	r5, [r2, #8]
  401702:	4f3b      	ldr	r7, [pc, #236]	; (4017f0 <_free_r+0x1c0>)
  401704:	42bd      	cmp	r5, r7
  401706:	4403      	add	r3, r0
  401708:	d040      	beq.n	40178c <_free_r+0x15c>
  40170a:	68d0      	ldr	r0, [r2, #12]
  40170c:	60e8      	str	r0, [r5, #12]
  40170e:	f043 0201 	orr.w	r2, r3, #1
  401712:	6085      	str	r5, [r0, #8]
  401714:	6062      	str	r2, [r4, #4]
  401716:	50e3      	str	r3, [r4, r3]
  401718:	e7b7      	b.n	40168a <_free_r+0x5a>
  40171a:	07ff      	lsls	r7, r7, #31
  40171c:	4403      	add	r3, r0
  40171e:	d407      	bmi.n	401730 <_free_r+0x100>
  401720:	f855 2c08 	ldr.w	r2, [r5, #-8]
  401724:	1aa4      	subs	r4, r4, r2
  401726:	4413      	add	r3, r2
  401728:	68a0      	ldr	r0, [r4, #8]
  40172a:	68e2      	ldr	r2, [r4, #12]
  40172c:	60c2      	str	r2, [r0, #12]
  40172e:	6090      	str	r0, [r2, #8]
  401730:	4a30      	ldr	r2, [pc, #192]	; (4017f4 <_free_r+0x1c4>)
  401732:	6812      	ldr	r2, [r2, #0]
  401734:	f043 0001 	orr.w	r0, r3, #1
  401738:	4293      	cmp	r3, r2
  40173a:	6060      	str	r0, [r4, #4]
  40173c:	608c      	str	r4, [r1, #8]
  40173e:	d3b9      	bcc.n	4016b4 <_free_r+0x84>
  401740:	4b2d      	ldr	r3, [pc, #180]	; (4017f8 <_free_r+0x1c8>)
  401742:	4640      	mov	r0, r8
  401744:	6819      	ldr	r1, [r3, #0]
  401746:	f7ff ff23 	bl	401590 <_malloc_trim_r>
  40174a:	e7b3      	b.n	4016b4 <_free_r+0x84>
  40174c:	4610      	mov	r0, r2
  40174e:	e7cd      	b.n	4016ec <_free_r+0xbc>
  401750:	1811      	adds	r1, r2, r0
  401752:	6849      	ldr	r1, [r1, #4]
  401754:	07c9      	lsls	r1, r1, #31
  401756:	d444      	bmi.n	4017e2 <_free_r+0x1b2>
  401758:	6891      	ldr	r1, [r2, #8]
  40175a:	68d2      	ldr	r2, [r2, #12]
  40175c:	60ca      	str	r2, [r1, #12]
  40175e:	4403      	add	r3, r0
  401760:	f043 0001 	orr.w	r0, r3, #1
  401764:	6091      	str	r1, [r2, #8]
  401766:	6060      	str	r0, [r4, #4]
  401768:	50e3      	str	r3, [r4, r3]
  40176a:	e7a3      	b.n	4016b4 <_free_r+0x84>
  40176c:	2a14      	cmp	r2, #20
  40176e:	d816      	bhi.n	40179e <_free_r+0x16e>
  401770:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  401774:	00ff      	lsls	r7, r7, #3
  401776:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40177a:	e7aa      	b.n	4016d2 <_free_r+0xa2>
  40177c:	10aa      	asrs	r2, r5, #2
  40177e:	2301      	movs	r3, #1
  401780:	684d      	ldr	r5, [r1, #4]
  401782:	4093      	lsls	r3, r2
  401784:	432b      	orrs	r3, r5
  401786:	604b      	str	r3, [r1, #4]
  401788:	4603      	mov	r3, r0
  40178a:	e7b0      	b.n	4016ee <_free_r+0xbe>
  40178c:	f043 0201 	orr.w	r2, r3, #1
  401790:	614c      	str	r4, [r1, #20]
  401792:	610c      	str	r4, [r1, #16]
  401794:	60e5      	str	r5, [r4, #12]
  401796:	60a5      	str	r5, [r4, #8]
  401798:	6062      	str	r2, [r4, #4]
  40179a:	50e3      	str	r3, [r4, r3]
  40179c:	e78a      	b.n	4016b4 <_free_r+0x84>
  40179e:	2a54      	cmp	r2, #84	; 0x54
  4017a0:	d806      	bhi.n	4017b0 <_free_r+0x180>
  4017a2:	0b1a      	lsrs	r2, r3, #12
  4017a4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4017a8:	00ff      	lsls	r7, r7, #3
  4017aa:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4017ae:	e790      	b.n	4016d2 <_free_r+0xa2>
  4017b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4017b4:	d806      	bhi.n	4017c4 <_free_r+0x194>
  4017b6:	0bda      	lsrs	r2, r3, #15
  4017b8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4017bc:	00ff      	lsls	r7, r7, #3
  4017be:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4017c2:	e786      	b.n	4016d2 <_free_r+0xa2>
  4017c4:	f240 5054 	movw	r0, #1364	; 0x554
  4017c8:	4282      	cmp	r2, r0
  4017ca:	d806      	bhi.n	4017da <_free_r+0x1aa>
  4017cc:	0c9a      	lsrs	r2, r3, #18
  4017ce:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4017d2:	00ff      	lsls	r7, r7, #3
  4017d4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4017d8:	e77b      	b.n	4016d2 <_free_r+0xa2>
  4017da:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4017de:	257e      	movs	r5, #126	; 0x7e
  4017e0:	e777      	b.n	4016d2 <_free_r+0xa2>
  4017e2:	f043 0101 	orr.w	r1, r3, #1
  4017e6:	6061      	str	r1, [r4, #4]
  4017e8:	6013      	str	r3, [r2, #0]
  4017ea:	e763      	b.n	4016b4 <_free_r+0x84>
  4017ec:	20000454 	.word	0x20000454
  4017f0:	2000045c 	.word	0x2000045c
  4017f4:	20000860 	.word	0x20000860
  4017f8:	20000928 	.word	0x20000928

004017fc <__sfvwrite_r>:
  4017fc:	6893      	ldr	r3, [r2, #8]
  4017fe:	2b00      	cmp	r3, #0
  401800:	d073      	beq.n	4018ea <__sfvwrite_r+0xee>
  401802:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401806:	898b      	ldrh	r3, [r1, #12]
  401808:	b083      	sub	sp, #12
  40180a:	460c      	mov	r4, r1
  40180c:	0719      	lsls	r1, r3, #28
  40180e:	9000      	str	r0, [sp, #0]
  401810:	4616      	mov	r6, r2
  401812:	d526      	bpl.n	401862 <__sfvwrite_r+0x66>
  401814:	6922      	ldr	r2, [r4, #16]
  401816:	b322      	cbz	r2, 401862 <__sfvwrite_r+0x66>
  401818:	f013 0002 	ands.w	r0, r3, #2
  40181c:	6835      	ldr	r5, [r6, #0]
  40181e:	d02c      	beq.n	40187a <__sfvwrite_r+0x7e>
  401820:	f04f 0900 	mov.w	r9, #0
  401824:	4fb0      	ldr	r7, [pc, #704]	; (401ae8 <__sfvwrite_r+0x2ec>)
  401826:	46c8      	mov	r8, r9
  401828:	46b2      	mov	sl, r6
  40182a:	45b8      	cmp	r8, r7
  40182c:	4643      	mov	r3, r8
  40182e:	464a      	mov	r2, r9
  401830:	bf28      	it	cs
  401832:	463b      	movcs	r3, r7
  401834:	9800      	ldr	r0, [sp, #0]
  401836:	f1b8 0f00 	cmp.w	r8, #0
  40183a:	d050      	beq.n	4018de <__sfvwrite_r+0xe2>
  40183c:	69e1      	ldr	r1, [r4, #28]
  40183e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  401840:	47b0      	blx	r6
  401842:	2800      	cmp	r0, #0
  401844:	dd58      	ble.n	4018f8 <__sfvwrite_r+0xfc>
  401846:	f8da 3008 	ldr.w	r3, [sl, #8]
  40184a:	1a1b      	subs	r3, r3, r0
  40184c:	4481      	add	r9, r0
  40184e:	eba8 0800 	sub.w	r8, r8, r0
  401852:	f8ca 3008 	str.w	r3, [sl, #8]
  401856:	2b00      	cmp	r3, #0
  401858:	d1e7      	bne.n	40182a <__sfvwrite_r+0x2e>
  40185a:	2000      	movs	r0, #0
  40185c:	b003      	add	sp, #12
  40185e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401862:	4621      	mov	r1, r4
  401864:	9800      	ldr	r0, [sp, #0]
  401866:	f001 f80f 	bl	402888 <__swsetup_r>
  40186a:	2800      	cmp	r0, #0
  40186c:	f040 8133 	bne.w	401ad6 <__sfvwrite_r+0x2da>
  401870:	89a3      	ldrh	r3, [r4, #12]
  401872:	6835      	ldr	r5, [r6, #0]
  401874:	f013 0002 	ands.w	r0, r3, #2
  401878:	d1d2      	bne.n	401820 <__sfvwrite_r+0x24>
  40187a:	f013 0901 	ands.w	r9, r3, #1
  40187e:	d145      	bne.n	40190c <__sfvwrite_r+0x110>
  401880:	464f      	mov	r7, r9
  401882:	9601      	str	r6, [sp, #4]
  401884:	b337      	cbz	r7, 4018d4 <__sfvwrite_r+0xd8>
  401886:	059a      	lsls	r2, r3, #22
  401888:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40188c:	f140 8083 	bpl.w	401996 <__sfvwrite_r+0x19a>
  401890:	4547      	cmp	r7, r8
  401892:	46c3      	mov	fp, r8
  401894:	f0c0 80ab 	bcc.w	4019ee <__sfvwrite_r+0x1f2>
  401898:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40189c:	f040 80ac 	bne.w	4019f8 <__sfvwrite_r+0x1fc>
  4018a0:	6820      	ldr	r0, [r4, #0]
  4018a2:	46ba      	mov	sl, r7
  4018a4:	465a      	mov	r2, fp
  4018a6:	4649      	mov	r1, r9
  4018a8:	f000 fd6c 	bl	402384 <memmove>
  4018ac:	68a2      	ldr	r2, [r4, #8]
  4018ae:	6823      	ldr	r3, [r4, #0]
  4018b0:	eba2 0208 	sub.w	r2, r2, r8
  4018b4:	445b      	add	r3, fp
  4018b6:	60a2      	str	r2, [r4, #8]
  4018b8:	6023      	str	r3, [r4, #0]
  4018ba:	9a01      	ldr	r2, [sp, #4]
  4018bc:	6893      	ldr	r3, [r2, #8]
  4018be:	eba3 030a 	sub.w	r3, r3, sl
  4018c2:	44d1      	add	r9, sl
  4018c4:	eba7 070a 	sub.w	r7, r7, sl
  4018c8:	6093      	str	r3, [r2, #8]
  4018ca:	2b00      	cmp	r3, #0
  4018cc:	d0c5      	beq.n	40185a <__sfvwrite_r+0x5e>
  4018ce:	89a3      	ldrh	r3, [r4, #12]
  4018d0:	2f00      	cmp	r7, #0
  4018d2:	d1d8      	bne.n	401886 <__sfvwrite_r+0x8a>
  4018d4:	f8d5 9000 	ldr.w	r9, [r5]
  4018d8:	686f      	ldr	r7, [r5, #4]
  4018da:	3508      	adds	r5, #8
  4018dc:	e7d2      	b.n	401884 <__sfvwrite_r+0x88>
  4018de:	f8d5 9000 	ldr.w	r9, [r5]
  4018e2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4018e6:	3508      	adds	r5, #8
  4018e8:	e79f      	b.n	40182a <__sfvwrite_r+0x2e>
  4018ea:	2000      	movs	r0, #0
  4018ec:	4770      	bx	lr
  4018ee:	4621      	mov	r1, r4
  4018f0:	9800      	ldr	r0, [sp, #0]
  4018f2:	f7ff fda3 	bl	40143c <_fflush_r>
  4018f6:	b370      	cbz	r0, 401956 <__sfvwrite_r+0x15a>
  4018f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4018fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401900:	f04f 30ff 	mov.w	r0, #4294967295
  401904:	81a3      	strh	r3, [r4, #12]
  401906:	b003      	add	sp, #12
  401908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40190c:	4681      	mov	r9, r0
  40190e:	4633      	mov	r3, r6
  401910:	464e      	mov	r6, r9
  401912:	46a8      	mov	r8, r5
  401914:	469a      	mov	sl, r3
  401916:	464d      	mov	r5, r9
  401918:	b34e      	cbz	r6, 40196e <__sfvwrite_r+0x172>
  40191a:	b380      	cbz	r0, 40197e <__sfvwrite_r+0x182>
  40191c:	6820      	ldr	r0, [r4, #0]
  40191e:	6923      	ldr	r3, [r4, #16]
  401920:	6962      	ldr	r2, [r4, #20]
  401922:	45b1      	cmp	r9, r6
  401924:	46cb      	mov	fp, r9
  401926:	bf28      	it	cs
  401928:	46b3      	movcs	fp, r6
  40192a:	4298      	cmp	r0, r3
  40192c:	465f      	mov	r7, fp
  40192e:	d904      	bls.n	40193a <__sfvwrite_r+0x13e>
  401930:	68a3      	ldr	r3, [r4, #8]
  401932:	4413      	add	r3, r2
  401934:	459b      	cmp	fp, r3
  401936:	f300 80a6 	bgt.w	401a86 <__sfvwrite_r+0x28a>
  40193a:	4593      	cmp	fp, r2
  40193c:	db4b      	blt.n	4019d6 <__sfvwrite_r+0x1da>
  40193e:	4613      	mov	r3, r2
  401940:	6a67      	ldr	r7, [r4, #36]	; 0x24
  401942:	69e1      	ldr	r1, [r4, #28]
  401944:	9800      	ldr	r0, [sp, #0]
  401946:	462a      	mov	r2, r5
  401948:	47b8      	blx	r7
  40194a:	1e07      	subs	r7, r0, #0
  40194c:	ddd4      	ble.n	4018f8 <__sfvwrite_r+0xfc>
  40194e:	ebb9 0907 	subs.w	r9, r9, r7
  401952:	d0cc      	beq.n	4018ee <__sfvwrite_r+0xf2>
  401954:	2001      	movs	r0, #1
  401956:	f8da 3008 	ldr.w	r3, [sl, #8]
  40195a:	1bdb      	subs	r3, r3, r7
  40195c:	443d      	add	r5, r7
  40195e:	1bf6      	subs	r6, r6, r7
  401960:	f8ca 3008 	str.w	r3, [sl, #8]
  401964:	2b00      	cmp	r3, #0
  401966:	f43f af78 	beq.w	40185a <__sfvwrite_r+0x5e>
  40196a:	2e00      	cmp	r6, #0
  40196c:	d1d5      	bne.n	40191a <__sfvwrite_r+0x11e>
  40196e:	f108 0308 	add.w	r3, r8, #8
  401972:	e913 0060 	ldmdb	r3, {r5, r6}
  401976:	4698      	mov	r8, r3
  401978:	3308      	adds	r3, #8
  40197a:	2e00      	cmp	r6, #0
  40197c:	d0f9      	beq.n	401972 <__sfvwrite_r+0x176>
  40197e:	4632      	mov	r2, r6
  401980:	210a      	movs	r1, #10
  401982:	4628      	mov	r0, r5
  401984:	f000 fc14 	bl	4021b0 <memchr>
  401988:	2800      	cmp	r0, #0
  40198a:	f000 80a1 	beq.w	401ad0 <__sfvwrite_r+0x2d4>
  40198e:	3001      	adds	r0, #1
  401990:	eba0 0905 	sub.w	r9, r0, r5
  401994:	e7c2      	b.n	40191c <__sfvwrite_r+0x120>
  401996:	6820      	ldr	r0, [r4, #0]
  401998:	6923      	ldr	r3, [r4, #16]
  40199a:	4298      	cmp	r0, r3
  40199c:	d802      	bhi.n	4019a4 <__sfvwrite_r+0x1a8>
  40199e:	6963      	ldr	r3, [r4, #20]
  4019a0:	429f      	cmp	r7, r3
  4019a2:	d25d      	bcs.n	401a60 <__sfvwrite_r+0x264>
  4019a4:	45b8      	cmp	r8, r7
  4019a6:	bf28      	it	cs
  4019a8:	46b8      	movcs	r8, r7
  4019aa:	4642      	mov	r2, r8
  4019ac:	4649      	mov	r1, r9
  4019ae:	f000 fce9 	bl	402384 <memmove>
  4019b2:	68a3      	ldr	r3, [r4, #8]
  4019b4:	6822      	ldr	r2, [r4, #0]
  4019b6:	eba3 0308 	sub.w	r3, r3, r8
  4019ba:	4442      	add	r2, r8
  4019bc:	60a3      	str	r3, [r4, #8]
  4019be:	6022      	str	r2, [r4, #0]
  4019c0:	b10b      	cbz	r3, 4019c6 <__sfvwrite_r+0x1ca>
  4019c2:	46c2      	mov	sl, r8
  4019c4:	e779      	b.n	4018ba <__sfvwrite_r+0xbe>
  4019c6:	4621      	mov	r1, r4
  4019c8:	9800      	ldr	r0, [sp, #0]
  4019ca:	f7ff fd37 	bl	40143c <_fflush_r>
  4019ce:	2800      	cmp	r0, #0
  4019d0:	d192      	bne.n	4018f8 <__sfvwrite_r+0xfc>
  4019d2:	46c2      	mov	sl, r8
  4019d4:	e771      	b.n	4018ba <__sfvwrite_r+0xbe>
  4019d6:	465a      	mov	r2, fp
  4019d8:	4629      	mov	r1, r5
  4019da:	f000 fcd3 	bl	402384 <memmove>
  4019de:	68a2      	ldr	r2, [r4, #8]
  4019e0:	6823      	ldr	r3, [r4, #0]
  4019e2:	eba2 020b 	sub.w	r2, r2, fp
  4019e6:	445b      	add	r3, fp
  4019e8:	60a2      	str	r2, [r4, #8]
  4019ea:	6023      	str	r3, [r4, #0]
  4019ec:	e7af      	b.n	40194e <__sfvwrite_r+0x152>
  4019ee:	6820      	ldr	r0, [r4, #0]
  4019f0:	46b8      	mov	r8, r7
  4019f2:	46ba      	mov	sl, r7
  4019f4:	46bb      	mov	fp, r7
  4019f6:	e755      	b.n	4018a4 <__sfvwrite_r+0xa8>
  4019f8:	6962      	ldr	r2, [r4, #20]
  4019fa:	6820      	ldr	r0, [r4, #0]
  4019fc:	6921      	ldr	r1, [r4, #16]
  4019fe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  401a02:	eba0 0a01 	sub.w	sl, r0, r1
  401a06:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  401a0a:	f10a 0001 	add.w	r0, sl, #1
  401a0e:	ea4f 0868 	mov.w	r8, r8, asr #1
  401a12:	4438      	add	r0, r7
  401a14:	4540      	cmp	r0, r8
  401a16:	4642      	mov	r2, r8
  401a18:	bf84      	itt	hi
  401a1a:	4680      	movhi	r8, r0
  401a1c:	4642      	movhi	r2, r8
  401a1e:	055b      	lsls	r3, r3, #21
  401a20:	d544      	bpl.n	401aac <__sfvwrite_r+0x2b0>
  401a22:	4611      	mov	r1, r2
  401a24:	9800      	ldr	r0, [sp, #0]
  401a26:	f000 f913 	bl	401c50 <_malloc_r>
  401a2a:	4683      	mov	fp, r0
  401a2c:	2800      	cmp	r0, #0
  401a2e:	d055      	beq.n	401adc <__sfvwrite_r+0x2e0>
  401a30:	4652      	mov	r2, sl
  401a32:	6921      	ldr	r1, [r4, #16]
  401a34:	f000 fc0c 	bl	402250 <memcpy>
  401a38:	89a3      	ldrh	r3, [r4, #12]
  401a3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  401a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401a42:	81a3      	strh	r3, [r4, #12]
  401a44:	eb0b 000a 	add.w	r0, fp, sl
  401a48:	eba8 030a 	sub.w	r3, r8, sl
  401a4c:	f8c4 b010 	str.w	fp, [r4, #16]
  401a50:	f8c4 8014 	str.w	r8, [r4, #20]
  401a54:	6020      	str	r0, [r4, #0]
  401a56:	60a3      	str	r3, [r4, #8]
  401a58:	46b8      	mov	r8, r7
  401a5a:	46ba      	mov	sl, r7
  401a5c:	46bb      	mov	fp, r7
  401a5e:	e721      	b.n	4018a4 <__sfvwrite_r+0xa8>
  401a60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  401a64:	42b9      	cmp	r1, r7
  401a66:	bf28      	it	cs
  401a68:	4639      	movcs	r1, r7
  401a6a:	464a      	mov	r2, r9
  401a6c:	fb91 f1f3 	sdiv	r1, r1, r3
  401a70:	9800      	ldr	r0, [sp, #0]
  401a72:	6a66      	ldr	r6, [r4, #36]	; 0x24
  401a74:	fb03 f301 	mul.w	r3, r3, r1
  401a78:	69e1      	ldr	r1, [r4, #28]
  401a7a:	47b0      	blx	r6
  401a7c:	f1b0 0a00 	subs.w	sl, r0, #0
  401a80:	f73f af1b 	bgt.w	4018ba <__sfvwrite_r+0xbe>
  401a84:	e738      	b.n	4018f8 <__sfvwrite_r+0xfc>
  401a86:	461a      	mov	r2, r3
  401a88:	4629      	mov	r1, r5
  401a8a:	9301      	str	r3, [sp, #4]
  401a8c:	f000 fc7a 	bl	402384 <memmove>
  401a90:	6822      	ldr	r2, [r4, #0]
  401a92:	9b01      	ldr	r3, [sp, #4]
  401a94:	9800      	ldr	r0, [sp, #0]
  401a96:	441a      	add	r2, r3
  401a98:	6022      	str	r2, [r4, #0]
  401a9a:	4621      	mov	r1, r4
  401a9c:	f7ff fcce 	bl	40143c <_fflush_r>
  401aa0:	9b01      	ldr	r3, [sp, #4]
  401aa2:	2800      	cmp	r0, #0
  401aa4:	f47f af28 	bne.w	4018f8 <__sfvwrite_r+0xfc>
  401aa8:	461f      	mov	r7, r3
  401aaa:	e750      	b.n	40194e <__sfvwrite_r+0x152>
  401aac:	9800      	ldr	r0, [sp, #0]
  401aae:	f000 fcd9 	bl	402464 <_realloc_r>
  401ab2:	4683      	mov	fp, r0
  401ab4:	2800      	cmp	r0, #0
  401ab6:	d1c5      	bne.n	401a44 <__sfvwrite_r+0x248>
  401ab8:	9d00      	ldr	r5, [sp, #0]
  401aba:	6921      	ldr	r1, [r4, #16]
  401abc:	4628      	mov	r0, r5
  401abe:	f7ff fdb7 	bl	401630 <_free_r>
  401ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401ac6:	220c      	movs	r2, #12
  401ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401acc:	602a      	str	r2, [r5, #0]
  401ace:	e715      	b.n	4018fc <__sfvwrite_r+0x100>
  401ad0:	f106 0901 	add.w	r9, r6, #1
  401ad4:	e722      	b.n	40191c <__sfvwrite_r+0x120>
  401ad6:	f04f 30ff 	mov.w	r0, #4294967295
  401ada:	e6bf      	b.n	40185c <__sfvwrite_r+0x60>
  401adc:	9a00      	ldr	r2, [sp, #0]
  401ade:	230c      	movs	r3, #12
  401ae0:	6013      	str	r3, [r2, #0]
  401ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401ae6:	e709      	b.n	4018fc <__sfvwrite_r+0x100>
  401ae8:	7ffffc00 	.word	0x7ffffc00

00401aec <_fwalk_reent>:
  401aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401af0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401af4:	d01f      	beq.n	401b36 <_fwalk_reent+0x4a>
  401af6:	4688      	mov	r8, r1
  401af8:	4606      	mov	r6, r0
  401afa:	f04f 0900 	mov.w	r9, #0
  401afe:	687d      	ldr	r5, [r7, #4]
  401b00:	68bc      	ldr	r4, [r7, #8]
  401b02:	3d01      	subs	r5, #1
  401b04:	d411      	bmi.n	401b2a <_fwalk_reent+0x3e>
  401b06:	89a3      	ldrh	r3, [r4, #12]
  401b08:	2b01      	cmp	r3, #1
  401b0a:	f105 35ff 	add.w	r5, r5, #4294967295
  401b0e:	d908      	bls.n	401b22 <_fwalk_reent+0x36>
  401b10:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401b14:	3301      	adds	r3, #1
  401b16:	4621      	mov	r1, r4
  401b18:	4630      	mov	r0, r6
  401b1a:	d002      	beq.n	401b22 <_fwalk_reent+0x36>
  401b1c:	47c0      	blx	r8
  401b1e:	ea49 0900 	orr.w	r9, r9, r0
  401b22:	1c6b      	adds	r3, r5, #1
  401b24:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401b28:	d1ed      	bne.n	401b06 <_fwalk_reent+0x1a>
  401b2a:	683f      	ldr	r7, [r7, #0]
  401b2c:	2f00      	cmp	r7, #0
  401b2e:	d1e6      	bne.n	401afe <_fwalk_reent+0x12>
  401b30:	4648      	mov	r0, r9
  401b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401b36:	46b9      	mov	r9, r7
  401b38:	4648      	mov	r0, r9
  401b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401b3e:	bf00      	nop

00401b40 <__retarget_lock_init_recursive>:
  401b40:	4770      	bx	lr
  401b42:	bf00      	nop

00401b44 <__retarget_lock_close_recursive>:
  401b44:	4770      	bx	lr
  401b46:	bf00      	nop

00401b48 <__retarget_lock_acquire_recursive>:
  401b48:	4770      	bx	lr
  401b4a:	bf00      	nop

00401b4c <__retarget_lock_release_recursive>:
  401b4c:	4770      	bx	lr
  401b4e:	bf00      	nop

00401b50 <__swhatbuf_r>:
  401b50:	b570      	push	{r4, r5, r6, lr}
  401b52:	460c      	mov	r4, r1
  401b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401b58:	2900      	cmp	r1, #0
  401b5a:	b090      	sub	sp, #64	; 0x40
  401b5c:	4615      	mov	r5, r2
  401b5e:	461e      	mov	r6, r3
  401b60:	db14      	blt.n	401b8c <__swhatbuf_r+0x3c>
  401b62:	aa01      	add	r2, sp, #4
  401b64:	f000 ffca 	bl	402afc <_fstat_r>
  401b68:	2800      	cmp	r0, #0
  401b6a:	db0f      	blt.n	401b8c <__swhatbuf_r+0x3c>
  401b6c:	9a02      	ldr	r2, [sp, #8]
  401b6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401b72:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  401b76:	fab2 f282 	clz	r2, r2
  401b7a:	0952      	lsrs	r2, r2, #5
  401b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401b80:	f44f 6000 	mov.w	r0, #2048	; 0x800
  401b84:	6032      	str	r2, [r6, #0]
  401b86:	602b      	str	r3, [r5, #0]
  401b88:	b010      	add	sp, #64	; 0x40
  401b8a:	bd70      	pop	{r4, r5, r6, pc}
  401b8c:	89a2      	ldrh	r2, [r4, #12]
  401b8e:	2300      	movs	r3, #0
  401b90:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  401b94:	6033      	str	r3, [r6, #0]
  401b96:	d004      	beq.n	401ba2 <__swhatbuf_r+0x52>
  401b98:	2240      	movs	r2, #64	; 0x40
  401b9a:	4618      	mov	r0, r3
  401b9c:	602a      	str	r2, [r5, #0]
  401b9e:	b010      	add	sp, #64	; 0x40
  401ba0:	bd70      	pop	{r4, r5, r6, pc}
  401ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401ba6:	602b      	str	r3, [r5, #0]
  401ba8:	b010      	add	sp, #64	; 0x40
  401baa:	bd70      	pop	{r4, r5, r6, pc}

00401bac <__smakebuf_r>:
  401bac:	898a      	ldrh	r2, [r1, #12]
  401bae:	0792      	lsls	r2, r2, #30
  401bb0:	460b      	mov	r3, r1
  401bb2:	d506      	bpl.n	401bc2 <__smakebuf_r+0x16>
  401bb4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  401bb8:	2101      	movs	r1, #1
  401bba:	601a      	str	r2, [r3, #0]
  401bbc:	611a      	str	r2, [r3, #16]
  401bbe:	6159      	str	r1, [r3, #20]
  401bc0:	4770      	bx	lr
  401bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
  401bc4:	b083      	sub	sp, #12
  401bc6:	ab01      	add	r3, sp, #4
  401bc8:	466a      	mov	r2, sp
  401bca:	460c      	mov	r4, r1
  401bcc:	4606      	mov	r6, r0
  401bce:	f7ff ffbf 	bl	401b50 <__swhatbuf_r>
  401bd2:	9900      	ldr	r1, [sp, #0]
  401bd4:	4605      	mov	r5, r0
  401bd6:	4630      	mov	r0, r6
  401bd8:	f000 f83a 	bl	401c50 <_malloc_r>
  401bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401be0:	b1d8      	cbz	r0, 401c1a <__smakebuf_r+0x6e>
  401be2:	9a01      	ldr	r2, [sp, #4]
  401be4:	4f15      	ldr	r7, [pc, #84]	; (401c3c <__smakebuf_r+0x90>)
  401be6:	9900      	ldr	r1, [sp, #0]
  401be8:	63f7      	str	r7, [r6, #60]	; 0x3c
  401bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401bee:	81a3      	strh	r3, [r4, #12]
  401bf0:	6020      	str	r0, [r4, #0]
  401bf2:	6120      	str	r0, [r4, #16]
  401bf4:	6161      	str	r1, [r4, #20]
  401bf6:	b91a      	cbnz	r2, 401c00 <__smakebuf_r+0x54>
  401bf8:	432b      	orrs	r3, r5
  401bfa:	81a3      	strh	r3, [r4, #12]
  401bfc:	b003      	add	sp, #12
  401bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401c00:	4630      	mov	r0, r6
  401c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401c06:	f000 ff8d 	bl	402b24 <_isatty_r>
  401c0a:	b1a0      	cbz	r0, 401c36 <__smakebuf_r+0x8a>
  401c0c:	89a3      	ldrh	r3, [r4, #12]
  401c0e:	f023 0303 	bic.w	r3, r3, #3
  401c12:	f043 0301 	orr.w	r3, r3, #1
  401c16:	b21b      	sxth	r3, r3
  401c18:	e7ee      	b.n	401bf8 <__smakebuf_r+0x4c>
  401c1a:	059a      	lsls	r2, r3, #22
  401c1c:	d4ee      	bmi.n	401bfc <__smakebuf_r+0x50>
  401c1e:	f023 0303 	bic.w	r3, r3, #3
  401c22:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401c26:	f043 0302 	orr.w	r3, r3, #2
  401c2a:	2101      	movs	r1, #1
  401c2c:	81a3      	strh	r3, [r4, #12]
  401c2e:	6022      	str	r2, [r4, #0]
  401c30:	6122      	str	r2, [r4, #16]
  401c32:	6161      	str	r1, [r4, #20]
  401c34:	e7e2      	b.n	401bfc <__smakebuf_r+0x50>
  401c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401c3a:	e7dd      	b.n	401bf8 <__smakebuf_r+0x4c>
  401c3c:	00401491 	.word	0x00401491

00401c40 <malloc>:
  401c40:	4b02      	ldr	r3, [pc, #8]	; (401c4c <malloc+0xc>)
  401c42:	4601      	mov	r1, r0
  401c44:	6818      	ldr	r0, [r3, #0]
  401c46:	f000 b803 	b.w	401c50 <_malloc_r>
  401c4a:	bf00      	nop
  401c4c:	20000020 	.word	0x20000020

00401c50 <_malloc_r>:
  401c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c54:	f101 060b 	add.w	r6, r1, #11
  401c58:	2e16      	cmp	r6, #22
  401c5a:	b083      	sub	sp, #12
  401c5c:	4605      	mov	r5, r0
  401c5e:	f240 809e 	bls.w	401d9e <_malloc_r+0x14e>
  401c62:	f036 0607 	bics.w	r6, r6, #7
  401c66:	f100 80bd 	bmi.w	401de4 <_malloc_r+0x194>
  401c6a:	42b1      	cmp	r1, r6
  401c6c:	f200 80ba 	bhi.w	401de4 <_malloc_r+0x194>
  401c70:	f000 fbec 	bl	40244c <__malloc_lock>
  401c74:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  401c78:	f0c0 8293 	bcc.w	4021a2 <_malloc_r+0x552>
  401c7c:	0a73      	lsrs	r3, r6, #9
  401c7e:	f000 80b8 	beq.w	401df2 <_malloc_r+0x1a2>
  401c82:	2b04      	cmp	r3, #4
  401c84:	f200 8179 	bhi.w	401f7a <_malloc_r+0x32a>
  401c88:	09b3      	lsrs	r3, r6, #6
  401c8a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  401c8e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  401c92:	00c3      	lsls	r3, r0, #3
  401c94:	4fbf      	ldr	r7, [pc, #764]	; (401f94 <_malloc_r+0x344>)
  401c96:	443b      	add	r3, r7
  401c98:	f1a3 0108 	sub.w	r1, r3, #8
  401c9c:	685c      	ldr	r4, [r3, #4]
  401c9e:	42a1      	cmp	r1, r4
  401ca0:	d106      	bne.n	401cb0 <_malloc_r+0x60>
  401ca2:	e00c      	b.n	401cbe <_malloc_r+0x6e>
  401ca4:	2a00      	cmp	r2, #0
  401ca6:	f280 80aa 	bge.w	401dfe <_malloc_r+0x1ae>
  401caa:	68e4      	ldr	r4, [r4, #12]
  401cac:	42a1      	cmp	r1, r4
  401cae:	d006      	beq.n	401cbe <_malloc_r+0x6e>
  401cb0:	6863      	ldr	r3, [r4, #4]
  401cb2:	f023 0303 	bic.w	r3, r3, #3
  401cb6:	1b9a      	subs	r2, r3, r6
  401cb8:	2a0f      	cmp	r2, #15
  401cba:	ddf3      	ble.n	401ca4 <_malloc_r+0x54>
  401cbc:	4670      	mov	r0, lr
  401cbe:	693c      	ldr	r4, [r7, #16]
  401cc0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 401fa8 <_malloc_r+0x358>
  401cc4:	4574      	cmp	r4, lr
  401cc6:	f000 81ab 	beq.w	402020 <_malloc_r+0x3d0>
  401cca:	6863      	ldr	r3, [r4, #4]
  401ccc:	f023 0303 	bic.w	r3, r3, #3
  401cd0:	1b9a      	subs	r2, r3, r6
  401cd2:	2a0f      	cmp	r2, #15
  401cd4:	f300 8190 	bgt.w	401ff8 <_malloc_r+0x3a8>
  401cd8:	2a00      	cmp	r2, #0
  401cda:	f8c7 e014 	str.w	lr, [r7, #20]
  401cde:	f8c7 e010 	str.w	lr, [r7, #16]
  401ce2:	f280 809d 	bge.w	401e20 <_malloc_r+0x1d0>
  401ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401cea:	f080 8161 	bcs.w	401fb0 <_malloc_r+0x360>
  401cee:	08db      	lsrs	r3, r3, #3
  401cf0:	f103 0c01 	add.w	ip, r3, #1
  401cf4:	1099      	asrs	r1, r3, #2
  401cf6:	687a      	ldr	r2, [r7, #4]
  401cf8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  401cfc:	f8c4 8008 	str.w	r8, [r4, #8]
  401d00:	2301      	movs	r3, #1
  401d02:	408b      	lsls	r3, r1
  401d04:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  401d08:	4313      	orrs	r3, r2
  401d0a:	3908      	subs	r1, #8
  401d0c:	60e1      	str	r1, [r4, #12]
  401d0e:	607b      	str	r3, [r7, #4]
  401d10:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  401d14:	f8c8 400c 	str.w	r4, [r8, #12]
  401d18:	1082      	asrs	r2, r0, #2
  401d1a:	2401      	movs	r4, #1
  401d1c:	4094      	lsls	r4, r2
  401d1e:	429c      	cmp	r4, r3
  401d20:	f200 808b 	bhi.w	401e3a <_malloc_r+0x1ea>
  401d24:	421c      	tst	r4, r3
  401d26:	d106      	bne.n	401d36 <_malloc_r+0xe6>
  401d28:	f020 0003 	bic.w	r0, r0, #3
  401d2c:	0064      	lsls	r4, r4, #1
  401d2e:	421c      	tst	r4, r3
  401d30:	f100 0004 	add.w	r0, r0, #4
  401d34:	d0fa      	beq.n	401d2c <_malloc_r+0xdc>
  401d36:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  401d3a:	46cc      	mov	ip, r9
  401d3c:	4680      	mov	r8, r0
  401d3e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  401d42:	459c      	cmp	ip, r3
  401d44:	d107      	bne.n	401d56 <_malloc_r+0x106>
  401d46:	e16d      	b.n	402024 <_malloc_r+0x3d4>
  401d48:	2a00      	cmp	r2, #0
  401d4a:	f280 817b 	bge.w	402044 <_malloc_r+0x3f4>
  401d4e:	68db      	ldr	r3, [r3, #12]
  401d50:	459c      	cmp	ip, r3
  401d52:	f000 8167 	beq.w	402024 <_malloc_r+0x3d4>
  401d56:	6859      	ldr	r1, [r3, #4]
  401d58:	f021 0103 	bic.w	r1, r1, #3
  401d5c:	1b8a      	subs	r2, r1, r6
  401d5e:	2a0f      	cmp	r2, #15
  401d60:	ddf2      	ble.n	401d48 <_malloc_r+0xf8>
  401d62:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401d66:	f8d3 8008 	ldr.w	r8, [r3, #8]
  401d6a:	9300      	str	r3, [sp, #0]
  401d6c:	199c      	adds	r4, r3, r6
  401d6e:	4628      	mov	r0, r5
  401d70:	f046 0601 	orr.w	r6, r6, #1
  401d74:	f042 0501 	orr.w	r5, r2, #1
  401d78:	605e      	str	r6, [r3, #4]
  401d7a:	f8c8 c00c 	str.w	ip, [r8, #12]
  401d7e:	f8cc 8008 	str.w	r8, [ip, #8]
  401d82:	617c      	str	r4, [r7, #20]
  401d84:	613c      	str	r4, [r7, #16]
  401d86:	f8c4 e00c 	str.w	lr, [r4, #12]
  401d8a:	f8c4 e008 	str.w	lr, [r4, #8]
  401d8e:	6065      	str	r5, [r4, #4]
  401d90:	505a      	str	r2, [r3, r1]
  401d92:	f000 fb61 	bl	402458 <__malloc_unlock>
  401d96:	9b00      	ldr	r3, [sp, #0]
  401d98:	f103 0408 	add.w	r4, r3, #8
  401d9c:	e01e      	b.n	401ddc <_malloc_r+0x18c>
  401d9e:	2910      	cmp	r1, #16
  401da0:	d820      	bhi.n	401de4 <_malloc_r+0x194>
  401da2:	f000 fb53 	bl	40244c <__malloc_lock>
  401da6:	2610      	movs	r6, #16
  401da8:	2318      	movs	r3, #24
  401daa:	2002      	movs	r0, #2
  401dac:	4f79      	ldr	r7, [pc, #484]	; (401f94 <_malloc_r+0x344>)
  401dae:	443b      	add	r3, r7
  401db0:	f1a3 0208 	sub.w	r2, r3, #8
  401db4:	685c      	ldr	r4, [r3, #4]
  401db6:	4294      	cmp	r4, r2
  401db8:	f000 813d 	beq.w	402036 <_malloc_r+0x3e6>
  401dbc:	6863      	ldr	r3, [r4, #4]
  401dbe:	68e1      	ldr	r1, [r4, #12]
  401dc0:	68a6      	ldr	r6, [r4, #8]
  401dc2:	f023 0303 	bic.w	r3, r3, #3
  401dc6:	4423      	add	r3, r4
  401dc8:	4628      	mov	r0, r5
  401dca:	685a      	ldr	r2, [r3, #4]
  401dcc:	60f1      	str	r1, [r6, #12]
  401dce:	f042 0201 	orr.w	r2, r2, #1
  401dd2:	608e      	str	r6, [r1, #8]
  401dd4:	605a      	str	r2, [r3, #4]
  401dd6:	f000 fb3f 	bl	402458 <__malloc_unlock>
  401dda:	3408      	adds	r4, #8
  401ddc:	4620      	mov	r0, r4
  401dde:	b003      	add	sp, #12
  401de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401de4:	2400      	movs	r4, #0
  401de6:	230c      	movs	r3, #12
  401de8:	4620      	mov	r0, r4
  401dea:	602b      	str	r3, [r5, #0]
  401dec:	b003      	add	sp, #12
  401dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401df2:	2040      	movs	r0, #64	; 0x40
  401df4:	f44f 7300 	mov.w	r3, #512	; 0x200
  401df8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  401dfc:	e74a      	b.n	401c94 <_malloc_r+0x44>
  401dfe:	4423      	add	r3, r4
  401e00:	68e1      	ldr	r1, [r4, #12]
  401e02:	685a      	ldr	r2, [r3, #4]
  401e04:	68a6      	ldr	r6, [r4, #8]
  401e06:	f042 0201 	orr.w	r2, r2, #1
  401e0a:	60f1      	str	r1, [r6, #12]
  401e0c:	4628      	mov	r0, r5
  401e0e:	608e      	str	r6, [r1, #8]
  401e10:	605a      	str	r2, [r3, #4]
  401e12:	f000 fb21 	bl	402458 <__malloc_unlock>
  401e16:	3408      	adds	r4, #8
  401e18:	4620      	mov	r0, r4
  401e1a:	b003      	add	sp, #12
  401e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e20:	4423      	add	r3, r4
  401e22:	4628      	mov	r0, r5
  401e24:	685a      	ldr	r2, [r3, #4]
  401e26:	f042 0201 	orr.w	r2, r2, #1
  401e2a:	605a      	str	r2, [r3, #4]
  401e2c:	f000 fb14 	bl	402458 <__malloc_unlock>
  401e30:	3408      	adds	r4, #8
  401e32:	4620      	mov	r0, r4
  401e34:	b003      	add	sp, #12
  401e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e3a:	68bc      	ldr	r4, [r7, #8]
  401e3c:	6863      	ldr	r3, [r4, #4]
  401e3e:	f023 0803 	bic.w	r8, r3, #3
  401e42:	45b0      	cmp	r8, r6
  401e44:	d304      	bcc.n	401e50 <_malloc_r+0x200>
  401e46:	eba8 0306 	sub.w	r3, r8, r6
  401e4a:	2b0f      	cmp	r3, #15
  401e4c:	f300 8085 	bgt.w	401f5a <_malloc_r+0x30a>
  401e50:	f8df 9158 	ldr.w	r9, [pc, #344]	; 401fac <_malloc_r+0x35c>
  401e54:	4b50      	ldr	r3, [pc, #320]	; (401f98 <_malloc_r+0x348>)
  401e56:	f8d9 2000 	ldr.w	r2, [r9]
  401e5a:	681b      	ldr	r3, [r3, #0]
  401e5c:	3201      	adds	r2, #1
  401e5e:	4433      	add	r3, r6
  401e60:	eb04 0a08 	add.w	sl, r4, r8
  401e64:	f000 8155 	beq.w	402112 <_malloc_r+0x4c2>
  401e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  401e6c:	330f      	adds	r3, #15
  401e6e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  401e72:	f02b 0b0f 	bic.w	fp, fp, #15
  401e76:	4659      	mov	r1, fp
  401e78:	4628      	mov	r0, r5
  401e7a:	f000 fc99 	bl	4027b0 <_sbrk_r>
  401e7e:	1c41      	adds	r1, r0, #1
  401e80:	4602      	mov	r2, r0
  401e82:	f000 80fc 	beq.w	40207e <_malloc_r+0x42e>
  401e86:	4582      	cmp	sl, r0
  401e88:	f200 80f7 	bhi.w	40207a <_malloc_r+0x42a>
  401e8c:	4b43      	ldr	r3, [pc, #268]	; (401f9c <_malloc_r+0x34c>)
  401e8e:	6819      	ldr	r1, [r3, #0]
  401e90:	4459      	add	r1, fp
  401e92:	6019      	str	r1, [r3, #0]
  401e94:	f000 814d 	beq.w	402132 <_malloc_r+0x4e2>
  401e98:	f8d9 0000 	ldr.w	r0, [r9]
  401e9c:	3001      	adds	r0, #1
  401e9e:	bf1b      	ittet	ne
  401ea0:	eba2 0a0a 	subne.w	sl, r2, sl
  401ea4:	4451      	addne	r1, sl
  401ea6:	f8c9 2000 	streq.w	r2, [r9]
  401eaa:	6019      	strne	r1, [r3, #0]
  401eac:	f012 0107 	ands.w	r1, r2, #7
  401eb0:	f000 8115 	beq.w	4020de <_malloc_r+0x48e>
  401eb4:	f1c1 0008 	rsb	r0, r1, #8
  401eb8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  401ebc:	4402      	add	r2, r0
  401ebe:	3108      	adds	r1, #8
  401ec0:	eb02 090b 	add.w	r9, r2, fp
  401ec4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  401ec8:	eba1 0909 	sub.w	r9, r1, r9
  401ecc:	4649      	mov	r1, r9
  401ece:	4628      	mov	r0, r5
  401ed0:	9301      	str	r3, [sp, #4]
  401ed2:	9200      	str	r2, [sp, #0]
  401ed4:	f000 fc6c 	bl	4027b0 <_sbrk_r>
  401ed8:	1c43      	adds	r3, r0, #1
  401eda:	e89d 000c 	ldmia.w	sp, {r2, r3}
  401ede:	f000 8143 	beq.w	402168 <_malloc_r+0x518>
  401ee2:	1a80      	subs	r0, r0, r2
  401ee4:	4448      	add	r0, r9
  401ee6:	f040 0001 	orr.w	r0, r0, #1
  401eea:	6819      	ldr	r1, [r3, #0]
  401eec:	60ba      	str	r2, [r7, #8]
  401eee:	4449      	add	r1, r9
  401ef0:	42bc      	cmp	r4, r7
  401ef2:	6050      	str	r0, [r2, #4]
  401ef4:	6019      	str	r1, [r3, #0]
  401ef6:	d017      	beq.n	401f28 <_malloc_r+0x2d8>
  401ef8:	f1b8 0f0f 	cmp.w	r8, #15
  401efc:	f240 80fb 	bls.w	4020f6 <_malloc_r+0x4a6>
  401f00:	6860      	ldr	r0, [r4, #4]
  401f02:	f1a8 020c 	sub.w	r2, r8, #12
  401f06:	f022 0207 	bic.w	r2, r2, #7
  401f0a:	eb04 0e02 	add.w	lr, r4, r2
  401f0e:	f000 0001 	and.w	r0, r0, #1
  401f12:	f04f 0c05 	mov.w	ip, #5
  401f16:	4310      	orrs	r0, r2
  401f18:	2a0f      	cmp	r2, #15
  401f1a:	6060      	str	r0, [r4, #4]
  401f1c:	f8ce c004 	str.w	ip, [lr, #4]
  401f20:	f8ce c008 	str.w	ip, [lr, #8]
  401f24:	f200 8117 	bhi.w	402156 <_malloc_r+0x506>
  401f28:	4b1d      	ldr	r3, [pc, #116]	; (401fa0 <_malloc_r+0x350>)
  401f2a:	68bc      	ldr	r4, [r7, #8]
  401f2c:	681a      	ldr	r2, [r3, #0]
  401f2e:	4291      	cmp	r1, r2
  401f30:	bf88      	it	hi
  401f32:	6019      	strhi	r1, [r3, #0]
  401f34:	4b1b      	ldr	r3, [pc, #108]	; (401fa4 <_malloc_r+0x354>)
  401f36:	681a      	ldr	r2, [r3, #0]
  401f38:	4291      	cmp	r1, r2
  401f3a:	6862      	ldr	r2, [r4, #4]
  401f3c:	bf88      	it	hi
  401f3e:	6019      	strhi	r1, [r3, #0]
  401f40:	f022 0203 	bic.w	r2, r2, #3
  401f44:	4296      	cmp	r6, r2
  401f46:	eba2 0306 	sub.w	r3, r2, r6
  401f4a:	d801      	bhi.n	401f50 <_malloc_r+0x300>
  401f4c:	2b0f      	cmp	r3, #15
  401f4e:	dc04      	bgt.n	401f5a <_malloc_r+0x30a>
  401f50:	4628      	mov	r0, r5
  401f52:	f000 fa81 	bl	402458 <__malloc_unlock>
  401f56:	2400      	movs	r4, #0
  401f58:	e740      	b.n	401ddc <_malloc_r+0x18c>
  401f5a:	19a2      	adds	r2, r4, r6
  401f5c:	f043 0301 	orr.w	r3, r3, #1
  401f60:	f046 0601 	orr.w	r6, r6, #1
  401f64:	6066      	str	r6, [r4, #4]
  401f66:	4628      	mov	r0, r5
  401f68:	60ba      	str	r2, [r7, #8]
  401f6a:	6053      	str	r3, [r2, #4]
  401f6c:	f000 fa74 	bl	402458 <__malloc_unlock>
  401f70:	3408      	adds	r4, #8
  401f72:	4620      	mov	r0, r4
  401f74:	b003      	add	sp, #12
  401f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f7a:	2b14      	cmp	r3, #20
  401f7c:	d971      	bls.n	402062 <_malloc_r+0x412>
  401f7e:	2b54      	cmp	r3, #84	; 0x54
  401f80:	f200 80a3 	bhi.w	4020ca <_malloc_r+0x47a>
  401f84:	0b33      	lsrs	r3, r6, #12
  401f86:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  401f8a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  401f8e:	00c3      	lsls	r3, r0, #3
  401f90:	e680      	b.n	401c94 <_malloc_r+0x44>
  401f92:	bf00      	nop
  401f94:	20000454 	.word	0x20000454
  401f98:	20000928 	.word	0x20000928
  401f9c:	200008f8 	.word	0x200008f8
  401fa0:	20000920 	.word	0x20000920
  401fa4:	20000924 	.word	0x20000924
  401fa8:	2000045c 	.word	0x2000045c
  401fac:	2000085c 	.word	0x2000085c
  401fb0:	0a5a      	lsrs	r2, r3, #9
  401fb2:	2a04      	cmp	r2, #4
  401fb4:	d95b      	bls.n	40206e <_malloc_r+0x41e>
  401fb6:	2a14      	cmp	r2, #20
  401fb8:	f200 80ae 	bhi.w	402118 <_malloc_r+0x4c8>
  401fbc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  401fc0:	00c9      	lsls	r1, r1, #3
  401fc2:	325b      	adds	r2, #91	; 0x5b
  401fc4:	eb07 0c01 	add.w	ip, r7, r1
  401fc8:	5879      	ldr	r1, [r7, r1]
  401fca:	f1ac 0c08 	sub.w	ip, ip, #8
  401fce:	458c      	cmp	ip, r1
  401fd0:	f000 8088 	beq.w	4020e4 <_malloc_r+0x494>
  401fd4:	684a      	ldr	r2, [r1, #4]
  401fd6:	f022 0203 	bic.w	r2, r2, #3
  401fda:	4293      	cmp	r3, r2
  401fdc:	d273      	bcs.n	4020c6 <_malloc_r+0x476>
  401fde:	6889      	ldr	r1, [r1, #8]
  401fe0:	458c      	cmp	ip, r1
  401fe2:	d1f7      	bne.n	401fd4 <_malloc_r+0x384>
  401fe4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  401fe8:	687b      	ldr	r3, [r7, #4]
  401fea:	60e2      	str	r2, [r4, #12]
  401fec:	f8c4 c008 	str.w	ip, [r4, #8]
  401ff0:	6094      	str	r4, [r2, #8]
  401ff2:	f8cc 400c 	str.w	r4, [ip, #12]
  401ff6:	e68f      	b.n	401d18 <_malloc_r+0xc8>
  401ff8:	19a1      	adds	r1, r4, r6
  401ffa:	f046 0c01 	orr.w	ip, r6, #1
  401ffe:	f042 0601 	orr.w	r6, r2, #1
  402002:	f8c4 c004 	str.w	ip, [r4, #4]
  402006:	4628      	mov	r0, r5
  402008:	6179      	str	r1, [r7, #20]
  40200a:	6139      	str	r1, [r7, #16]
  40200c:	f8c1 e00c 	str.w	lr, [r1, #12]
  402010:	f8c1 e008 	str.w	lr, [r1, #8]
  402014:	604e      	str	r6, [r1, #4]
  402016:	50e2      	str	r2, [r4, r3]
  402018:	f000 fa1e 	bl	402458 <__malloc_unlock>
  40201c:	3408      	adds	r4, #8
  40201e:	e6dd      	b.n	401ddc <_malloc_r+0x18c>
  402020:	687b      	ldr	r3, [r7, #4]
  402022:	e679      	b.n	401d18 <_malloc_r+0xc8>
  402024:	f108 0801 	add.w	r8, r8, #1
  402028:	f018 0f03 	tst.w	r8, #3
  40202c:	f10c 0c08 	add.w	ip, ip, #8
  402030:	f47f ae85 	bne.w	401d3e <_malloc_r+0xee>
  402034:	e02d      	b.n	402092 <_malloc_r+0x442>
  402036:	68dc      	ldr	r4, [r3, #12]
  402038:	42a3      	cmp	r3, r4
  40203a:	bf08      	it	eq
  40203c:	3002      	addeq	r0, #2
  40203e:	f43f ae3e 	beq.w	401cbe <_malloc_r+0x6e>
  402042:	e6bb      	b.n	401dbc <_malloc_r+0x16c>
  402044:	4419      	add	r1, r3
  402046:	461c      	mov	r4, r3
  402048:	684a      	ldr	r2, [r1, #4]
  40204a:	68db      	ldr	r3, [r3, #12]
  40204c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402050:	f042 0201 	orr.w	r2, r2, #1
  402054:	604a      	str	r2, [r1, #4]
  402056:	4628      	mov	r0, r5
  402058:	60f3      	str	r3, [r6, #12]
  40205a:	609e      	str	r6, [r3, #8]
  40205c:	f000 f9fc 	bl	402458 <__malloc_unlock>
  402060:	e6bc      	b.n	401ddc <_malloc_r+0x18c>
  402062:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402066:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40206a:	00c3      	lsls	r3, r0, #3
  40206c:	e612      	b.n	401c94 <_malloc_r+0x44>
  40206e:	099a      	lsrs	r2, r3, #6
  402070:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402074:	00c9      	lsls	r1, r1, #3
  402076:	3238      	adds	r2, #56	; 0x38
  402078:	e7a4      	b.n	401fc4 <_malloc_r+0x374>
  40207a:	42bc      	cmp	r4, r7
  40207c:	d054      	beq.n	402128 <_malloc_r+0x4d8>
  40207e:	68bc      	ldr	r4, [r7, #8]
  402080:	6862      	ldr	r2, [r4, #4]
  402082:	f022 0203 	bic.w	r2, r2, #3
  402086:	e75d      	b.n	401f44 <_malloc_r+0x2f4>
  402088:	f859 3908 	ldr.w	r3, [r9], #-8
  40208c:	4599      	cmp	r9, r3
  40208e:	f040 8086 	bne.w	40219e <_malloc_r+0x54e>
  402092:	f010 0f03 	tst.w	r0, #3
  402096:	f100 30ff 	add.w	r0, r0, #4294967295
  40209a:	d1f5      	bne.n	402088 <_malloc_r+0x438>
  40209c:	687b      	ldr	r3, [r7, #4]
  40209e:	ea23 0304 	bic.w	r3, r3, r4
  4020a2:	607b      	str	r3, [r7, #4]
  4020a4:	0064      	lsls	r4, r4, #1
  4020a6:	429c      	cmp	r4, r3
  4020a8:	f63f aec7 	bhi.w	401e3a <_malloc_r+0x1ea>
  4020ac:	2c00      	cmp	r4, #0
  4020ae:	f43f aec4 	beq.w	401e3a <_malloc_r+0x1ea>
  4020b2:	421c      	tst	r4, r3
  4020b4:	4640      	mov	r0, r8
  4020b6:	f47f ae3e 	bne.w	401d36 <_malloc_r+0xe6>
  4020ba:	0064      	lsls	r4, r4, #1
  4020bc:	421c      	tst	r4, r3
  4020be:	f100 0004 	add.w	r0, r0, #4
  4020c2:	d0fa      	beq.n	4020ba <_malloc_r+0x46a>
  4020c4:	e637      	b.n	401d36 <_malloc_r+0xe6>
  4020c6:	468c      	mov	ip, r1
  4020c8:	e78c      	b.n	401fe4 <_malloc_r+0x394>
  4020ca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4020ce:	d815      	bhi.n	4020fc <_malloc_r+0x4ac>
  4020d0:	0bf3      	lsrs	r3, r6, #15
  4020d2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4020d6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4020da:	00c3      	lsls	r3, r0, #3
  4020dc:	e5da      	b.n	401c94 <_malloc_r+0x44>
  4020de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4020e2:	e6ed      	b.n	401ec0 <_malloc_r+0x270>
  4020e4:	687b      	ldr	r3, [r7, #4]
  4020e6:	1092      	asrs	r2, r2, #2
  4020e8:	2101      	movs	r1, #1
  4020ea:	fa01 f202 	lsl.w	r2, r1, r2
  4020ee:	4313      	orrs	r3, r2
  4020f0:	607b      	str	r3, [r7, #4]
  4020f2:	4662      	mov	r2, ip
  4020f4:	e779      	b.n	401fea <_malloc_r+0x39a>
  4020f6:	2301      	movs	r3, #1
  4020f8:	6053      	str	r3, [r2, #4]
  4020fa:	e729      	b.n	401f50 <_malloc_r+0x300>
  4020fc:	f240 5254 	movw	r2, #1364	; 0x554
  402100:	4293      	cmp	r3, r2
  402102:	d822      	bhi.n	40214a <_malloc_r+0x4fa>
  402104:	0cb3      	lsrs	r3, r6, #18
  402106:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40210a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40210e:	00c3      	lsls	r3, r0, #3
  402110:	e5c0      	b.n	401c94 <_malloc_r+0x44>
  402112:	f103 0b10 	add.w	fp, r3, #16
  402116:	e6ae      	b.n	401e76 <_malloc_r+0x226>
  402118:	2a54      	cmp	r2, #84	; 0x54
  40211a:	d829      	bhi.n	402170 <_malloc_r+0x520>
  40211c:	0b1a      	lsrs	r2, r3, #12
  40211e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402122:	00c9      	lsls	r1, r1, #3
  402124:	326e      	adds	r2, #110	; 0x6e
  402126:	e74d      	b.n	401fc4 <_malloc_r+0x374>
  402128:	4b20      	ldr	r3, [pc, #128]	; (4021ac <_malloc_r+0x55c>)
  40212a:	6819      	ldr	r1, [r3, #0]
  40212c:	4459      	add	r1, fp
  40212e:	6019      	str	r1, [r3, #0]
  402130:	e6b2      	b.n	401e98 <_malloc_r+0x248>
  402132:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402136:	2800      	cmp	r0, #0
  402138:	f47f aeae 	bne.w	401e98 <_malloc_r+0x248>
  40213c:	eb08 030b 	add.w	r3, r8, fp
  402140:	68ba      	ldr	r2, [r7, #8]
  402142:	f043 0301 	orr.w	r3, r3, #1
  402146:	6053      	str	r3, [r2, #4]
  402148:	e6ee      	b.n	401f28 <_malloc_r+0x2d8>
  40214a:	207f      	movs	r0, #127	; 0x7f
  40214c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  402150:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  402154:	e59e      	b.n	401c94 <_malloc_r+0x44>
  402156:	f104 0108 	add.w	r1, r4, #8
  40215a:	4628      	mov	r0, r5
  40215c:	9300      	str	r3, [sp, #0]
  40215e:	f7ff fa67 	bl	401630 <_free_r>
  402162:	9b00      	ldr	r3, [sp, #0]
  402164:	6819      	ldr	r1, [r3, #0]
  402166:	e6df      	b.n	401f28 <_malloc_r+0x2d8>
  402168:	2001      	movs	r0, #1
  40216a:	f04f 0900 	mov.w	r9, #0
  40216e:	e6bc      	b.n	401eea <_malloc_r+0x29a>
  402170:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402174:	d805      	bhi.n	402182 <_malloc_r+0x532>
  402176:	0bda      	lsrs	r2, r3, #15
  402178:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40217c:	00c9      	lsls	r1, r1, #3
  40217e:	3277      	adds	r2, #119	; 0x77
  402180:	e720      	b.n	401fc4 <_malloc_r+0x374>
  402182:	f240 5154 	movw	r1, #1364	; 0x554
  402186:	428a      	cmp	r2, r1
  402188:	d805      	bhi.n	402196 <_malloc_r+0x546>
  40218a:	0c9a      	lsrs	r2, r3, #18
  40218c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402190:	00c9      	lsls	r1, r1, #3
  402192:	327c      	adds	r2, #124	; 0x7c
  402194:	e716      	b.n	401fc4 <_malloc_r+0x374>
  402196:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40219a:	227e      	movs	r2, #126	; 0x7e
  40219c:	e712      	b.n	401fc4 <_malloc_r+0x374>
  40219e:	687b      	ldr	r3, [r7, #4]
  4021a0:	e780      	b.n	4020a4 <_malloc_r+0x454>
  4021a2:	08f0      	lsrs	r0, r6, #3
  4021a4:	f106 0308 	add.w	r3, r6, #8
  4021a8:	e600      	b.n	401dac <_malloc_r+0x15c>
  4021aa:	bf00      	nop
  4021ac:	200008f8 	.word	0x200008f8

004021b0 <memchr>:
  4021b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4021b4:	2a10      	cmp	r2, #16
  4021b6:	db2b      	blt.n	402210 <memchr+0x60>
  4021b8:	f010 0f07 	tst.w	r0, #7
  4021bc:	d008      	beq.n	4021d0 <memchr+0x20>
  4021be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4021c2:	3a01      	subs	r2, #1
  4021c4:	428b      	cmp	r3, r1
  4021c6:	d02d      	beq.n	402224 <memchr+0x74>
  4021c8:	f010 0f07 	tst.w	r0, #7
  4021cc:	b342      	cbz	r2, 402220 <memchr+0x70>
  4021ce:	d1f6      	bne.n	4021be <memchr+0xe>
  4021d0:	b4f0      	push	{r4, r5, r6, r7}
  4021d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4021d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4021da:	f022 0407 	bic.w	r4, r2, #7
  4021de:	f07f 0700 	mvns.w	r7, #0
  4021e2:	2300      	movs	r3, #0
  4021e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4021e8:	3c08      	subs	r4, #8
  4021ea:	ea85 0501 	eor.w	r5, r5, r1
  4021ee:	ea86 0601 	eor.w	r6, r6, r1
  4021f2:	fa85 f547 	uadd8	r5, r5, r7
  4021f6:	faa3 f587 	sel	r5, r3, r7
  4021fa:	fa86 f647 	uadd8	r6, r6, r7
  4021fe:	faa5 f687 	sel	r6, r5, r7
  402202:	b98e      	cbnz	r6, 402228 <memchr+0x78>
  402204:	d1ee      	bne.n	4021e4 <memchr+0x34>
  402206:	bcf0      	pop	{r4, r5, r6, r7}
  402208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40220c:	f002 0207 	and.w	r2, r2, #7
  402210:	b132      	cbz	r2, 402220 <memchr+0x70>
  402212:	f810 3b01 	ldrb.w	r3, [r0], #1
  402216:	3a01      	subs	r2, #1
  402218:	ea83 0301 	eor.w	r3, r3, r1
  40221c:	b113      	cbz	r3, 402224 <memchr+0x74>
  40221e:	d1f8      	bne.n	402212 <memchr+0x62>
  402220:	2000      	movs	r0, #0
  402222:	4770      	bx	lr
  402224:	3801      	subs	r0, #1
  402226:	4770      	bx	lr
  402228:	2d00      	cmp	r5, #0
  40222a:	bf06      	itte	eq
  40222c:	4635      	moveq	r5, r6
  40222e:	3803      	subeq	r0, #3
  402230:	3807      	subne	r0, #7
  402232:	f015 0f01 	tst.w	r5, #1
  402236:	d107      	bne.n	402248 <memchr+0x98>
  402238:	3001      	adds	r0, #1
  40223a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40223e:	bf02      	ittt	eq
  402240:	3001      	addeq	r0, #1
  402242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402246:	3001      	addeq	r0, #1
  402248:	bcf0      	pop	{r4, r5, r6, r7}
  40224a:	3801      	subs	r0, #1
  40224c:	4770      	bx	lr
  40224e:	bf00      	nop

00402250 <memcpy>:
  402250:	4684      	mov	ip, r0
  402252:	ea41 0300 	orr.w	r3, r1, r0
  402256:	f013 0303 	ands.w	r3, r3, #3
  40225a:	d16d      	bne.n	402338 <memcpy+0xe8>
  40225c:	3a40      	subs	r2, #64	; 0x40
  40225e:	d341      	bcc.n	4022e4 <memcpy+0x94>
  402260:	f851 3b04 	ldr.w	r3, [r1], #4
  402264:	f840 3b04 	str.w	r3, [r0], #4
  402268:	f851 3b04 	ldr.w	r3, [r1], #4
  40226c:	f840 3b04 	str.w	r3, [r0], #4
  402270:	f851 3b04 	ldr.w	r3, [r1], #4
  402274:	f840 3b04 	str.w	r3, [r0], #4
  402278:	f851 3b04 	ldr.w	r3, [r1], #4
  40227c:	f840 3b04 	str.w	r3, [r0], #4
  402280:	f851 3b04 	ldr.w	r3, [r1], #4
  402284:	f840 3b04 	str.w	r3, [r0], #4
  402288:	f851 3b04 	ldr.w	r3, [r1], #4
  40228c:	f840 3b04 	str.w	r3, [r0], #4
  402290:	f851 3b04 	ldr.w	r3, [r1], #4
  402294:	f840 3b04 	str.w	r3, [r0], #4
  402298:	f851 3b04 	ldr.w	r3, [r1], #4
  40229c:	f840 3b04 	str.w	r3, [r0], #4
  4022a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4022a4:	f840 3b04 	str.w	r3, [r0], #4
  4022a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4022ac:	f840 3b04 	str.w	r3, [r0], #4
  4022b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4022b4:	f840 3b04 	str.w	r3, [r0], #4
  4022b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4022bc:	f840 3b04 	str.w	r3, [r0], #4
  4022c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4022c4:	f840 3b04 	str.w	r3, [r0], #4
  4022c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4022cc:	f840 3b04 	str.w	r3, [r0], #4
  4022d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4022d4:	f840 3b04 	str.w	r3, [r0], #4
  4022d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4022dc:	f840 3b04 	str.w	r3, [r0], #4
  4022e0:	3a40      	subs	r2, #64	; 0x40
  4022e2:	d2bd      	bcs.n	402260 <memcpy+0x10>
  4022e4:	3230      	adds	r2, #48	; 0x30
  4022e6:	d311      	bcc.n	40230c <memcpy+0xbc>
  4022e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4022ec:	f840 3b04 	str.w	r3, [r0], #4
  4022f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4022f4:	f840 3b04 	str.w	r3, [r0], #4
  4022f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4022fc:	f840 3b04 	str.w	r3, [r0], #4
  402300:	f851 3b04 	ldr.w	r3, [r1], #4
  402304:	f840 3b04 	str.w	r3, [r0], #4
  402308:	3a10      	subs	r2, #16
  40230a:	d2ed      	bcs.n	4022e8 <memcpy+0x98>
  40230c:	320c      	adds	r2, #12
  40230e:	d305      	bcc.n	40231c <memcpy+0xcc>
  402310:	f851 3b04 	ldr.w	r3, [r1], #4
  402314:	f840 3b04 	str.w	r3, [r0], #4
  402318:	3a04      	subs	r2, #4
  40231a:	d2f9      	bcs.n	402310 <memcpy+0xc0>
  40231c:	3204      	adds	r2, #4
  40231e:	d008      	beq.n	402332 <memcpy+0xe2>
  402320:	07d2      	lsls	r2, r2, #31
  402322:	bf1c      	itt	ne
  402324:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402328:	f800 3b01 	strbne.w	r3, [r0], #1
  40232c:	d301      	bcc.n	402332 <memcpy+0xe2>
  40232e:	880b      	ldrh	r3, [r1, #0]
  402330:	8003      	strh	r3, [r0, #0]
  402332:	4660      	mov	r0, ip
  402334:	4770      	bx	lr
  402336:	bf00      	nop
  402338:	2a08      	cmp	r2, #8
  40233a:	d313      	bcc.n	402364 <memcpy+0x114>
  40233c:	078b      	lsls	r3, r1, #30
  40233e:	d08d      	beq.n	40225c <memcpy+0xc>
  402340:	f010 0303 	ands.w	r3, r0, #3
  402344:	d08a      	beq.n	40225c <memcpy+0xc>
  402346:	f1c3 0304 	rsb	r3, r3, #4
  40234a:	1ad2      	subs	r2, r2, r3
  40234c:	07db      	lsls	r3, r3, #31
  40234e:	bf1c      	itt	ne
  402350:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402354:	f800 3b01 	strbne.w	r3, [r0], #1
  402358:	d380      	bcc.n	40225c <memcpy+0xc>
  40235a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40235e:	f820 3b02 	strh.w	r3, [r0], #2
  402362:	e77b      	b.n	40225c <memcpy+0xc>
  402364:	3a04      	subs	r2, #4
  402366:	d3d9      	bcc.n	40231c <memcpy+0xcc>
  402368:	3a01      	subs	r2, #1
  40236a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40236e:	f800 3b01 	strb.w	r3, [r0], #1
  402372:	d2f9      	bcs.n	402368 <memcpy+0x118>
  402374:	780b      	ldrb	r3, [r1, #0]
  402376:	7003      	strb	r3, [r0, #0]
  402378:	784b      	ldrb	r3, [r1, #1]
  40237a:	7043      	strb	r3, [r0, #1]
  40237c:	788b      	ldrb	r3, [r1, #2]
  40237e:	7083      	strb	r3, [r0, #2]
  402380:	4660      	mov	r0, ip
  402382:	4770      	bx	lr

00402384 <memmove>:
  402384:	4288      	cmp	r0, r1
  402386:	b5f0      	push	{r4, r5, r6, r7, lr}
  402388:	d90d      	bls.n	4023a6 <memmove+0x22>
  40238a:	188b      	adds	r3, r1, r2
  40238c:	4298      	cmp	r0, r3
  40238e:	d20a      	bcs.n	4023a6 <memmove+0x22>
  402390:	1884      	adds	r4, r0, r2
  402392:	2a00      	cmp	r2, #0
  402394:	d051      	beq.n	40243a <memmove+0xb6>
  402396:	4622      	mov	r2, r4
  402398:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40239c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4023a0:	4299      	cmp	r1, r3
  4023a2:	d1f9      	bne.n	402398 <memmove+0x14>
  4023a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4023a6:	2a0f      	cmp	r2, #15
  4023a8:	d948      	bls.n	40243c <memmove+0xb8>
  4023aa:	ea41 0300 	orr.w	r3, r1, r0
  4023ae:	079b      	lsls	r3, r3, #30
  4023b0:	d146      	bne.n	402440 <memmove+0xbc>
  4023b2:	f100 0410 	add.w	r4, r0, #16
  4023b6:	f101 0310 	add.w	r3, r1, #16
  4023ba:	4615      	mov	r5, r2
  4023bc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4023c0:	f844 6c10 	str.w	r6, [r4, #-16]
  4023c4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4023c8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4023cc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4023d0:	f844 6c08 	str.w	r6, [r4, #-8]
  4023d4:	3d10      	subs	r5, #16
  4023d6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4023da:	f844 6c04 	str.w	r6, [r4, #-4]
  4023de:	2d0f      	cmp	r5, #15
  4023e0:	f103 0310 	add.w	r3, r3, #16
  4023e4:	f104 0410 	add.w	r4, r4, #16
  4023e8:	d8e8      	bhi.n	4023bc <memmove+0x38>
  4023ea:	f1a2 0310 	sub.w	r3, r2, #16
  4023ee:	f023 030f 	bic.w	r3, r3, #15
  4023f2:	f002 0e0f 	and.w	lr, r2, #15
  4023f6:	3310      	adds	r3, #16
  4023f8:	f1be 0f03 	cmp.w	lr, #3
  4023fc:	4419      	add	r1, r3
  4023fe:	4403      	add	r3, r0
  402400:	d921      	bls.n	402446 <memmove+0xc2>
  402402:	1f1e      	subs	r6, r3, #4
  402404:	460d      	mov	r5, r1
  402406:	4674      	mov	r4, lr
  402408:	3c04      	subs	r4, #4
  40240a:	f855 7b04 	ldr.w	r7, [r5], #4
  40240e:	f846 7f04 	str.w	r7, [r6, #4]!
  402412:	2c03      	cmp	r4, #3
  402414:	d8f8      	bhi.n	402408 <memmove+0x84>
  402416:	f1ae 0404 	sub.w	r4, lr, #4
  40241a:	f024 0403 	bic.w	r4, r4, #3
  40241e:	3404      	adds	r4, #4
  402420:	4421      	add	r1, r4
  402422:	4423      	add	r3, r4
  402424:	f002 0203 	and.w	r2, r2, #3
  402428:	b162      	cbz	r2, 402444 <memmove+0xc0>
  40242a:	3b01      	subs	r3, #1
  40242c:	440a      	add	r2, r1
  40242e:	f811 4b01 	ldrb.w	r4, [r1], #1
  402432:	f803 4f01 	strb.w	r4, [r3, #1]!
  402436:	428a      	cmp	r2, r1
  402438:	d1f9      	bne.n	40242e <memmove+0xaa>
  40243a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40243c:	4603      	mov	r3, r0
  40243e:	e7f3      	b.n	402428 <memmove+0xa4>
  402440:	4603      	mov	r3, r0
  402442:	e7f2      	b.n	40242a <memmove+0xa6>
  402444:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402446:	4672      	mov	r2, lr
  402448:	e7ee      	b.n	402428 <memmove+0xa4>
  40244a:	bf00      	nop

0040244c <__malloc_lock>:
  40244c:	4801      	ldr	r0, [pc, #4]	; (402454 <__malloc_lock+0x8>)
  40244e:	f7ff bb7b 	b.w	401b48 <__retarget_lock_acquire_recursive>
  402452:	bf00      	nop
  402454:	2000094c 	.word	0x2000094c

00402458 <__malloc_unlock>:
  402458:	4801      	ldr	r0, [pc, #4]	; (402460 <__malloc_unlock+0x8>)
  40245a:	f7ff bb77 	b.w	401b4c <__retarget_lock_release_recursive>
  40245e:	bf00      	nop
  402460:	2000094c 	.word	0x2000094c

00402464 <_realloc_r>:
  402464:	2900      	cmp	r1, #0
  402466:	f000 8095 	beq.w	402594 <_realloc_r+0x130>
  40246a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40246e:	460d      	mov	r5, r1
  402470:	4616      	mov	r6, r2
  402472:	b083      	sub	sp, #12
  402474:	4680      	mov	r8, r0
  402476:	f106 070b 	add.w	r7, r6, #11
  40247a:	f7ff ffe7 	bl	40244c <__malloc_lock>
  40247e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  402482:	2f16      	cmp	r7, #22
  402484:	f02e 0403 	bic.w	r4, lr, #3
  402488:	f1a5 0908 	sub.w	r9, r5, #8
  40248c:	d83c      	bhi.n	402508 <_realloc_r+0xa4>
  40248e:	2210      	movs	r2, #16
  402490:	4617      	mov	r7, r2
  402492:	42be      	cmp	r6, r7
  402494:	d83d      	bhi.n	402512 <_realloc_r+0xae>
  402496:	4294      	cmp	r4, r2
  402498:	da43      	bge.n	402522 <_realloc_r+0xbe>
  40249a:	4bc4      	ldr	r3, [pc, #784]	; (4027ac <_realloc_r+0x348>)
  40249c:	6899      	ldr	r1, [r3, #8]
  40249e:	eb09 0004 	add.w	r0, r9, r4
  4024a2:	4288      	cmp	r0, r1
  4024a4:	f000 80b4 	beq.w	402610 <_realloc_r+0x1ac>
  4024a8:	6843      	ldr	r3, [r0, #4]
  4024aa:	f023 0101 	bic.w	r1, r3, #1
  4024ae:	4401      	add	r1, r0
  4024b0:	6849      	ldr	r1, [r1, #4]
  4024b2:	07c9      	lsls	r1, r1, #31
  4024b4:	d54c      	bpl.n	402550 <_realloc_r+0xec>
  4024b6:	f01e 0f01 	tst.w	lr, #1
  4024ba:	f000 809b 	beq.w	4025f4 <_realloc_r+0x190>
  4024be:	4631      	mov	r1, r6
  4024c0:	4640      	mov	r0, r8
  4024c2:	f7ff fbc5 	bl	401c50 <_malloc_r>
  4024c6:	4606      	mov	r6, r0
  4024c8:	2800      	cmp	r0, #0
  4024ca:	d03a      	beq.n	402542 <_realloc_r+0xde>
  4024cc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4024d0:	f023 0301 	bic.w	r3, r3, #1
  4024d4:	444b      	add	r3, r9
  4024d6:	f1a0 0208 	sub.w	r2, r0, #8
  4024da:	429a      	cmp	r2, r3
  4024dc:	f000 8121 	beq.w	402722 <_realloc_r+0x2be>
  4024e0:	1f22      	subs	r2, r4, #4
  4024e2:	2a24      	cmp	r2, #36	; 0x24
  4024e4:	f200 8107 	bhi.w	4026f6 <_realloc_r+0x292>
  4024e8:	2a13      	cmp	r2, #19
  4024ea:	f200 80db 	bhi.w	4026a4 <_realloc_r+0x240>
  4024ee:	4603      	mov	r3, r0
  4024f0:	462a      	mov	r2, r5
  4024f2:	6811      	ldr	r1, [r2, #0]
  4024f4:	6019      	str	r1, [r3, #0]
  4024f6:	6851      	ldr	r1, [r2, #4]
  4024f8:	6059      	str	r1, [r3, #4]
  4024fa:	6892      	ldr	r2, [r2, #8]
  4024fc:	609a      	str	r2, [r3, #8]
  4024fe:	4629      	mov	r1, r5
  402500:	4640      	mov	r0, r8
  402502:	f7ff f895 	bl	401630 <_free_r>
  402506:	e01c      	b.n	402542 <_realloc_r+0xde>
  402508:	f027 0707 	bic.w	r7, r7, #7
  40250c:	2f00      	cmp	r7, #0
  40250e:	463a      	mov	r2, r7
  402510:	dabf      	bge.n	402492 <_realloc_r+0x2e>
  402512:	2600      	movs	r6, #0
  402514:	230c      	movs	r3, #12
  402516:	4630      	mov	r0, r6
  402518:	f8c8 3000 	str.w	r3, [r8]
  40251c:	b003      	add	sp, #12
  40251e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402522:	462e      	mov	r6, r5
  402524:	1be3      	subs	r3, r4, r7
  402526:	2b0f      	cmp	r3, #15
  402528:	d81e      	bhi.n	402568 <_realloc_r+0x104>
  40252a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40252e:	f003 0301 	and.w	r3, r3, #1
  402532:	4323      	orrs	r3, r4
  402534:	444c      	add	r4, r9
  402536:	f8c9 3004 	str.w	r3, [r9, #4]
  40253a:	6863      	ldr	r3, [r4, #4]
  40253c:	f043 0301 	orr.w	r3, r3, #1
  402540:	6063      	str	r3, [r4, #4]
  402542:	4640      	mov	r0, r8
  402544:	f7ff ff88 	bl	402458 <__malloc_unlock>
  402548:	4630      	mov	r0, r6
  40254a:	b003      	add	sp, #12
  40254c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402550:	f023 0303 	bic.w	r3, r3, #3
  402554:	18e1      	adds	r1, r4, r3
  402556:	4291      	cmp	r1, r2
  402558:	db1f      	blt.n	40259a <_realloc_r+0x136>
  40255a:	68c3      	ldr	r3, [r0, #12]
  40255c:	6882      	ldr	r2, [r0, #8]
  40255e:	462e      	mov	r6, r5
  402560:	60d3      	str	r3, [r2, #12]
  402562:	460c      	mov	r4, r1
  402564:	609a      	str	r2, [r3, #8]
  402566:	e7dd      	b.n	402524 <_realloc_r+0xc0>
  402568:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40256c:	eb09 0107 	add.w	r1, r9, r7
  402570:	f002 0201 	and.w	r2, r2, #1
  402574:	444c      	add	r4, r9
  402576:	f043 0301 	orr.w	r3, r3, #1
  40257a:	4317      	orrs	r7, r2
  40257c:	f8c9 7004 	str.w	r7, [r9, #4]
  402580:	604b      	str	r3, [r1, #4]
  402582:	6863      	ldr	r3, [r4, #4]
  402584:	f043 0301 	orr.w	r3, r3, #1
  402588:	3108      	adds	r1, #8
  40258a:	6063      	str	r3, [r4, #4]
  40258c:	4640      	mov	r0, r8
  40258e:	f7ff f84f 	bl	401630 <_free_r>
  402592:	e7d6      	b.n	402542 <_realloc_r+0xde>
  402594:	4611      	mov	r1, r2
  402596:	f7ff bb5b 	b.w	401c50 <_malloc_r>
  40259a:	f01e 0f01 	tst.w	lr, #1
  40259e:	d18e      	bne.n	4024be <_realloc_r+0x5a>
  4025a0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4025a4:	eba9 0a01 	sub.w	sl, r9, r1
  4025a8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4025ac:	f021 0103 	bic.w	r1, r1, #3
  4025b0:	440b      	add	r3, r1
  4025b2:	4423      	add	r3, r4
  4025b4:	4293      	cmp	r3, r2
  4025b6:	db25      	blt.n	402604 <_realloc_r+0x1a0>
  4025b8:	68c2      	ldr	r2, [r0, #12]
  4025ba:	6881      	ldr	r1, [r0, #8]
  4025bc:	4656      	mov	r6, sl
  4025be:	60ca      	str	r2, [r1, #12]
  4025c0:	6091      	str	r1, [r2, #8]
  4025c2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4025c6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4025ca:	1f22      	subs	r2, r4, #4
  4025cc:	2a24      	cmp	r2, #36	; 0x24
  4025ce:	60c1      	str	r1, [r0, #12]
  4025d0:	6088      	str	r0, [r1, #8]
  4025d2:	f200 8094 	bhi.w	4026fe <_realloc_r+0x29a>
  4025d6:	2a13      	cmp	r2, #19
  4025d8:	d96f      	bls.n	4026ba <_realloc_r+0x256>
  4025da:	6829      	ldr	r1, [r5, #0]
  4025dc:	f8ca 1008 	str.w	r1, [sl, #8]
  4025e0:	6869      	ldr	r1, [r5, #4]
  4025e2:	f8ca 100c 	str.w	r1, [sl, #12]
  4025e6:	2a1b      	cmp	r2, #27
  4025e8:	f200 80a2 	bhi.w	402730 <_realloc_r+0x2cc>
  4025ec:	3508      	adds	r5, #8
  4025ee:	f10a 0210 	add.w	r2, sl, #16
  4025f2:	e063      	b.n	4026bc <_realloc_r+0x258>
  4025f4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4025f8:	eba9 0a03 	sub.w	sl, r9, r3
  4025fc:	f8da 1004 	ldr.w	r1, [sl, #4]
  402600:	f021 0103 	bic.w	r1, r1, #3
  402604:	1863      	adds	r3, r4, r1
  402606:	4293      	cmp	r3, r2
  402608:	f6ff af59 	blt.w	4024be <_realloc_r+0x5a>
  40260c:	4656      	mov	r6, sl
  40260e:	e7d8      	b.n	4025c2 <_realloc_r+0x15e>
  402610:	6841      	ldr	r1, [r0, #4]
  402612:	f021 0b03 	bic.w	fp, r1, #3
  402616:	44a3      	add	fp, r4
  402618:	f107 0010 	add.w	r0, r7, #16
  40261c:	4583      	cmp	fp, r0
  40261e:	da56      	bge.n	4026ce <_realloc_r+0x26a>
  402620:	f01e 0f01 	tst.w	lr, #1
  402624:	f47f af4b 	bne.w	4024be <_realloc_r+0x5a>
  402628:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40262c:	eba9 0a01 	sub.w	sl, r9, r1
  402630:	f8da 1004 	ldr.w	r1, [sl, #4]
  402634:	f021 0103 	bic.w	r1, r1, #3
  402638:	448b      	add	fp, r1
  40263a:	4558      	cmp	r0, fp
  40263c:	dce2      	bgt.n	402604 <_realloc_r+0x1a0>
  40263e:	4656      	mov	r6, sl
  402640:	f8da 100c 	ldr.w	r1, [sl, #12]
  402644:	f856 0f08 	ldr.w	r0, [r6, #8]!
  402648:	1f22      	subs	r2, r4, #4
  40264a:	2a24      	cmp	r2, #36	; 0x24
  40264c:	60c1      	str	r1, [r0, #12]
  40264e:	6088      	str	r0, [r1, #8]
  402650:	f200 808f 	bhi.w	402772 <_realloc_r+0x30e>
  402654:	2a13      	cmp	r2, #19
  402656:	f240 808a 	bls.w	40276e <_realloc_r+0x30a>
  40265a:	6829      	ldr	r1, [r5, #0]
  40265c:	f8ca 1008 	str.w	r1, [sl, #8]
  402660:	6869      	ldr	r1, [r5, #4]
  402662:	f8ca 100c 	str.w	r1, [sl, #12]
  402666:	2a1b      	cmp	r2, #27
  402668:	f200 808a 	bhi.w	402780 <_realloc_r+0x31c>
  40266c:	3508      	adds	r5, #8
  40266e:	f10a 0210 	add.w	r2, sl, #16
  402672:	6829      	ldr	r1, [r5, #0]
  402674:	6011      	str	r1, [r2, #0]
  402676:	6869      	ldr	r1, [r5, #4]
  402678:	6051      	str	r1, [r2, #4]
  40267a:	68a9      	ldr	r1, [r5, #8]
  40267c:	6091      	str	r1, [r2, #8]
  40267e:	eb0a 0107 	add.w	r1, sl, r7
  402682:	ebab 0207 	sub.w	r2, fp, r7
  402686:	f042 0201 	orr.w	r2, r2, #1
  40268a:	6099      	str	r1, [r3, #8]
  40268c:	604a      	str	r2, [r1, #4]
  40268e:	f8da 3004 	ldr.w	r3, [sl, #4]
  402692:	f003 0301 	and.w	r3, r3, #1
  402696:	431f      	orrs	r7, r3
  402698:	4640      	mov	r0, r8
  40269a:	f8ca 7004 	str.w	r7, [sl, #4]
  40269e:	f7ff fedb 	bl	402458 <__malloc_unlock>
  4026a2:	e751      	b.n	402548 <_realloc_r+0xe4>
  4026a4:	682b      	ldr	r3, [r5, #0]
  4026a6:	6003      	str	r3, [r0, #0]
  4026a8:	686b      	ldr	r3, [r5, #4]
  4026aa:	6043      	str	r3, [r0, #4]
  4026ac:	2a1b      	cmp	r2, #27
  4026ae:	d82d      	bhi.n	40270c <_realloc_r+0x2a8>
  4026b0:	f100 0308 	add.w	r3, r0, #8
  4026b4:	f105 0208 	add.w	r2, r5, #8
  4026b8:	e71b      	b.n	4024f2 <_realloc_r+0x8e>
  4026ba:	4632      	mov	r2, r6
  4026bc:	6829      	ldr	r1, [r5, #0]
  4026be:	6011      	str	r1, [r2, #0]
  4026c0:	6869      	ldr	r1, [r5, #4]
  4026c2:	6051      	str	r1, [r2, #4]
  4026c4:	68a9      	ldr	r1, [r5, #8]
  4026c6:	6091      	str	r1, [r2, #8]
  4026c8:	461c      	mov	r4, r3
  4026ca:	46d1      	mov	r9, sl
  4026cc:	e72a      	b.n	402524 <_realloc_r+0xc0>
  4026ce:	eb09 0107 	add.w	r1, r9, r7
  4026d2:	ebab 0b07 	sub.w	fp, fp, r7
  4026d6:	f04b 0201 	orr.w	r2, fp, #1
  4026da:	6099      	str	r1, [r3, #8]
  4026dc:	604a      	str	r2, [r1, #4]
  4026de:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4026e2:	f003 0301 	and.w	r3, r3, #1
  4026e6:	431f      	orrs	r7, r3
  4026e8:	4640      	mov	r0, r8
  4026ea:	f845 7c04 	str.w	r7, [r5, #-4]
  4026ee:	f7ff feb3 	bl	402458 <__malloc_unlock>
  4026f2:	462e      	mov	r6, r5
  4026f4:	e728      	b.n	402548 <_realloc_r+0xe4>
  4026f6:	4629      	mov	r1, r5
  4026f8:	f7ff fe44 	bl	402384 <memmove>
  4026fc:	e6ff      	b.n	4024fe <_realloc_r+0x9a>
  4026fe:	4629      	mov	r1, r5
  402700:	4630      	mov	r0, r6
  402702:	461c      	mov	r4, r3
  402704:	46d1      	mov	r9, sl
  402706:	f7ff fe3d 	bl	402384 <memmove>
  40270a:	e70b      	b.n	402524 <_realloc_r+0xc0>
  40270c:	68ab      	ldr	r3, [r5, #8]
  40270e:	6083      	str	r3, [r0, #8]
  402710:	68eb      	ldr	r3, [r5, #12]
  402712:	60c3      	str	r3, [r0, #12]
  402714:	2a24      	cmp	r2, #36	; 0x24
  402716:	d017      	beq.n	402748 <_realloc_r+0x2e4>
  402718:	f100 0310 	add.w	r3, r0, #16
  40271c:	f105 0210 	add.w	r2, r5, #16
  402720:	e6e7      	b.n	4024f2 <_realloc_r+0x8e>
  402722:	f850 3c04 	ldr.w	r3, [r0, #-4]
  402726:	f023 0303 	bic.w	r3, r3, #3
  40272a:	441c      	add	r4, r3
  40272c:	462e      	mov	r6, r5
  40272e:	e6f9      	b.n	402524 <_realloc_r+0xc0>
  402730:	68a9      	ldr	r1, [r5, #8]
  402732:	f8ca 1010 	str.w	r1, [sl, #16]
  402736:	68e9      	ldr	r1, [r5, #12]
  402738:	f8ca 1014 	str.w	r1, [sl, #20]
  40273c:	2a24      	cmp	r2, #36	; 0x24
  40273e:	d00c      	beq.n	40275a <_realloc_r+0x2f6>
  402740:	3510      	adds	r5, #16
  402742:	f10a 0218 	add.w	r2, sl, #24
  402746:	e7b9      	b.n	4026bc <_realloc_r+0x258>
  402748:	692b      	ldr	r3, [r5, #16]
  40274a:	6103      	str	r3, [r0, #16]
  40274c:	696b      	ldr	r3, [r5, #20]
  40274e:	6143      	str	r3, [r0, #20]
  402750:	f105 0218 	add.w	r2, r5, #24
  402754:	f100 0318 	add.w	r3, r0, #24
  402758:	e6cb      	b.n	4024f2 <_realloc_r+0x8e>
  40275a:	692a      	ldr	r2, [r5, #16]
  40275c:	f8ca 2018 	str.w	r2, [sl, #24]
  402760:	696a      	ldr	r2, [r5, #20]
  402762:	f8ca 201c 	str.w	r2, [sl, #28]
  402766:	3518      	adds	r5, #24
  402768:	f10a 0220 	add.w	r2, sl, #32
  40276c:	e7a6      	b.n	4026bc <_realloc_r+0x258>
  40276e:	4632      	mov	r2, r6
  402770:	e77f      	b.n	402672 <_realloc_r+0x20e>
  402772:	4629      	mov	r1, r5
  402774:	4630      	mov	r0, r6
  402776:	9301      	str	r3, [sp, #4]
  402778:	f7ff fe04 	bl	402384 <memmove>
  40277c:	9b01      	ldr	r3, [sp, #4]
  40277e:	e77e      	b.n	40267e <_realloc_r+0x21a>
  402780:	68a9      	ldr	r1, [r5, #8]
  402782:	f8ca 1010 	str.w	r1, [sl, #16]
  402786:	68e9      	ldr	r1, [r5, #12]
  402788:	f8ca 1014 	str.w	r1, [sl, #20]
  40278c:	2a24      	cmp	r2, #36	; 0x24
  40278e:	d003      	beq.n	402798 <_realloc_r+0x334>
  402790:	3510      	adds	r5, #16
  402792:	f10a 0218 	add.w	r2, sl, #24
  402796:	e76c      	b.n	402672 <_realloc_r+0x20e>
  402798:	692a      	ldr	r2, [r5, #16]
  40279a:	f8ca 2018 	str.w	r2, [sl, #24]
  40279e:	696a      	ldr	r2, [r5, #20]
  4027a0:	f8ca 201c 	str.w	r2, [sl, #28]
  4027a4:	3518      	adds	r5, #24
  4027a6:	f10a 0220 	add.w	r2, sl, #32
  4027aa:	e762      	b.n	402672 <_realloc_r+0x20e>
  4027ac:	20000454 	.word	0x20000454

004027b0 <_sbrk_r>:
  4027b0:	b538      	push	{r3, r4, r5, lr}
  4027b2:	4c07      	ldr	r4, [pc, #28]	; (4027d0 <_sbrk_r+0x20>)
  4027b4:	2300      	movs	r3, #0
  4027b6:	4605      	mov	r5, r0
  4027b8:	4608      	mov	r0, r1
  4027ba:	6023      	str	r3, [r4, #0]
  4027bc:	f7fe fa18 	bl	400bf0 <_sbrk>
  4027c0:	1c43      	adds	r3, r0, #1
  4027c2:	d000      	beq.n	4027c6 <_sbrk_r+0x16>
  4027c4:	bd38      	pop	{r3, r4, r5, pc}
  4027c6:	6823      	ldr	r3, [r4, #0]
  4027c8:	2b00      	cmp	r3, #0
  4027ca:	d0fb      	beq.n	4027c4 <_sbrk_r+0x14>
  4027cc:	602b      	str	r3, [r5, #0]
  4027ce:	bd38      	pop	{r3, r4, r5, pc}
  4027d0:	20000960 	.word	0x20000960

004027d4 <__sread>:
  4027d4:	b510      	push	{r4, lr}
  4027d6:	460c      	mov	r4, r1
  4027d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4027dc:	f000 f9ca 	bl	402b74 <_read_r>
  4027e0:	2800      	cmp	r0, #0
  4027e2:	db03      	blt.n	4027ec <__sread+0x18>
  4027e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4027e6:	4403      	add	r3, r0
  4027e8:	6523      	str	r3, [r4, #80]	; 0x50
  4027ea:	bd10      	pop	{r4, pc}
  4027ec:	89a3      	ldrh	r3, [r4, #12]
  4027ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4027f2:	81a3      	strh	r3, [r4, #12]
  4027f4:	bd10      	pop	{r4, pc}
  4027f6:	bf00      	nop

004027f8 <__swrite>:
  4027f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4027fc:	4616      	mov	r6, r2
  4027fe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  402802:	461f      	mov	r7, r3
  402804:	05d3      	lsls	r3, r2, #23
  402806:	460c      	mov	r4, r1
  402808:	4605      	mov	r5, r0
  40280a:	d507      	bpl.n	40281c <__swrite+0x24>
  40280c:	2200      	movs	r2, #0
  40280e:	2302      	movs	r3, #2
  402810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402814:	f000 f998 	bl	402b48 <_lseek_r>
  402818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40281c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402820:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  402824:	81a2      	strh	r2, [r4, #12]
  402826:	463b      	mov	r3, r7
  402828:	4632      	mov	r2, r6
  40282a:	4628      	mov	r0, r5
  40282c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402830:	f000 b814 	b.w	40285c <_write_r>

00402834 <__sseek>:
  402834:	b510      	push	{r4, lr}
  402836:	460c      	mov	r4, r1
  402838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40283c:	f000 f984 	bl	402b48 <_lseek_r>
  402840:	89a3      	ldrh	r3, [r4, #12]
  402842:	1c42      	adds	r2, r0, #1
  402844:	bf0e      	itee	eq
  402846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40284a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40284e:	6520      	strne	r0, [r4, #80]	; 0x50
  402850:	81a3      	strh	r3, [r4, #12]
  402852:	bd10      	pop	{r4, pc}

00402854 <__sclose>:
  402854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402858:	f000 b8dc 	b.w	402a14 <_close_r>

0040285c <_write_r>:
  40285c:	b570      	push	{r4, r5, r6, lr}
  40285e:	460d      	mov	r5, r1
  402860:	4c08      	ldr	r4, [pc, #32]	; (402884 <_write_r+0x28>)
  402862:	4611      	mov	r1, r2
  402864:	4606      	mov	r6, r0
  402866:	461a      	mov	r2, r3
  402868:	4628      	mov	r0, r5
  40286a:	2300      	movs	r3, #0
  40286c:	6023      	str	r3, [r4, #0]
  40286e:	f7fd fc97 	bl	4001a0 <_write>
  402872:	1c43      	adds	r3, r0, #1
  402874:	d000      	beq.n	402878 <_write_r+0x1c>
  402876:	bd70      	pop	{r4, r5, r6, pc}
  402878:	6823      	ldr	r3, [r4, #0]
  40287a:	2b00      	cmp	r3, #0
  40287c:	d0fb      	beq.n	402876 <_write_r+0x1a>
  40287e:	6033      	str	r3, [r6, #0]
  402880:	bd70      	pop	{r4, r5, r6, pc}
  402882:	bf00      	nop
  402884:	20000960 	.word	0x20000960

00402888 <__swsetup_r>:
  402888:	b538      	push	{r3, r4, r5, lr}
  40288a:	4b30      	ldr	r3, [pc, #192]	; (40294c <__swsetup_r+0xc4>)
  40288c:	681b      	ldr	r3, [r3, #0]
  40288e:	4605      	mov	r5, r0
  402890:	460c      	mov	r4, r1
  402892:	b113      	cbz	r3, 40289a <__swsetup_r+0x12>
  402894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402896:	2a00      	cmp	r2, #0
  402898:	d038      	beq.n	40290c <__swsetup_r+0x84>
  40289a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40289e:	b293      	uxth	r3, r2
  4028a0:	0718      	lsls	r0, r3, #28
  4028a2:	d50c      	bpl.n	4028be <__swsetup_r+0x36>
  4028a4:	6920      	ldr	r0, [r4, #16]
  4028a6:	b1a8      	cbz	r0, 4028d4 <__swsetup_r+0x4c>
  4028a8:	f013 0201 	ands.w	r2, r3, #1
  4028ac:	d01e      	beq.n	4028ec <__swsetup_r+0x64>
  4028ae:	6963      	ldr	r3, [r4, #20]
  4028b0:	2200      	movs	r2, #0
  4028b2:	425b      	negs	r3, r3
  4028b4:	61a3      	str	r3, [r4, #24]
  4028b6:	60a2      	str	r2, [r4, #8]
  4028b8:	b1f0      	cbz	r0, 4028f8 <__swsetup_r+0x70>
  4028ba:	2000      	movs	r0, #0
  4028bc:	bd38      	pop	{r3, r4, r5, pc}
  4028be:	06d9      	lsls	r1, r3, #27
  4028c0:	d53c      	bpl.n	40293c <__swsetup_r+0xb4>
  4028c2:	0758      	lsls	r0, r3, #29
  4028c4:	d426      	bmi.n	402914 <__swsetup_r+0x8c>
  4028c6:	6920      	ldr	r0, [r4, #16]
  4028c8:	f042 0308 	orr.w	r3, r2, #8
  4028cc:	81a3      	strh	r3, [r4, #12]
  4028ce:	b29b      	uxth	r3, r3
  4028d0:	2800      	cmp	r0, #0
  4028d2:	d1e9      	bne.n	4028a8 <__swsetup_r+0x20>
  4028d4:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4028d8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4028dc:	d0e4      	beq.n	4028a8 <__swsetup_r+0x20>
  4028de:	4628      	mov	r0, r5
  4028e0:	4621      	mov	r1, r4
  4028e2:	f7ff f963 	bl	401bac <__smakebuf_r>
  4028e6:	89a3      	ldrh	r3, [r4, #12]
  4028e8:	6920      	ldr	r0, [r4, #16]
  4028ea:	e7dd      	b.n	4028a8 <__swsetup_r+0x20>
  4028ec:	0799      	lsls	r1, r3, #30
  4028ee:	bf58      	it	pl
  4028f0:	6962      	ldrpl	r2, [r4, #20]
  4028f2:	60a2      	str	r2, [r4, #8]
  4028f4:	2800      	cmp	r0, #0
  4028f6:	d1e0      	bne.n	4028ba <__swsetup_r+0x32>
  4028f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4028fc:	061a      	lsls	r2, r3, #24
  4028fe:	d5dd      	bpl.n	4028bc <__swsetup_r+0x34>
  402900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402904:	81a3      	strh	r3, [r4, #12]
  402906:	f04f 30ff 	mov.w	r0, #4294967295
  40290a:	bd38      	pop	{r3, r4, r5, pc}
  40290c:	4618      	mov	r0, r3
  40290e:	f7fe fded 	bl	4014ec <__sinit>
  402912:	e7c2      	b.n	40289a <__swsetup_r+0x12>
  402914:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402916:	b151      	cbz	r1, 40292e <__swsetup_r+0xa6>
  402918:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40291c:	4299      	cmp	r1, r3
  40291e:	d004      	beq.n	40292a <__swsetup_r+0xa2>
  402920:	4628      	mov	r0, r5
  402922:	f7fe fe85 	bl	401630 <_free_r>
  402926:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40292a:	2300      	movs	r3, #0
  40292c:	6323      	str	r3, [r4, #48]	; 0x30
  40292e:	2300      	movs	r3, #0
  402930:	6920      	ldr	r0, [r4, #16]
  402932:	6063      	str	r3, [r4, #4]
  402934:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402938:	6020      	str	r0, [r4, #0]
  40293a:	e7c5      	b.n	4028c8 <__swsetup_r+0x40>
  40293c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402940:	2309      	movs	r3, #9
  402942:	602b      	str	r3, [r5, #0]
  402944:	f04f 30ff 	mov.w	r0, #4294967295
  402948:	81a2      	strh	r2, [r4, #12]
  40294a:	bd38      	pop	{r3, r4, r5, pc}
  40294c:	20000020 	.word	0x20000020

00402950 <__register_exitproc>:
  402950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402954:	4d2c      	ldr	r5, [pc, #176]	; (402a08 <__register_exitproc+0xb8>)
  402956:	4606      	mov	r6, r0
  402958:	6828      	ldr	r0, [r5, #0]
  40295a:	4698      	mov	r8, r3
  40295c:	460f      	mov	r7, r1
  40295e:	4691      	mov	r9, r2
  402960:	f7ff f8f2 	bl	401b48 <__retarget_lock_acquire_recursive>
  402964:	4b29      	ldr	r3, [pc, #164]	; (402a0c <__register_exitproc+0xbc>)
  402966:	681c      	ldr	r4, [r3, #0]
  402968:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40296c:	2b00      	cmp	r3, #0
  40296e:	d03e      	beq.n	4029ee <__register_exitproc+0x9e>
  402970:	685a      	ldr	r2, [r3, #4]
  402972:	2a1f      	cmp	r2, #31
  402974:	dc1c      	bgt.n	4029b0 <__register_exitproc+0x60>
  402976:	f102 0e01 	add.w	lr, r2, #1
  40297a:	b176      	cbz	r6, 40299a <__register_exitproc+0x4a>
  40297c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402980:	2401      	movs	r4, #1
  402982:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402986:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40298a:	4094      	lsls	r4, r2
  40298c:	4320      	orrs	r0, r4
  40298e:	2e02      	cmp	r6, #2
  402990:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402994:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402998:	d023      	beq.n	4029e2 <__register_exitproc+0x92>
  40299a:	3202      	adds	r2, #2
  40299c:	f8c3 e004 	str.w	lr, [r3, #4]
  4029a0:	6828      	ldr	r0, [r5, #0]
  4029a2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4029a6:	f7ff f8d1 	bl	401b4c <__retarget_lock_release_recursive>
  4029aa:	2000      	movs	r0, #0
  4029ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4029b0:	4b17      	ldr	r3, [pc, #92]	; (402a10 <__register_exitproc+0xc0>)
  4029b2:	b30b      	cbz	r3, 4029f8 <__register_exitproc+0xa8>
  4029b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4029b8:	f7ff f942 	bl	401c40 <malloc>
  4029bc:	4603      	mov	r3, r0
  4029be:	b1d8      	cbz	r0, 4029f8 <__register_exitproc+0xa8>
  4029c0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4029c4:	6002      	str	r2, [r0, #0]
  4029c6:	2100      	movs	r1, #0
  4029c8:	6041      	str	r1, [r0, #4]
  4029ca:	460a      	mov	r2, r1
  4029cc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4029d0:	f04f 0e01 	mov.w	lr, #1
  4029d4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4029d8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4029dc:	2e00      	cmp	r6, #0
  4029de:	d0dc      	beq.n	40299a <__register_exitproc+0x4a>
  4029e0:	e7cc      	b.n	40297c <__register_exitproc+0x2c>
  4029e2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4029e6:	430c      	orrs	r4, r1
  4029e8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4029ec:	e7d5      	b.n	40299a <__register_exitproc+0x4a>
  4029ee:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4029f2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4029f6:	e7bb      	b.n	402970 <__register_exitproc+0x20>
  4029f8:	6828      	ldr	r0, [r5, #0]
  4029fa:	f7ff f8a7 	bl	401b4c <__retarget_lock_release_recursive>
  4029fe:	f04f 30ff 	mov.w	r0, #4294967295
  402a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402a06:	bf00      	nop
  402a08:	20000450 	.word	0x20000450
  402a0c:	00402ba8 	.word	0x00402ba8
  402a10:	00401c41 	.word	0x00401c41

00402a14 <_close_r>:
  402a14:	b538      	push	{r3, r4, r5, lr}
  402a16:	4c07      	ldr	r4, [pc, #28]	; (402a34 <_close_r+0x20>)
  402a18:	2300      	movs	r3, #0
  402a1a:	4605      	mov	r5, r0
  402a1c:	4608      	mov	r0, r1
  402a1e:	6023      	str	r3, [r4, #0]
  402a20:	f7fe f902 	bl	400c28 <_close>
  402a24:	1c43      	adds	r3, r0, #1
  402a26:	d000      	beq.n	402a2a <_close_r+0x16>
  402a28:	bd38      	pop	{r3, r4, r5, pc}
  402a2a:	6823      	ldr	r3, [r4, #0]
  402a2c:	2b00      	cmp	r3, #0
  402a2e:	d0fb      	beq.n	402a28 <_close_r+0x14>
  402a30:	602b      	str	r3, [r5, #0]
  402a32:	bd38      	pop	{r3, r4, r5, pc}
  402a34:	20000960 	.word	0x20000960

00402a38 <_fclose_r>:
  402a38:	b570      	push	{r4, r5, r6, lr}
  402a3a:	b159      	cbz	r1, 402a54 <_fclose_r+0x1c>
  402a3c:	4605      	mov	r5, r0
  402a3e:	460c      	mov	r4, r1
  402a40:	b110      	cbz	r0, 402a48 <_fclose_r+0x10>
  402a42:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402a44:	2b00      	cmp	r3, #0
  402a46:	d03c      	beq.n	402ac2 <_fclose_r+0x8a>
  402a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402a4a:	07d8      	lsls	r0, r3, #31
  402a4c:	d505      	bpl.n	402a5a <_fclose_r+0x22>
  402a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402a52:	b92b      	cbnz	r3, 402a60 <_fclose_r+0x28>
  402a54:	2600      	movs	r6, #0
  402a56:	4630      	mov	r0, r6
  402a58:	bd70      	pop	{r4, r5, r6, pc}
  402a5a:	89a3      	ldrh	r3, [r4, #12]
  402a5c:	0599      	lsls	r1, r3, #22
  402a5e:	d53c      	bpl.n	402ada <_fclose_r+0xa2>
  402a60:	4621      	mov	r1, r4
  402a62:	4628      	mov	r0, r5
  402a64:	f7fe fc4a 	bl	4012fc <__sflush_r>
  402a68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402a6a:	4606      	mov	r6, r0
  402a6c:	b133      	cbz	r3, 402a7c <_fclose_r+0x44>
  402a6e:	69e1      	ldr	r1, [r4, #28]
  402a70:	4628      	mov	r0, r5
  402a72:	4798      	blx	r3
  402a74:	2800      	cmp	r0, #0
  402a76:	bfb8      	it	lt
  402a78:	f04f 36ff 	movlt.w	r6, #4294967295
  402a7c:	89a3      	ldrh	r3, [r4, #12]
  402a7e:	061a      	lsls	r2, r3, #24
  402a80:	d422      	bmi.n	402ac8 <_fclose_r+0x90>
  402a82:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402a84:	b141      	cbz	r1, 402a98 <_fclose_r+0x60>
  402a86:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402a8a:	4299      	cmp	r1, r3
  402a8c:	d002      	beq.n	402a94 <_fclose_r+0x5c>
  402a8e:	4628      	mov	r0, r5
  402a90:	f7fe fdce 	bl	401630 <_free_r>
  402a94:	2300      	movs	r3, #0
  402a96:	6323      	str	r3, [r4, #48]	; 0x30
  402a98:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402a9a:	b121      	cbz	r1, 402aa6 <_fclose_r+0x6e>
  402a9c:	4628      	mov	r0, r5
  402a9e:	f7fe fdc7 	bl	401630 <_free_r>
  402aa2:	2300      	movs	r3, #0
  402aa4:	6463      	str	r3, [r4, #68]	; 0x44
  402aa6:	f7fe fd4d 	bl	401544 <__sfp_lock_acquire>
  402aaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402aac:	2200      	movs	r2, #0
  402aae:	07db      	lsls	r3, r3, #31
  402ab0:	81a2      	strh	r2, [r4, #12]
  402ab2:	d50e      	bpl.n	402ad2 <_fclose_r+0x9a>
  402ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402ab6:	f7ff f845 	bl	401b44 <__retarget_lock_close_recursive>
  402aba:	f7fe fd49 	bl	401550 <__sfp_lock_release>
  402abe:	4630      	mov	r0, r6
  402ac0:	bd70      	pop	{r4, r5, r6, pc}
  402ac2:	f7fe fd13 	bl	4014ec <__sinit>
  402ac6:	e7bf      	b.n	402a48 <_fclose_r+0x10>
  402ac8:	6921      	ldr	r1, [r4, #16]
  402aca:	4628      	mov	r0, r5
  402acc:	f7fe fdb0 	bl	401630 <_free_r>
  402ad0:	e7d7      	b.n	402a82 <_fclose_r+0x4a>
  402ad2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402ad4:	f7ff f83a 	bl	401b4c <__retarget_lock_release_recursive>
  402ad8:	e7ec      	b.n	402ab4 <_fclose_r+0x7c>
  402ada:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402adc:	f7ff f834 	bl	401b48 <__retarget_lock_acquire_recursive>
  402ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402ae4:	2b00      	cmp	r3, #0
  402ae6:	d1bb      	bne.n	402a60 <_fclose_r+0x28>
  402ae8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402aea:	f016 0601 	ands.w	r6, r6, #1
  402aee:	d1b1      	bne.n	402a54 <_fclose_r+0x1c>
  402af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402af2:	f7ff f82b 	bl	401b4c <__retarget_lock_release_recursive>
  402af6:	4630      	mov	r0, r6
  402af8:	bd70      	pop	{r4, r5, r6, pc}
  402afa:	bf00      	nop

00402afc <_fstat_r>:
  402afc:	b538      	push	{r3, r4, r5, lr}
  402afe:	460b      	mov	r3, r1
  402b00:	4c07      	ldr	r4, [pc, #28]	; (402b20 <_fstat_r+0x24>)
  402b02:	4605      	mov	r5, r0
  402b04:	4611      	mov	r1, r2
  402b06:	4618      	mov	r0, r3
  402b08:	2300      	movs	r3, #0
  402b0a:	6023      	str	r3, [r4, #0]
  402b0c:	f7fe f88f 	bl	400c2e <_fstat>
  402b10:	1c43      	adds	r3, r0, #1
  402b12:	d000      	beq.n	402b16 <_fstat_r+0x1a>
  402b14:	bd38      	pop	{r3, r4, r5, pc}
  402b16:	6823      	ldr	r3, [r4, #0]
  402b18:	2b00      	cmp	r3, #0
  402b1a:	d0fb      	beq.n	402b14 <_fstat_r+0x18>
  402b1c:	602b      	str	r3, [r5, #0]
  402b1e:	bd38      	pop	{r3, r4, r5, pc}
  402b20:	20000960 	.word	0x20000960

00402b24 <_isatty_r>:
  402b24:	b538      	push	{r3, r4, r5, lr}
  402b26:	4c07      	ldr	r4, [pc, #28]	; (402b44 <_isatty_r+0x20>)
  402b28:	2300      	movs	r3, #0
  402b2a:	4605      	mov	r5, r0
  402b2c:	4608      	mov	r0, r1
  402b2e:	6023      	str	r3, [r4, #0]
  402b30:	f7fe f882 	bl	400c38 <_isatty>
  402b34:	1c43      	adds	r3, r0, #1
  402b36:	d000      	beq.n	402b3a <_isatty_r+0x16>
  402b38:	bd38      	pop	{r3, r4, r5, pc}
  402b3a:	6823      	ldr	r3, [r4, #0]
  402b3c:	2b00      	cmp	r3, #0
  402b3e:	d0fb      	beq.n	402b38 <_isatty_r+0x14>
  402b40:	602b      	str	r3, [r5, #0]
  402b42:	bd38      	pop	{r3, r4, r5, pc}
  402b44:	20000960 	.word	0x20000960

00402b48 <_lseek_r>:
  402b48:	b570      	push	{r4, r5, r6, lr}
  402b4a:	460d      	mov	r5, r1
  402b4c:	4c08      	ldr	r4, [pc, #32]	; (402b70 <_lseek_r+0x28>)
  402b4e:	4611      	mov	r1, r2
  402b50:	4606      	mov	r6, r0
  402b52:	461a      	mov	r2, r3
  402b54:	4628      	mov	r0, r5
  402b56:	2300      	movs	r3, #0
  402b58:	6023      	str	r3, [r4, #0]
  402b5a:	f7fe f86f 	bl	400c3c <_lseek>
  402b5e:	1c43      	adds	r3, r0, #1
  402b60:	d000      	beq.n	402b64 <_lseek_r+0x1c>
  402b62:	bd70      	pop	{r4, r5, r6, pc}
  402b64:	6823      	ldr	r3, [r4, #0]
  402b66:	2b00      	cmp	r3, #0
  402b68:	d0fb      	beq.n	402b62 <_lseek_r+0x1a>
  402b6a:	6033      	str	r3, [r6, #0]
  402b6c:	bd70      	pop	{r4, r5, r6, pc}
  402b6e:	bf00      	nop
  402b70:	20000960 	.word	0x20000960

00402b74 <_read_r>:
  402b74:	b570      	push	{r4, r5, r6, lr}
  402b76:	460d      	mov	r5, r1
  402b78:	4c08      	ldr	r4, [pc, #32]	; (402b9c <_read_r+0x28>)
  402b7a:	4611      	mov	r1, r2
  402b7c:	4606      	mov	r6, r0
  402b7e:	461a      	mov	r2, r3
  402b80:	4628      	mov	r0, r5
  402b82:	2300      	movs	r3, #0
  402b84:	6023      	str	r3, [r4, #0]
  402b86:	f7fd fad7 	bl	400138 <_read>
  402b8a:	1c43      	adds	r3, r0, #1
  402b8c:	d000      	beq.n	402b90 <_read_r+0x1c>
  402b8e:	bd70      	pop	{r4, r5, r6, pc}
  402b90:	6823      	ldr	r3, [r4, #0]
  402b92:	2b00      	cmp	r3, #0
  402b94:	d0fb      	beq.n	402b8e <_read_r+0x1a>
  402b96:	6033      	str	r3, [r6, #0]
  402b98:	bd70      	pop	{r4, r5, r6, pc}
  402b9a:	bf00      	nop
  402b9c:	20000960 	.word	0x20000960
  402ba0:	54534554 	.word	0x54534554
  402ba4:	00000d45 	.word	0x00000d45

00402ba8 <_global_impure_ptr>:
  402ba8:	20000028 0000000a                       (.. ....

00402bb0 <_init>:
  402bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402bb2:	bf00      	nop
  402bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402bb6:	bc08      	pop	{r3}
  402bb8:	469e      	mov	lr, r3
  402bba:	4770      	bx	lr

00402bbc <__init_array_start>:
  402bbc:	004012dd 	.word	0x004012dd

00402bc0 <__frame_dummy_init_array_entry>:
  402bc0:	004000f1                                ..@.

00402bc4 <_fini>:
  402bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402bc6:	bf00      	nop
  402bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402bca:	bc08      	pop	{r3}
  402bcc:	469e      	mov	lr, r3
  402bce:	4770      	bx	lr

00402bd0 <__fini_array_start>:
  402bd0:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <usart_options.8376>:
20000010:	2580 0000 00c0 0000 0800 0000 0000 0000     .%..............

20000020 <_impure_ptr>:
20000020:	0028 2000 0000 0000                         (.. ....

20000028 <impure_data>:
20000028:	0000 0000 0314 2000 037c 2000 03e4 2000     ....... |.. ... 
	...
200000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000450 <__atexit_recursive_mutex>:
20000450:	093c 2000                                   <.. 

20000454 <__malloc_av_>:
	...
2000045c:	0454 2000 0454 2000 045c 2000 045c 2000     T.. T.. \.. \.. 
2000046c:	0464 2000 0464 2000 046c 2000 046c 2000     d.. d.. l.. l.. 
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 
2000084c:	0844 2000 0844 2000 084c 2000 084c 2000     D.. D.. L.. L.. 

2000085c <__malloc_sbrk_base>:
2000085c:	ffff ffff                                   ....

20000860 <__malloc_trim_threshold>:
20000860:	0000 0002                                   ....
