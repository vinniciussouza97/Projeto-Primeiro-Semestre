
ADC_ADC_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ea0  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404ea0  00404ea0  00014ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20000000  00404ea8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000114  200009b8  00405860  000209b8  2**2
                  ALLOC
  4 .stack        00003004  20000acc  00405974  000209b8  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209e2  2**0
                  CONTENTS, READONLY
  7 .debug_info   000157b9  00000000  00000000  00020a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002ce7  00000000  00000000  000361f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005713  00000000  00000000  00038edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c48  00000000  00000000  0003e5ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000be0  00000000  00000000  0003f236  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001472e  00000000  00000000  0003fe16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c457  00000000  00000000  00054544  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054924  00000000  00000000  0006099b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002730  00000000  00000000  000b52c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 3a 00 20 41 16 40 00 3d 16 40 00 3d 16 40 00     .:. A.@.=.@.=.@.
  400010:	3d 16 40 00 3d 16 40 00 3d 16 40 00 00 00 00 00     =.@.=.@.=.@.....
	...
  40002c:	3d 16 40 00 3d 16 40 00 00 00 00 00 3d 16 40 00     =.@.=.@.....=.@.
  40003c:	b5 06 40 00 3d 16 40 00 3d 16 40 00 3d 16 40 00     ..@.=.@.=.@.=.@.
  40004c:	3d 16 40 00 3d 16 40 00 3d 16 40 00 3d 16 40 00     =.@.=.@.=.@.=.@.
  40005c:	3d 16 40 00 3d 16 40 00 3d 16 40 00 00 00 00 00     =.@.=.@.=.@.....
  40006c:	79 11 40 00 8d 11 40 00 a1 11 40 00 3d 16 40 00     y.@...@...@.=.@.
  40007c:	3d 16 40 00 00 00 00 00 00 00 00 00 3d 16 40 00     =.@.........=.@.
  40008c:	3d 16 40 00 3d 16 40 00 3d 16 40 00 3d 16 40 00     =.@.=.@.=.@.=.@.
  40009c:	3d 16 40 00 3d 16 40 00 3d 16 40 00 3d 16 40 00     =.@.=.@.=.@.=.@.
  4000ac:	3d 16 40 00 3d 16 40 00 c5 06 40 00 3d 16 40 00     =.@.=.@...@.=.@.
  4000bc:	3d 16 40 00 3d 16 40 00 3d 16 40 00 3d 16 40 00     =.@.=.@.=.@.=.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009b8 	.word	0x200009b8
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00404ea8 	.word	0x00404ea8

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00404ea8 	.word	0x00404ea8
  40012c:	200009bc 	.word	0x200009bc
  400130:	00404ea8 	.word	0x00404ea8
  400134:	00000000 	.word	0x00000000

00400138 <display_menu>:

/**
 * \brief Display ADC configuration menu.
 */
static void display_menu(void)
{
  400138:	b510      	push	{r4, lr}
	uint8_t uc_char;

	puts(MENU_HEADER);
  40013a:	4836      	ldr	r0, [pc, #216]	; (400214 <display_menu+0xdc>)
  40013c:	4b36      	ldr	r3, [pc, #216]	; (400218 <display_menu+0xe0>)
  40013e:	4798      	blx	r3
	uc_char = (g_adc_test_mode.uc_trigger_mode ==
  400140:	4b36      	ldr	r3, [pc, #216]	; (40021c <display_menu+0xe4>)
  400142:	781b      	ldrb	r3, [r3, #0]
  400144:	2b00      	cmp	r3, #0
			TRIGGER_MODE_SOFTWARE) ? 'X' : ' ';
	printf("[%c] 0: Set ADC trigger mode: Software.\n\r", uc_char);
  400146:	bf0c      	ite	eq
  400148:	2158      	moveq	r1, #88	; 0x58
  40014a:	2120      	movne	r1, #32
  40014c:	4834      	ldr	r0, [pc, #208]	; (400220 <display_menu+0xe8>)
  40014e:	4b35      	ldr	r3, [pc, #212]	; (400224 <display_menu+0xec>)
  400150:	4798      	blx	r3
	uc_char = (g_adc_test_mode.uc_trigger_mode == TRIGGER_MODE_ADTRG) ? 'X' : ' ';
  400152:	4b32      	ldr	r3, [pc, #200]	; (40021c <display_menu+0xe4>)
  400154:	781b      	ldrb	r3, [r3, #0]
  400156:	2b01      	cmp	r3, #1
	printf("[%c] 1: Set ADC trigger mode: ADTRG.\n\r", uc_char);
  400158:	bf0c      	ite	eq
  40015a:	2158      	moveq	r1, #88	; 0x58
  40015c:	2120      	movne	r1, #32
  40015e:	4832      	ldr	r0, [pc, #200]	; (400228 <display_menu+0xf0>)
  400160:	4b30      	ldr	r3, [pc, #192]	; (400224 <display_menu+0xec>)
  400162:	4798      	blx	r3
	uc_char = (g_adc_test_mode.uc_trigger_mode == TRIGGER_MODE_TIMER) ? 'X' : ' ';
  400164:	4b2d      	ldr	r3, [pc, #180]	; (40021c <display_menu+0xe4>)
  400166:	781b      	ldrb	r3, [r3, #0]
  400168:	2b02      	cmp	r3, #2
	printf("[%c] 2: Set ADC trigger mode: Timer TIOA.\n\r", uc_char);
  40016a:	bf0c      	ite	eq
  40016c:	2158      	moveq	r1, #88	; 0x58
  40016e:	2120      	movne	r1, #32
  400170:	482e      	ldr	r0, [pc, #184]	; (40022c <display_menu+0xf4>)
  400172:	4b2c      	ldr	r3, [pc, #176]	; (400224 <display_menu+0xec>)
  400174:	4798      	blx	r3
#if SAM3S || SAM3U || SAM3XA || SAM4S
	uc_char = (g_adc_test_mode.uc_trigger_mode == TRIGGER_MODE_PWM) ? 'X' : ' ';
  400176:	4b29      	ldr	r3, [pc, #164]	; (40021c <display_menu+0xe4>)
  400178:	781b      	ldrb	r3, [r3, #0]
  40017a:	2b03      	cmp	r3, #3
	printf("[%c] 3: Set ADC trigger mode: PWM Event Line.\n\r", uc_char);
  40017c:	bf0c      	ite	eq
  40017e:	2158      	moveq	r1, #88	; 0x58
  400180:	2120      	movne	r1, #32
  400182:	482b      	ldr	r0, [pc, #172]	; (400230 <display_menu+0xf8>)
  400184:	4b27      	ldr	r3, [pc, #156]	; (400224 <display_menu+0xec>)
  400186:	4798      	blx	r3
#endif
#if SAM3S || SAM3N || SAM3XA || SAM4S || SAM4C
	uc_char = (g_adc_test_mode.uc_trigger_mode ==
  400188:	4b24      	ldr	r3, [pc, #144]	; (40021c <display_menu+0xe4>)
  40018a:	781b      	ldrb	r3, [r3, #0]
  40018c:	2b04      	cmp	r3, #4
			TRIGGER_MODE_FREERUN) ? 'X' : ' ';
	printf("[%c] 4: Set ADC trigger mode: Free run mode.\n\r", uc_char);
  40018e:	bf0c      	ite	eq
  400190:	2158      	moveq	r1, #88	; 0x58
  400192:	2120      	movne	r1, #32
  400194:	4827      	ldr	r0, [pc, #156]	; (400234 <display_menu+0xfc>)
  400196:	4b23      	ldr	r3, [pc, #140]	; (400224 <display_menu+0xec>)
  400198:	4798      	blx	r3
#endif
	uc_char = (g_adc_test_mode.uc_pdc_en) ? 'E' : 'D';
  40019a:	4b20      	ldr	r3, [pc, #128]	; (40021c <display_menu+0xe4>)
  40019c:	785b      	ldrb	r3, [r3, #1]
  40019e:	2b00      	cmp	r3, #0
	printf("[%c] T: Enable/Disable to transfer with PDC.\n\r", uc_char);
  4001a0:	bf14      	ite	ne
  4001a2:	2145      	movne	r1, #69	; 0x45
  4001a4:	2144      	moveq	r1, #68	; 0x44
  4001a6:	4824      	ldr	r0, [pc, #144]	; (400238 <display_menu+0x100>)
  4001a8:	4b1e      	ldr	r3, [pc, #120]	; (400224 <display_menu+0xec>)
  4001aa:	4798      	blx	r3
#if SAM3S || SAM3N || SAM3XA || SAM4S || SAM4C
	uc_char = (g_adc_test_mode.uc_sequence_en) ? 'E' : 'D';
  4001ac:	4b1b      	ldr	r3, [pc, #108]	; (40021c <display_menu+0xe4>)
  4001ae:	789b      	ldrb	r3, [r3, #2]
  4001b0:	2b00      	cmp	r3, #0
	printf("[%c] S: Enable/Disable to use user sequence mode.\n\r", uc_char);
  4001b2:	bf14      	ite	ne
  4001b4:	2145      	movne	r1, #69	; 0x45
  4001b6:	2144      	moveq	r1, #68	; 0x44
  4001b8:	4820      	ldr	r0, [pc, #128]	; (40023c <display_menu+0x104>)
  4001ba:	4b1a      	ldr	r3, [pc, #104]	; (400224 <display_menu+0xec>)
  4001bc:	4798      	blx	r3
#endif
#if  SAM3S8 || SAM3SD8 || SAM4S || SAM3N || SAM3U || SAM4C
	uc_char = (g_adc_test_mode.uc_power_save_en) ? 'E' : 'D';
  4001be:	4b17      	ldr	r3, [pc, #92]	; (40021c <display_menu+0xe4>)
  4001c0:	795b      	ldrb	r3, [r3, #5]
  4001c2:	2b00      	cmp	r3, #0
	printf("[%c] P: Enable/Disable ADC power save mode.\n\r", uc_char);
  4001c4:	bf14      	ite	ne
  4001c6:	2145      	movne	r1, #69	; 0x45
  4001c8:	2144      	moveq	r1, #68	; 0x44
  4001ca:	481d      	ldr	r0, [pc, #116]	; (400240 <display_menu+0x108>)
  4001cc:	4b15      	ldr	r3, [pc, #84]	; (400224 <display_menu+0xec>)
  4001ce:	4798      	blx	r3
#endif
#if SAM3S || SAM3U || SAM3XA || SAM4S
	uc_char = (g_adc_test_mode.uc_gain_en) ? 'E' : 'D';
  4001d0:	4b12      	ldr	r3, [pc, #72]	; (40021c <display_menu+0xe4>)
  4001d2:	78db      	ldrb	r3, [r3, #3]
  4001d4:	2b00      	cmp	r3, #0
	printf("[%c] G: Enable/Disable to set gain=2 for potentiometer channel.\n\r",
  4001d6:	bf14      	ite	ne
  4001d8:	2145      	movne	r1, #69	; 0x45
  4001da:	2144      	moveq	r1, #68	; 0x44
  4001dc:	4819      	ldr	r0, [pc, #100]	; (400244 <display_menu+0x10c>)
  4001de:	4b11      	ldr	r3, [pc, #68]	; (400224 <display_menu+0xec>)
  4001e0:	4798      	blx	r3
		uc_char);
	uc_char = (g_adc_test_mode.uc_offset_en) ? 'E' : 'D';
  4001e2:	4b0e      	ldr	r3, [pc, #56]	; (40021c <display_menu+0xe4>)
  4001e4:	791b      	ldrb	r3, [r3, #4]
  4001e6:	2b00      	cmp	r3, #0
	printf("[%c] O: Enable/Disable offset for potentiometer channel.\n\r",
  4001e8:	bf14      	ite	ne
  4001ea:	2145      	movne	r1, #69	; 0x45
  4001ec:	2144      	moveq	r1, #68	; 0x44
  4001ee:	4816      	ldr	r0, [pc, #88]	; (400248 <display_menu+0x110>)
  4001f0:	4b0c      	ldr	r3, [pc, #48]	; (400224 <display_menu+0xec>)
  4001f2:	4798      	blx	r3
			uc_char);
#endif
#if  SAM3S8 || SAM3SD8 || SAM4S
	uc_char = (g_adc_test_mode.uc_auto_calib_en) ? 'E' : 'D';
  4001f4:	4b09      	ldr	r3, [pc, #36]	; (40021c <display_menu+0xe4>)
  4001f6:	799b      	ldrb	r3, [r3, #6]
  4001f8:	2b00      	cmp	r3, #0
	printf("[%c] C: Enable Auto Calibration Mode.\n\r", uc_char);
  4001fa:	bf14      	ite	ne
  4001fc:	2145      	movne	r1, #69	; 0x45
  4001fe:	2144      	moveq	r1, #68	; 0x44
  400200:	4812      	ldr	r0, [pc, #72]	; (40024c <display_menu+0x114>)
  400202:	4b08      	ldr	r3, [pc, #32]	; (400224 <display_menu+0xec>)
  400204:	4798      	blx	r3
#endif
	puts("    Q: Quit configuration and start ADC.\r");
  400206:	4812      	ldr	r0, [pc, #72]	; (400250 <display_menu+0x118>)
  400208:	4c03      	ldr	r4, [pc, #12]	; (400218 <display_menu+0xe0>)
  40020a:	47a0      	blx	r4
	puts("=========================================================\r");
  40020c:	4811      	ldr	r0, [pc, #68]	; (400254 <display_menu+0x11c>)
  40020e:	47a0      	blx	r4
  400210:	bd10      	pop	{r4, pc}
  400212:	bf00      	nop
  400214:	004048f8 	.word	0x004048f8
  400218:	00401a91 	.word	0x00401a91
  40021c:	20000a84 	.word	0x20000a84
  400220:	0040499c 	.word	0x0040499c
  400224:	00401931 	.word	0x00401931
  400228:	004049c8 	.word	0x004049c8
  40022c:	004049f0 	.word	0x004049f0
  400230:	00404a1c 	.word	0x00404a1c
  400234:	00404a4c 	.word	0x00404a4c
  400238:	00404a7c 	.word	0x00404a7c
  40023c:	00404aac 	.word	0x00404aac
  400240:	00404ae0 	.word	0x00404ae0
  400244:	00404b10 	.word	0x00404b10
  400248:	00404b54 	.word	0x00404b54
  40024c:	00404b90 	.word	0x00404b90
  400250:	00404bb8 	.word	0x00404bb8
  400254:	00404be4 	.word	0x00404be4

00400258 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400258:	b5f0      	push	{r4, r5, r6, r7, lr}
  40025a:	b083      	sub	sp, #12
  40025c:	4605      	mov	r5, r0
  40025e:	460c      	mov	r4, r1
	uint32_t val = 0;
  400260:	2300      	movs	r3, #0
  400262:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400264:	4b18      	ldr	r3, [pc, #96]	; (4002c8 <usart_serial_getchar+0x70>)
  400266:	4298      	cmp	r0, r3
  400268:	d00a      	beq.n	400280 <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40026a:	4b18      	ldr	r3, [pc, #96]	; (4002cc <usart_serial_getchar+0x74>)
  40026c:	4298      	cmp	r0, r3
  40026e:	d00f      	beq.n	400290 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400270:	4b17      	ldr	r3, [pc, #92]	; (4002d0 <usart_serial_getchar+0x78>)
  400272:	4298      	cmp	r0, r3
  400274:	d014      	beq.n	4002a0 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400276:	4b17      	ldr	r3, [pc, #92]	; (4002d4 <usart_serial_getchar+0x7c>)
  400278:	429d      	cmp	r5, r3
  40027a:	d01b      	beq.n	4002b4 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40027c:	b003      	add	sp, #12
  40027e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400280:	461f      	mov	r7, r3
  400282:	4e15      	ldr	r6, [pc, #84]	; (4002d8 <usart_serial_getchar+0x80>)
  400284:	4621      	mov	r1, r4
  400286:	4638      	mov	r0, r7
  400288:	47b0      	blx	r6
  40028a:	2800      	cmp	r0, #0
  40028c:	d1fa      	bne.n	400284 <usart_serial_getchar+0x2c>
  40028e:	e7f2      	b.n	400276 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400290:	461e      	mov	r6, r3
  400292:	4d11      	ldr	r5, [pc, #68]	; (4002d8 <usart_serial_getchar+0x80>)
  400294:	4621      	mov	r1, r4
  400296:	4630      	mov	r0, r6
  400298:	47a8      	blx	r5
  40029a:	2800      	cmp	r0, #0
  40029c:	d1fa      	bne.n	400294 <usart_serial_getchar+0x3c>
  40029e:	e7ed      	b.n	40027c <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  4002a0:	461e      	mov	r6, r3
  4002a2:	4d0e      	ldr	r5, [pc, #56]	; (4002dc <usart_serial_getchar+0x84>)
  4002a4:	a901      	add	r1, sp, #4
  4002a6:	4630      	mov	r0, r6
  4002a8:	47a8      	blx	r5
  4002aa:	2800      	cmp	r0, #0
  4002ac:	d1fa      	bne.n	4002a4 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  4002ae:	9b01      	ldr	r3, [sp, #4]
  4002b0:	7023      	strb	r3, [r4, #0]
  4002b2:	e7e3      	b.n	40027c <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  4002b4:	461e      	mov	r6, r3
  4002b6:	4d09      	ldr	r5, [pc, #36]	; (4002dc <usart_serial_getchar+0x84>)
  4002b8:	a901      	add	r1, sp, #4
  4002ba:	4630      	mov	r0, r6
  4002bc:	47a8      	blx	r5
  4002be:	2800      	cmp	r0, #0
  4002c0:	d1fa      	bne.n	4002b8 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  4002c2:	9b01      	ldr	r3, [sp, #4]
  4002c4:	7023      	strb	r3, [r4, #0]
}
  4002c6:	e7d9      	b.n	40027c <usart_serial_getchar+0x24>
  4002c8:	400e0600 	.word	0x400e0600
  4002cc:	400e0800 	.word	0x400e0800
  4002d0:	40024000 	.word	0x40024000
  4002d4:	40028000 	.word	0x40028000
  4002d8:	004015ff 	.word	0x004015ff
  4002dc:	00401625 	.word	0x00401625

004002e0 <usart_serial_putchar>:
{
  4002e0:	b570      	push	{r4, r5, r6, lr}
  4002e2:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4002e4:	4b18      	ldr	r3, [pc, #96]	; (400348 <usart_serial_putchar+0x68>)
  4002e6:	4298      	cmp	r0, r3
  4002e8:	d00a      	beq.n	400300 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  4002ea:	4b18      	ldr	r3, [pc, #96]	; (40034c <usart_serial_putchar+0x6c>)
  4002ec:	4298      	cmp	r0, r3
  4002ee:	d010      	beq.n	400312 <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  4002f0:	4b17      	ldr	r3, [pc, #92]	; (400350 <usart_serial_putchar+0x70>)
  4002f2:	4298      	cmp	r0, r3
  4002f4:	d016      	beq.n	400324 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  4002f6:	4b17      	ldr	r3, [pc, #92]	; (400354 <usart_serial_putchar+0x74>)
  4002f8:	4298      	cmp	r0, r3
  4002fa:	d01c      	beq.n	400336 <usart_serial_putchar+0x56>
	return 0;
  4002fc:	2000      	movs	r0, #0
}
  4002fe:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400300:	461e      	mov	r6, r3
  400302:	4d15      	ldr	r5, [pc, #84]	; (400358 <usart_serial_putchar+0x78>)
  400304:	4621      	mov	r1, r4
  400306:	4630      	mov	r0, r6
  400308:	47a8      	blx	r5
  40030a:	2800      	cmp	r0, #0
  40030c:	d1fa      	bne.n	400304 <usart_serial_putchar+0x24>
		return 1;
  40030e:	2001      	movs	r0, #1
  400310:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400312:	461e      	mov	r6, r3
  400314:	4d10      	ldr	r5, [pc, #64]	; (400358 <usart_serial_putchar+0x78>)
  400316:	4621      	mov	r1, r4
  400318:	4630      	mov	r0, r6
  40031a:	47a8      	blx	r5
  40031c:	2800      	cmp	r0, #0
  40031e:	d1fa      	bne.n	400316 <usart_serial_putchar+0x36>
		return 1;
  400320:	2001      	movs	r0, #1
  400322:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400324:	461e      	mov	r6, r3
  400326:	4d0d      	ldr	r5, [pc, #52]	; (40035c <usart_serial_putchar+0x7c>)
  400328:	4621      	mov	r1, r4
  40032a:	4630      	mov	r0, r6
  40032c:	47a8      	blx	r5
  40032e:	2800      	cmp	r0, #0
  400330:	d1fa      	bne.n	400328 <usart_serial_putchar+0x48>
		return 1;
  400332:	2001      	movs	r0, #1
  400334:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400336:	461e      	mov	r6, r3
  400338:	4d08      	ldr	r5, [pc, #32]	; (40035c <usart_serial_putchar+0x7c>)
  40033a:	4621      	mov	r1, r4
  40033c:	4630      	mov	r0, r6
  40033e:	47a8      	blx	r5
  400340:	2800      	cmp	r0, #0
  400342:	d1fa      	bne.n	40033a <usart_serial_putchar+0x5a>
		return 1;
  400344:	2001      	movs	r0, #1
  400346:	bd70      	pop	{r4, r5, r6, pc}
  400348:	400e0600 	.word	0x400e0600
  40034c:	400e0800 	.word	0x400e0800
  400350:	40024000 	.word	0x40024000
  400354:	40028000 	.word	0x40028000
  400358:	004015ef 	.word	0x004015ef
  40035c:	00401611 	.word	0x00401611

00400360 <start_adc>:
/**
 * \brief Start ADC sample.
 * Initialize ADC, set clock and timing, and set ADC to given mode.
 */
static void start_adc(void)
{
  400360:	b5f0      	push	{r4, r5, r6, r7, lr}
  400362:	b099      	sub	sp, #100	; 0x64
	/* Enable peripheral clock. */
#if SAM3S || SAM3N || SAM3XA || SAM4S || SAM4C
	uint32_t i;
	pmc_enable_periph_clk(ID_ADC);
  400364:	201d      	movs	r0, #29
  400366:	4b83      	ldr	r3, [pc, #524]	; (400574 <start_adc+0x214>)
  400368:	4798      	blx	r3
#if SAM3S || SAM3N || SAM3XA || SAM4S || SAM4C
	/* Formula:
	 *     Startup  Time = startup value / ADCClock
	 *     Startup time = 64 / 6.4MHz = 10 us
	 */
	adc_init(ADC, sysclk_get_cpu_hz(), 6400000, ADC_STARTUP_TIME_4);
  40036a:	4c83      	ldr	r4, [pc, #524]	; (400578 <start_adc+0x218>)
  40036c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400370:	4a82      	ldr	r2, [pc, #520]	; (40057c <start_adc+0x21c>)
  400372:	4983      	ldr	r1, [pc, #524]	; (400580 <start_adc+0x220>)
  400374:	4620      	mov	r0, r4
  400376:	4d83      	ldr	r5, [pc, #524]	; (400584 <start_adc+0x224>)
  400378:	47a8      	blx	r5
	 */
	adc_init(ADC, sysclk_get_cpu_hz(), 3200000, STARTUP_TIME);
#endif
#endif

	memset((void *)&g_adc_sample_data, 0, sizeof(g_adc_sample_data));
  40037a:	4b83      	ldr	r3, [pc, #524]	; (400588 <start_adc+0x228>)
  40037c:	2200      	movs	r2, #0
  40037e:	601a      	str	r2, [r3, #0]
  400380:	605a      	str	r2, [r3, #4]
	 *
	 *     Transfer Time = (1 * 2 + 3) / 6.4MHz = 781 ns
	 *     Tracking Time = (1 + 1) / 6.4MHz = 312 ns
	 *     Settling Time = 3 / 6.4MHz = 469 ns
	 */
	adc_configure_timing(ADC, TRACKING_TIME, ADC_SETTLING_TIME_3, TRANSFER_PERIOD);
  400382:	2301      	movs	r3, #1
  400384:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
  400388:	4619      	mov	r1, r3
  40038a:	4620      	mov	r0, r4
  40038c:	4d7f      	ldr	r5, [pc, #508]	; (40058c <start_adc+0x22c>)
  40038e:	47a8      	blx	r5
#endif
#endif

#if SAM3S || SAM3N || SAM3XA || SAM4S || SAM4C
	/* Enable channel number tag. */
	adc_enable_tag(ADC);
  400390:	4620      	mov	r0, r4
  400392:	4b7f      	ldr	r3, [pc, #508]	; (400590 <start_adc+0x230>)
  400394:	4798      	blx	r3
	/* Enable/disable sequencer. */
	if (g_adc_test_mode.uc_sequence_en) {
  400396:	4b7f      	ldr	r3, [pc, #508]	; (400594 <start_adc+0x234>)
  400398:	789b      	ldrb	r3, [r3, #2]
  40039a:	2b00      	cmp	r3, #0
  40039c:	d06c      	beq.n	400478 <start_adc+0x118>
		/* Set user defined channel sequence. */
		adc_configure_sequence(ADC, ch_list, 2);
  40039e:	4d7e      	ldr	r5, [pc, #504]	; (400598 <start_adc+0x238>)
  4003a0:	2202      	movs	r2, #2
  4003a2:	4629      	mov	r1, r5
  4003a4:	4620      	mov	r0, r4
  4003a6:	4b7d      	ldr	r3, [pc, #500]	; (40059c <start_adc+0x23c>)
  4003a8:	4798      	blx	r3

		/* Enable sequencer. */
		adc_start_sequencer(ADC);
  4003aa:	4620      	mov	r0, r4
  4003ac:	4b7c      	ldr	r3, [pc, #496]	; (4005a0 <start_adc+0x240>)
  4003ae:	4798      	blx	r3

		/* Enable channels. */
		for (i = 0; i < 2; i++) {
			adc_enable_channel(ADC, (enum adc_channel_num_t)i);
  4003b0:	2100      	movs	r1, #0
  4003b2:	4620      	mov	r0, r4
  4003b4:	4e7b      	ldr	r6, [pc, #492]	; (4005a4 <start_adc+0x244>)
  4003b6:	47b0      	blx	r6
  4003b8:	2101      	movs	r1, #1
  4003ba:	4620      	mov	r0, r4
  4003bc:	47b0      	blx	r6
		}
		/* Update channel number. */
		g_adc_sample_data.uc_ch_num[0] = ch_list[0];
  4003be:	4b72      	ldr	r3, [pc, #456]	; (400588 <start_adc+0x228>)
  4003c0:	782a      	ldrb	r2, [r5, #0]
  4003c2:	701a      	strb	r2, [r3, #0]
		g_adc_sample_data.uc_ch_num[1] = ch_list[1];
  4003c4:	786a      	ldrb	r2, [r5, #1]
  4003c6:	705a      	strb	r2, [r3, #1]
	g_adc_sample_data.uc_ch_num[1] = ADC_CHANNEL_POTENTIOMETER;
#endif

#if SAM3S ||  SAM3XA || SAM4S || SAM4C
	/* Enable the temperature sensor. */
	adc_enable_ts(ADC);
  4003c8:	4c6b      	ldr	r4, [pc, #428]	; (400578 <start_adc+0x218>)
  4003ca:	4620      	mov	r0, r4
  4003cc:	4b76      	ldr	r3, [pc, #472]	; (4005a8 <start_adc+0x248>)
  4003ce:	4798      	blx	r3
#endif
	/* Set gain and offset (only single ended mode used here). */
#if SAM3S || SAM3XA || SAM4S
	adc_disable_anch(ADC); /* Disable analog change. */
  4003d0:	4620      	mov	r0, r4
  4003d2:	4b76      	ldr	r3, [pc, #472]	; (4005ac <start_adc+0x24c>)
  4003d4:	4798      	blx	r3
#endif
	if (g_adc_test_mode.uc_gain_en) {
  4003d6:	4b6f      	ldr	r3, [pc, #444]	; (400594 <start_adc+0x234>)
  4003d8:	78db      	ldrb	r3, [r3, #3]
  4003da:	2b00      	cmp	r3, #0
  4003dc:	d05d      	beq.n	40049a <start_adc+0x13a>
#if SAM3S || SAM3XA || SAM4S
		adc_enable_anch(ADC);
  4003de:	4620      	mov	r0, r4
  4003e0:	4b73      	ldr	r3, [pc, #460]	; (4005b0 <start_adc+0x250>)
  4003e2:	4798      	blx	r3
		/* gain = 2 */
		adc_set_channel_input_gain(ADC, ADC_CHANNEL_POTENTIOMETER, ADC_GAINVALUE_2);
  4003e4:	2202      	movs	r2, #2
  4003e6:	2105      	movs	r1, #5
  4003e8:	4620      	mov	r0, r4
  4003ea:	4b72      	ldr	r3, [pc, #456]	; (4005b4 <start_adc+0x254>)
  4003ec:	4798      	blx	r3
		adc12b_set_input_gain(ADC12B, ADC_GAINVALUE_0);
#endif
#endif
	}

	if (g_adc_test_mode.uc_offset_en) {
  4003ee:	4b69      	ldr	r3, [pc, #420]	; (400594 <start_adc+0x234>)
  4003f0:	791b      	ldrb	r3, [r3, #4]
  4003f2:	2b00      	cmp	r3, #0
  4003f4:	d057      	beq.n	4004a6 <start_adc+0x146>
#if SAM3S || SAM3XA || SAM4S
		adc_enable_anch(ADC);
  4003f6:	4c60      	ldr	r4, [pc, #384]	; (400578 <start_adc+0x218>)
  4003f8:	4620      	mov	r0, r4
  4003fa:	4b6d      	ldr	r3, [pc, #436]	; (4005b0 <start_adc+0x250>)
  4003fc:	4798      	blx	r3
		adc_enable_channel_input_offset(ADC, ADC_CHANNEL_POTENTIOMETER);
  4003fe:	2105      	movs	r1, #5
  400400:	4620      	mov	r0, r4
  400402:	4b6d      	ldr	r3, [pc, #436]	; (4005b8 <start_adc+0x258>)
  400404:	4798      	blx	r3
#endif
#endif
	}
	/* Set Auto Calibration Mode. */
#if  SAM3S8 || SAM3SD8 || SAM4S
	if (g_adc_test_mode.uc_auto_calib_en) {
  400406:	4b63      	ldr	r3, [pc, #396]	; (400594 <start_adc+0x234>)
  400408:	799b      	ldrb	r3, [r3, #6]
  40040a:	2b00      	cmp	r3, #0
  40040c:	d150      	bne.n	4004b0 <start_adc+0x150>
	}
#endif

#if SAM3S8 || SAM4S || SAM3N || SAM3SD8
	/* Set power save. */
	if (g_adc_test_mode.uc_power_save_en) {
  40040e:	4b61      	ldr	r3, [pc, #388]	; (400594 <start_adc+0x234>)
  400410:	795b      	ldrb	r3, [r3, #5]
  400412:	2b00      	cmp	r3, #0
  400414:	d057      	beq.n	4004c6 <start_adc+0x166>
		adc_configure_power_save(ADC, 1, 0);
  400416:	2200      	movs	r2, #0
  400418:	2101      	movs	r1, #1
  40041a:	4857      	ldr	r0, [pc, #348]	; (400578 <start_adc+0x218>)
  40041c:	4b67      	ldr	r3, [pc, #412]	; (4005bc <start_adc+0x25c>)
  40041e:	4798      	blx	r3
#endif
#endif

#if SAM3S || SAM3N || SAM3XA || SAM4S || SAM4C
	/* Transfer with/without PDC. */
	if (g_adc_test_mode.uc_pdc_en) {
  400420:	4b5c      	ldr	r3, [pc, #368]	; (400594 <start_adc+0x234>)
  400422:	785b      	ldrb	r3, [r3, #1]
  400424:	2b00      	cmp	r3, #0
  400426:	d05f      	beq.n	4004e8 <start_adc+0x188>
	if ((p_adc->ADC_RCR == 0) && (p_adc->ADC_RNCR == 0)) {
  400428:	4b53      	ldr	r3, [pc, #332]	; (400578 <start_adc+0x218>)
  40042a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
  40042e:	b923      	cbnz	r3, 40043a <start_adc+0xda>
  400430:	4b51      	ldr	r3, [pc, #324]	; (400578 <start_adc+0x218>)
  400432:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  400436:	2b00      	cmp	r3, #0
  400438:	d04b      	beq.n	4004d2 <start_adc+0x172>
		if (p_adc->ADC_RNCR == 0) {
  40043a:	4b4f      	ldr	r3, [pc, #316]	; (400578 <start_adc+0x218>)
  40043c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  400440:	b933      	cbnz	r3, 400450 <start_adc+0xf0>
			p_adc->ADC_RNPR = (uint32_t) p_s_buffer;
  400442:	4b4d      	ldr	r3, [pc, #308]	; (400578 <start_adc+0x218>)
  400444:	4a5e      	ldr	r2, [pc, #376]	; (4005c0 <start_adc+0x260>)
  400446:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			p_adc->ADC_RNCR = ul_size;
  40044a:	2202      	movs	r2, #2
  40044c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		adc_read_buffer(ADC, g_adc_sample_data.us_value, BUFFER_SIZE);
		/* Enable PDC channel interrupt. */
		adc_enable_interrupt(ADC, ADC_IER_RXBUFF);
  400450:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400454:	4848      	ldr	r0, [pc, #288]	; (400578 <start_adc+0x218>)
  400456:	4b5b      	ldr	r3, [pc, #364]	; (4005c4 <start_adc+0x264>)
  400458:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40045a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40045e:	4b5a      	ldr	r3, [pc, #360]	; (4005c8 <start_adc+0x268>)
  400460:	601a      	str	r2, [r3, #0]
	/* Enable ADC interrupt. */
	NVIC_EnableIRQ(ADC_IRQn);
#endif
#endif
	/* Configure trigger mode and start convention. */
	switch (g_adc_test_mode.uc_trigger_mode) {
  400462:	4b4c      	ldr	r3, [pc, #304]	; (400594 <start_adc+0x234>)
  400464:	781b      	ldrb	r3, [r3, #0]
  400466:	2b04      	cmp	r3, #4
  400468:	d849      	bhi.n	4004fe <start_adc+0x19e>
  40046a:	e8df f013 	tbh	[pc, r3, lsl #1]
  40046e:	0043      	.short	0x0043
  400470:	0055004a 	.word	0x0055004a
  400474:	010400c3 	.word	0x010400c3
		adc_stop_sequencer(ADC);
  400478:	4c3f      	ldr	r4, [pc, #252]	; (400578 <start_adc+0x218>)
  40047a:	4620      	mov	r0, r4
  40047c:	4b53      	ldr	r3, [pc, #332]	; (4005cc <start_adc+0x26c>)
  40047e:	4798      	blx	r3
		adc_enable_channel(ADC, ADC_CHANNEL_POTENTIOMETER);
  400480:	2105      	movs	r1, #5
  400482:	4620      	mov	r0, r4
  400484:	4d47      	ldr	r5, [pc, #284]	; (4005a4 <start_adc+0x244>)
  400486:	47a8      	blx	r5
		adc_enable_channel(ADC, ADC_TEMPERATURE_SENSOR);
  400488:	210f      	movs	r1, #15
  40048a:	4620      	mov	r0, r4
  40048c:	47a8      	blx	r5
		g_adc_sample_data.uc_ch_num[0] = ADC_CHANNEL_POTENTIOMETER;
  40048e:	4b3e      	ldr	r3, [pc, #248]	; (400588 <start_adc+0x228>)
  400490:	2205      	movs	r2, #5
  400492:	701a      	strb	r2, [r3, #0]
		g_adc_sample_data.uc_ch_num[1] = ADC_TEMPERATURE_SENSOR;
  400494:	220f      	movs	r2, #15
  400496:	705a      	strb	r2, [r3, #1]
  400498:	e796      	b.n	4003c8 <start_adc+0x68>
		adc_set_channel_input_gain(ADC, ADC_CHANNEL_POTENTIOMETER, ADC_GAINVALUE_0);
  40049a:	2200      	movs	r2, #0
  40049c:	2105      	movs	r1, #5
  40049e:	4836      	ldr	r0, [pc, #216]	; (400578 <start_adc+0x218>)
  4004a0:	4b44      	ldr	r3, [pc, #272]	; (4005b4 <start_adc+0x254>)
  4004a2:	4798      	blx	r3
  4004a4:	e7a3      	b.n	4003ee <start_adc+0x8e>
		adc_disable_channel_input_offset(ADC, ADC_CHANNEL_POTENTIOMETER);
  4004a6:	2105      	movs	r1, #5
  4004a8:	4833      	ldr	r0, [pc, #204]	; (400578 <start_adc+0x218>)
  4004aa:	4b49      	ldr	r3, [pc, #292]	; (4005d0 <start_adc+0x270>)
  4004ac:	4798      	blx	r3
  4004ae:	e7aa      	b.n	400406 <start_adc+0xa6>
		adc_set_calibmode(ADC);
  4004b0:	4831      	ldr	r0, [pc, #196]	; (400578 <start_adc+0x218>)
  4004b2:	4b48      	ldr	r3, [pc, #288]	; (4005d4 <start_adc+0x274>)
  4004b4:	4798      	blx	r3
			if ((adc_get_status(ADC) & ADC_ISR_EOCAL) ==
  4004b6:	4d30      	ldr	r5, [pc, #192]	; (400578 <start_adc+0x218>)
  4004b8:	4c47      	ldr	r4, [pc, #284]	; (4005d8 <start_adc+0x278>)
  4004ba:	4628      	mov	r0, r5
  4004bc:	47a0      	blx	r4
  4004be:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  4004c2:	d0fa      	beq.n	4004ba <start_adc+0x15a>
  4004c4:	e7a3      	b.n	40040e <start_adc+0xae>
		adc_configure_power_save(ADC, 0, 0);;
  4004c6:	2200      	movs	r2, #0
  4004c8:	4611      	mov	r1, r2
  4004ca:	482b      	ldr	r0, [pc, #172]	; (400578 <start_adc+0x218>)
  4004cc:	4b3b      	ldr	r3, [pc, #236]	; (4005bc <start_adc+0x25c>)
  4004ce:	4798      	blx	r3
  4004d0:	e7a6      	b.n	400420 <start_adc+0xc0>
		p_adc->ADC_RPR = (uint32_t) p_s_buffer;
  4004d2:	4b29      	ldr	r3, [pc, #164]	; (400578 <start_adc+0x218>)
  4004d4:	4a3a      	ldr	r2, [pc, #232]	; (4005c0 <start_adc+0x260>)
  4004d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		p_adc->ADC_RCR = ul_size;
  4004da:	2202      	movs	r2, #2
  4004dc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		p_adc->ADC_PTCR = ADC_PTCR_RXTEN;
  4004e0:	2201      	movs	r2, #1
  4004e2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  4004e6:	e7b3      	b.n	400450 <start_adc+0xf0>
		adc_enable_interrupt(ADC, ADC_IER_DRDY);
  4004e8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  4004ec:	4822      	ldr	r0, [pc, #136]	; (400578 <start_adc+0x218>)
  4004ee:	4b35      	ldr	r3, [pc, #212]	; (4005c4 <start_adc+0x264>)
  4004f0:	4798      	blx	r3
  4004f2:	e7b2      	b.n	40045a <start_adc+0xfa>
	case TRIGGER_MODE_SOFTWARE:
#if SAM3S || SAM3N || SAM3XA || SAM4S || SAM4C
		adc_configure_trigger(ADC, ADC_TRIG_SW, 0);	/* Disable hardware trigger. */
  4004f4:	2200      	movs	r2, #0
  4004f6:	4611      	mov	r1, r2
  4004f8:	481f      	ldr	r0, [pc, #124]	; (400578 <start_adc+0x218>)
  4004fa:	4b38      	ldr	r3, [pc, #224]	; (4005dc <start_adc+0x27c>)
  4004fc:	4798      	blx	r3
		break;
#endif
	default:
		break;
	}
}
  4004fe:	b019      	add	sp, #100	; 0x64
  400500:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
  400502:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400506:	2008      	movs	r0, #8
  400508:	4b35      	ldr	r3, [pc, #212]	; (4005e0 <start_adc+0x280>)
  40050a:	4798      	blx	r3
		adc_configure_trigger(ADC, ADC_TRIG_EXT, 0);
  40050c:	2200      	movs	r2, #0
  40050e:	2101      	movs	r1, #1
  400510:	4819      	ldr	r0, [pc, #100]	; (400578 <start_adc+0x218>)
  400512:	4b32      	ldr	r3, [pc, #200]	; (4005dc <start_adc+0x27c>)
  400514:	4798      	blx	r3
		break;
  400516:	e7f2      	b.n	4004fe <start_adc+0x19e>
	uint32_t ul_div = 0;
  400518:	2400      	movs	r4, #0
  40051a:	9406      	str	r4, [sp, #24]
	uint32_t ul_tc_clks = 0;
  40051c:	ae18      	add	r6, sp, #96	; 0x60
  40051e:	f846 4d28 	str.w	r4, [r6, #-40]!
	pmc_enable_periph_clk(ID_TC0);
  400522:	2017      	movs	r0, #23
  400524:	4b13      	ldr	r3, [pc, #76]	; (400574 <start_adc+0x214>)
  400526:	4798      	blx	r3
	gpio_configure_pin(PIN_TC0_TIOA0, PIN_TC0_TIOA0_FLAGS);
  400528:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40052c:	4620      	mov	r0, r4
  40052e:	4b2c      	ldr	r3, [pc, #176]	; (4005e0 <start_adc+0x280>)
  400530:	4798      	blx	r3
	tc_find_mck_divisor(1, ul_sysclk, &ul_div, &ul_tc_clks, ul_sysclk);
  400532:	4d13      	ldr	r5, [pc, #76]	; (400580 <start_adc+0x220>)
  400534:	9500      	str	r5, [sp, #0]
  400536:	4633      	mov	r3, r6
  400538:	aa06      	add	r2, sp, #24
  40053a:	4629      	mov	r1, r5
  40053c:	2001      	movs	r0, #1
  40053e:	4e29      	ldr	r6, [pc, #164]	; (4005e4 <start_adc+0x284>)
  400540:	47b0      	blx	r6
	tc_init(TC0, 0, ul_tc_clks | TC_CMR_CPCTRG | TC_CMR_WAVE |
  400542:	4e29      	ldr	r6, [pc, #164]	; (4005e8 <start_adc+0x288>)
  400544:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  400546:	f442 22d8 	orr.w	r2, r2, #442368	; 0x6c000
  40054a:	4621      	mov	r1, r4
  40054c:	4630      	mov	r0, r6
  40054e:	4b27      	ldr	r3, [pc, #156]	; (4005ec <start_adc+0x28c>)
  400550:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_RA = (ul_sysclk / ul_div) / 2;
  400552:	9b06      	ldr	r3, [sp, #24]
  400554:	fbb5 f5f3 	udiv	r5, r5, r3
  400558:	086b      	lsrs	r3, r5, #1
  40055a:	6173      	str	r3, [r6, #20]
	TC0->TC_CHANNEL[0].TC_RC = (ul_sysclk / ul_div) / 1;
  40055c:	61f5      	str	r5, [r6, #28]
	tc_start(TC0, 0);
  40055e:	4621      	mov	r1, r4
  400560:	4630      	mov	r0, r6
  400562:	4b23      	ldr	r3, [pc, #140]	; (4005f0 <start_adc+0x290>)
  400564:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_TIO_CH_0, 0);
  400566:	4622      	mov	r2, r4
  400568:	2103      	movs	r1, #3
  40056a:	4803      	ldr	r0, [pc, #12]	; (400578 <start_adc+0x218>)
  40056c:	4b1b      	ldr	r3, [pc, #108]	; (4005dc <start_adc+0x27c>)
  40056e:	4798      	blx	r3
  400570:	e7c5      	b.n	4004fe <start_adc+0x19e>
  400572:	bf00      	nop
  400574:	0040129d 	.word	0x0040129d
  400578:	40038000 	.word	0x40038000
  40057c:	0061a800 	.word	0x0061a800
  400580:	07270e00 	.word	0x07270e00
  400584:	00400cad 	.word	0x00400cad
  400588:	20000a8c 	.word	0x20000a8c
  40058c:	00400d67 	.word	0x00400d67
  400590:	00400dab 	.word	0x00400dab
  400594:	20000a84 	.word	0x20000a84
  400598:	20000000 	.word	0x20000000
  40059c:	00400d05 	.word	0x00400d05
  4005a0:	00400db5 	.word	0x00400db5
  4005a4:	00400d9d 	.word	0x00400d9d
  4005a8:	00400e19 	.word	0x00400e19
  4005ac:	00400d8d 	.word	0x00400d8d
  4005b0:	00400d83 	.word	0x00400d83
  4005b4:	00400df3 	.word	0x00400df3
  4005b8:	00400dc9 	.word	0x00400dc9
  4005bc:	00400cef 	.word	0x00400cef
  4005c0:	20000a8e 	.word	0x20000a8e
  4005c4:	00400e0d 	.word	0x00400e0d
  4005c8:	e000e100 	.word	0xe000e100
  4005cc:	00400dbf 	.word	0x00400dbf
  4005d0:	00400dd7 	.word	0x00400dd7
  4005d4:	00400e03 	.word	0x00400e03
  4005d8:	00400e15 	.word	0x00400e15
  4005dc:	00400ce1 	.word	0x00400ce1
  4005e0:	00400f19 	.word	0x00400f19
  4005e4:	00401549 	.word	0x00401549
  4005e8:	40010000 	.word	0x40010000
  4005ec:	00401529 	.word	0x00401529
  4005f0:	00401541 	.word	0x00401541
	pmc_enable_periph_clk(ID_PWM);
  4005f4:	201f      	movs	r0, #31
  4005f6:	4b23      	ldr	r3, [pc, #140]	; (400684 <start_adc+0x324>)
  4005f8:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL_0);
  4005fa:	4d23      	ldr	r5, [pc, #140]	; (400688 <start_adc+0x328>)
  4005fc:	2100      	movs	r1, #0
  4005fe:	4628      	mov	r0, r5
  400600:	4b22      	ldr	r3, [pc, #136]	; (40068c <start_adc+0x32c>)
  400602:	4798      	blx	r3
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
  400604:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400608:	2052      	movs	r0, #82	; 0x52
  40060a:	4b21      	ldr	r3, [pc, #132]	; (400690 <start_adc+0x330>)
  40060c:	4798      	blx	r3
	pwm_clock_t pwm_clock_setting = {
  40060e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  400612:	9303      	str	r3, [sp, #12]
  400614:	2400      	movs	r4, #0
  400616:	9404      	str	r4, [sp, #16]
  400618:	4b1e      	ldr	r3, [pc, #120]	; (400694 <start_adc+0x334>)
  40061a:	9305      	str	r3, [sp, #20]
	pwm_init(PWM, &pwm_clock_setting);
  40061c:	a903      	add	r1, sp, #12
  40061e:	4628      	mov	r0, r5
  400620:	4b1d      	ldr	r3, [pc, #116]	; (400698 <start_adc+0x338>)
  400622:	4798      	blx	r3
		pwm_channel_t pwm_trigger_channel = {
  400624:	2228      	movs	r2, #40	; 0x28
  400626:	4621      	mov	r1, r4
  400628:	a80e      	add	r0, sp, #56	; 0x38
  40062a:	4f1c      	ldr	r7, [pc, #112]	; (40069c <start_adc+0x33c>)
  40062c:	47b8      	blx	r7
  40062e:	230b      	movs	r3, #11
  400630:	930f      	str	r3, [sp, #60]	; 0x3c
  400632:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
  400636:	9611      	str	r6, [sp, #68]	; 0x44
  400638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  40063c:	9312      	str	r3, [sp, #72]	; 0x48
	pwm_channel_init(PWM, &pwm_trigger_channel);
  40063e:	a90e      	add	r1, sp, #56	; 0x38
  400640:	4628      	mov	r0, r5
  400642:	4b17      	ldr	r3, [pc, #92]	; (4006a0 <start_adc+0x340>)
  400644:	4798      	blx	r3
	pwm_cmp_t pwm_comparison_setting = {
  400646:	2220      	movs	r2, #32
  400648:	4621      	mov	r1, r4
  40064a:	a806      	add	r0, sp, #24
  40064c:	47b8      	blx	r7
  40064e:	2301      	movs	r3, #1
  400650:	f88d 301c 	strb.w	r3, [sp, #28]
  400654:	9608      	str	r6, [sp, #32]
  400656:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	pwm_cmp_init(PWM, &pwm_comparison_setting);
  40065a:	a906      	add	r1, sp, #24
  40065c:	4628      	mov	r0, r5
  40065e:	4b11      	ldr	r3, [pc, #68]	; (4006a4 <start_adc+0x344>)
  400660:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_0);
  400662:	4621      	mov	r1, r4
  400664:	4628      	mov	r0, r5
  400666:	4b10      	ldr	r3, [pc, #64]	; (4006a8 <start_adc+0x348>)
  400668:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_PWM_EVENT_LINE_0, 0);
  40066a:	4622      	mov	r2, r4
  40066c:	2109      	movs	r1, #9
  40066e:	480f      	ldr	r0, [pc, #60]	; (4006ac <start_adc+0x34c>)
  400670:	4b0f      	ldr	r3, [pc, #60]	; (4006b0 <start_adc+0x350>)
  400672:	4798      	blx	r3
  400674:	e743      	b.n	4004fe <start_adc+0x19e>
		adc_configure_trigger(ADC, ADC_TRIG_SW, 1);
  400676:	2201      	movs	r2, #1
  400678:	2100      	movs	r1, #0
  40067a:	480c      	ldr	r0, [pc, #48]	; (4006ac <start_adc+0x34c>)
  40067c:	4b0c      	ldr	r3, [pc, #48]	; (4006b0 <start_adc+0x350>)
  40067e:	4798      	blx	r3
}
  400680:	e73d      	b.n	4004fe <start_adc+0x19e>
  400682:	bf00      	nop
  400684:	0040129d 	.word	0x0040129d
  400688:	40020000 	.word	0x40020000
  40068c:	00401479 	.word	0x00401479
  400690:	00400f19 	.word	0x00400f19
  400694:	07270e00 	.word	0x07270e00
  400698:	00401345 	.word	0x00401345
  40069c:	00401959 	.word	0x00401959
  4006a0:	00401389 	.word	0x00401389
  4006a4:	00401483 	.word	0x00401483
  4006a8:	0040146f 	.word	0x0040146f
  4006ac:	40038000 	.word	0x40038000
  4006b0:	00400ce1 	.word	0x00400ce1

004006b4 <SysTick_Handler>:
/**
 * \brief Systick handler.
 */
void SysTick_Handler(void)
{
	gs_ul_ms_ticks++;
  4006b4:	4a02      	ldr	r2, [pc, #8]	; (4006c0 <SysTick_Handler+0xc>)
  4006b6:	6813      	ldr	r3, [r2, #0]
  4006b8:	3301      	adds	r3, #1
  4006ba:	6013      	str	r3, [r2, #0]
  4006bc:	4770      	bx	lr
  4006be:	bf00      	nop
  4006c0:	200009d4 	.word	0x200009d4

004006c4 <ADC_Handler>:
#if SAM3S || SAM3N || SAM3XA || SAM4S || SAM4C
/**
 * \brief Interrupt handler for the ADC.
 */
void ADC_Handler(void)
{
  4006c4:	b510      	push	{r4, lr}
	uint32_t i;
	uint32_t ul_temp;
	uint8_t uc_ch_num;

	/* With PDC transfer */
	if (g_adc_test_mode.uc_pdc_en) {
  4006c6:	4b2f      	ldr	r3, [pc, #188]	; (400784 <ADC_Handler+0xc0>)
  4006c8:	785b      	ldrb	r3, [r3, #1]
  4006ca:	2b00      	cmp	r3, #0
  4006cc:	d031      	beq.n	400732 <ADC_Handler+0x6e>
		if ((adc_get_status(ADC) & ADC_ISR_RXBUFF) ==
  4006ce:	482e      	ldr	r0, [pc, #184]	; (400788 <ADC_Handler+0xc4>)
  4006d0:	4b2e      	ldr	r3, [pc, #184]	; (40078c <ADC_Handler+0xc8>)
  4006d2:	4798      	blx	r3
  4006d4:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
  4006d8:	d100      	bne.n	4006dc <ADC_Handler+0x18>
  4006da:	bd10      	pop	{r4, pc}
				ADC_ISR_RXBUFF) {
			g_adc_sample_data.us_done = ADC_DONE_MASK;
  4006dc:	2203      	movs	r2, #3
  4006de:	4b2c      	ldr	r3, [pc, #176]	; (400790 <ADC_Handler+0xcc>)
  4006e0:	80da      	strh	r2, [r3, #6]
	if ((p_adc->ADC_RCR == 0) && (p_adc->ADC_RNCR == 0)) {
  4006e2:	4b29      	ldr	r3, [pc, #164]	; (400788 <ADC_Handler+0xc4>)
  4006e4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
  4006e8:	b91b      	cbnz	r3, 4006f2 <ADC_Handler+0x2e>
  4006ea:	4b27      	ldr	r3, [pc, #156]	; (400788 <ADC_Handler+0xc4>)
  4006ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  4006f0:	b1a3      	cbz	r3, 40071c <ADC_Handler+0x58>
		if (p_adc->ADC_RNCR == 0) {
  4006f2:	4b25      	ldr	r3, [pc, #148]	; (400788 <ADC_Handler+0xc4>)
  4006f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  4006f8:	b933      	cbnz	r3, 400708 <ADC_Handler+0x44>
			p_adc->ADC_RNPR = (uint32_t) p_s_buffer;
  4006fa:	4b23      	ldr	r3, [pc, #140]	; (400788 <ADC_Handler+0xc4>)
  4006fc:	4a25      	ldr	r2, [pc, #148]	; (400794 <ADC_Handler+0xd0>)
  4006fe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			p_adc->ADC_RNCR = ul_size;
  400702:	2202      	movs	r2, #2
  400704:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
			adc_read_buffer(ADC, g_adc_sample_data.us_value, BUFFER_SIZE);
			/* Only keep sample value, and discard channel number. */
			for (i = 0; i < NUM_CHANNELS; i++) {
				g_adc_sample_data.us_value[i] &= ADC_LCDR_LDATA_Msk;
  400708:	4b21      	ldr	r3, [pc, #132]	; (400790 <ADC_Handler+0xcc>)
  40070a:	885a      	ldrh	r2, [r3, #2]
  40070c:	f3c2 020b 	ubfx	r2, r2, #0, #12
  400710:	805a      	strh	r2, [r3, #2]
  400712:	889a      	ldrh	r2, [r3, #4]
  400714:	f3c2 020b 	ubfx	r2, r2, #0, #12
  400718:	809a      	strh	r2, [r3, #4]
  40071a:	bd10      	pop	{r4, pc}
		p_adc->ADC_RPR = (uint32_t) p_s_buffer;
  40071c:	4b1a      	ldr	r3, [pc, #104]	; (400788 <ADC_Handler+0xc4>)
  40071e:	4a1d      	ldr	r2, [pc, #116]	; (400794 <ADC_Handler+0xd0>)
  400720:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		p_adc->ADC_RCR = ul_size;
  400724:	2202      	movs	r2, #2
  400726:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		p_adc->ADC_PTCR = ADC_PTCR_RXTEN;
  40072a:	2201      	movs	r2, #1
  40072c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  400730:	e7ea      	b.n	400708 <ADC_Handler+0x44>
			}
		}
	} else {	/* Without PDC transfer */
		if ((adc_get_status(ADC) & ADC_ISR_DRDY) ==
  400732:	4815      	ldr	r0, [pc, #84]	; (400788 <ADC_Handler+0xc4>)
  400734:	4b15      	ldr	r3, [pc, #84]	; (40078c <ADC_Handler+0xc8>)
  400736:	4798      	blx	r3
  400738:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
  40073c:	d0cd      	beq.n	4006da <ADC_Handler+0x16>
				ADC_ISR_DRDY) {
			ul_temp = adc_get_latest_value(ADC);
  40073e:	4812      	ldr	r0, [pc, #72]	; (400788 <ADC_Handler+0xc4>)
  400740:	4b15      	ldr	r3, [pc, #84]	; (400798 <ADC_Handler+0xd4>)
  400742:	4798      	blx	r3
			for (i = 0; i < NUM_CHANNELS; i++) {
				uc_ch_num = (ul_temp & ADC_LCDR_CHNB_Msk) >>
  400744:	f3c0 3303 	ubfx	r3, r0, #12, #4
  400748:	4a11      	ldr	r2, [pc, #68]	; (400790 <ADC_Handler+0xcc>)
  40074a:	88d1      	ldrh	r1, [r2, #6]
						ADC_LCDR_CHNB_Pos;
				if (g_adc_sample_data.uc_ch_num[i] == uc_ch_num) {
  40074c:	7812      	ldrb	r2, [r2, #0]
  40074e:	429a      	cmp	r2, r3
  400750:	d007      	beq.n	400762 <ADC_Handler+0x9e>
  400752:	2400      	movs	r4, #0
  400754:	4a0e      	ldr	r2, [pc, #56]	; (400790 <ADC_Handler+0xcc>)
  400756:	7852      	ldrb	r2, [r2, #1]
  400758:	429a      	cmp	r2, r3
  40075a:	d00a      	beq.n	400772 <ADC_Handler+0xae>
  40075c:	2c00      	cmp	r4, #0
  40075e:	d0bc      	beq.n	4006da <ADC_Handler+0x16>
  400760:	e00d      	b.n	40077e <ADC_Handler+0xba>
					g_adc_sample_data.us_value[i] =
							ul_temp &
  400762:	f3c0 020b 	ubfx	r2, r0, #0, #12
					g_adc_sample_data.us_value[i] =
  400766:	4c0a      	ldr	r4, [pc, #40]	; (400790 <ADC_Handler+0xcc>)
  400768:	8062      	strh	r2, [r4, #2]
							ADC_LCDR_LDATA_Msk;
					g_adc_sample_data.us_done |= 1 << i;
  40076a:	f041 0101 	orr.w	r1, r1, #1
  40076e:	2401      	movs	r4, #1
  400770:	e7f0      	b.n	400754 <ADC_Handler+0x90>
							ul_temp &
  400772:	f3c0 000b 	ubfx	r0, r0, #0, #12
					g_adc_sample_data.us_value[i] =
  400776:	4b06      	ldr	r3, [pc, #24]	; (400790 <ADC_Handler+0xcc>)
  400778:	8098      	strh	r0, [r3, #4]
					g_adc_sample_data.us_done |= 1 << i;
  40077a:	f041 0102 	orr.w	r1, r1, #2
  40077e:	4b04      	ldr	r3, [pc, #16]	; (400790 <ADC_Handler+0xcc>)
  400780:	80d9      	strh	r1, [r3, #6]
				}
			}
		}
	}
}
  400782:	e7aa      	b.n	4006da <ADC_Handler+0x16>
  400784:	20000a84 	.word	0x20000a84
  400788:	40038000 	.word	0x40038000
  40078c:	00400e15 	.word	0x00400e15
  400790:	20000a8c 	.word	0x20000a8c
  400794:	20000a8e 	.word	0x20000a8e
  400798:	00400da7 	.word	0x00400da7

0040079c <main>:
 *  \brief adc12 Application entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  40079c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4007a0:	b085      	sub	sp, #20
	uint32_t i;
	uint8_t uc_key;
	/* Initialize the SAM system. */
	sysclk_init();
  4007a2:	4ba8      	ldr	r3, [pc, #672]	; (400a44 <main+0x2a8>)
  4007a4:	4798      	blx	r3
	board_init();
  4007a6:	4ba8      	ldr	r3, [pc, #672]	; (400a48 <main+0x2ac>)
  4007a8:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4007aa:	2008      	movs	r0, #8
  4007ac:	4da7      	ldr	r5, [pc, #668]	; (400a4c <main+0x2b0>)
  4007ae:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4007b0:	4ca7      	ldr	r4, [pc, #668]	; (400a50 <main+0x2b4>)
  4007b2:	4ba8      	ldr	r3, [pc, #672]	; (400a54 <main+0x2b8>)
  4007b4:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4007b6:	4aa8      	ldr	r2, [pc, #672]	; (400a58 <main+0x2bc>)
  4007b8:	4ba8      	ldr	r3, [pc, #672]	; (400a5c <main+0x2c0>)
  4007ba:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4007bc:	4aa8      	ldr	r2, [pc, #672]	; (400a60 <main+0x2c4>)
  4007be:	4ba9      	ldr	r3, [pc, #676]	; (400a64 <main+0x2c8>)
  4007c0:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4007c2:	4ba9      	ldr	r3, [pc, #676]	; (400a68 <main+0x2cc>)
  4007c4:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
  4007c6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4007ca:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  4007cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007d0:	9302      	str	r3, [sp, #8]
  4007d2:	2008      	movs	r0, #8
  4007d4:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
  4007d6:	4669      	mov	r1, sp
  4007d8:	4620      	mov	r0, r4
  4007da:	4ba4      	ldr	r3, [pc, #656]	; (400a6c <main+0x2d0>)
  4007dc:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4007de:	4da4      	ldr	r5, [pc, #656]	; (400a70 <main+0x2d4>)
  4007e0:	682b      	ldr	r3, [r5, #0]
  4007e2:	2100      	movs	r1, #0
  4007e4:	6898      	ldr	r0, [r3, #8]
  4007e6:	4ca3      	ldr	r4, [pc, #652]	; (400a74 <main+0x2d8>)
  4007e8:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4007ea:	682b      	ldr	r3, [r5, #0]
  4007ec:	2100      	movs	r1, #0
  4007ee:	6858      	ldr	r0, [r3, #4]
  4007f0:	47a0      	blx	r4

	configure_console();

	/* Output example information. */
	puts(STRING_HEADER);
  4007f2:	48a1      	ldr	r0, [pc, #644]	; (400a78 <main+0x2dc>)
  4007f4:	4ca1      	ldr	r4, [pc, #644]	; (400a7c <main+0x2e0>)
  4007f6:	47a0      	blx	r4

	puts("Configure system tick to get 1ms tick period.\r");
  4007f8:	48a1      	ldr	r0, [pc, #644]	; (400a80 <main+0x2e4>)
  4007fa:	47a0      	blx	r4
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4007fc:	4ba1      	ldr	r3, [pc, #644]	; (400a84 <main+0x2e8>)
  4007fe:	4aa2      	ldr	r2, [pc, #648]	; (400a88 <main+0x2ec>)
  400800:	605a      	str	r2, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400802:	21f0      	movs	r1, #240	; 0xf0
  400804:	4aa1      	ldr	r2, [pc, #644]	; (400a8c <main+0x2f0>)
  400806:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  40080a:	2200      	movs	r2, #0
  40080c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  40080e:	2107      	movs	r1, #7
  400810:	6019      	str	r1, [r3, #0]
		puts("-F- Systick configuration error\r");
		while (1);
	}

	/* Set default ADC test mode. */
	memset((void *)&g_adc_test_mode, 0, sizeof(g_adc_test_mode));
  400812:	4b9f      	ldr	r3, [pc, #636]	; (400a90 <main+0x2f4>)
  400814:	601a      	str	r2, [r3, #0]
  400816:	f8c3 2003 	str.w	r2, [r3, #3]
	g_adc_test_mode.uc_trigger_mode = TRIGGER_MODE_SOFTWARE;
	g_adc_test_mode.uc_pdc_en = 1;
  40081a:	2201      	movs	r2, #1
  40081c:	705a      	strb	r2, [r3, #1]
	g_adc_test_mode.uc_sequence_en = 0;
	g_adc_test_mode.uc_gain_en = 0;
	g_adc_test_mode.uc_offset_en = 0;

	display_menu();
  40081e:	4b9d      	ldr	r3, [pc, #628]	; (400a94 <main+0x2f8>)
  400820:	4798      	blx	r3
	start_adc();
  400822:	4b9d      	ldr	r3, [pc, #628]	; (400a98 <main+0x2fc>)
  400824:	4798      	blx	r3

	puts("Press any key to display configuration menu.\r");
  400826:	489d      	ldr	r0, [pc, #628]	; (400a9c <main+0x300>)
  400828:	47a0      	blx	r4
	while (1) {
		/* ADC software trigger per 1s */
		if (g_adc_test_mode.uc_trigger_mode == TRIGGER_MODE_SOFTWARE) {
  40082a:	4e99      	ldr	r6, [pc, #612]	; (400a90 <main+0x2f4>)
#endif
#endif
		}

		/* Check if the user enters a key. */
		if (!uart_read(CONSOLE_UART, &uc_key)) {
  40082c:	4c88      	ldr	r4, [pc, #544]	; (400a50 <main+0x2b4>)
	ul_cur_ticks = gs_ul_ms_ticks;
  40082e:	4f9c      	ldr	r7, [pc, #624]	; (400aa0 <main+0x304>)
		}

		/* Check if ADC sample is done. */
		if (g_adc_sample_data.us_done == ADC_DONE_MASK) {
			for (i = 0; i < NUM_CHANNELS; i++) {
				printf("CH%02d: %04d mv.    ",
  400830:	f8df 8280 	ldr.w	r8, [pc, #640]	; 400ab4 <main+0x318>
  400834:	e14f      	b.n	400ad6 <main+0x33a>
	ul_cur_ticks = gs_ul_ms_ticks;
  400836:	683a      	ldr	r2, [r7, #0]
	while ((gs_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
  400838:	683b      	ldr	r3, [r7, #0]
  40083a:	1a9b      	subs	r3, r3, r2
  40083c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400840:	d3fa      	bcc.n	400838 <main+0x9c>
			adc_start(ADC);
  400842:	4898      	ldr	r0, [pc, #608]	; (400aa4 <main+0x308>)
  400844:	4b98      	ldr	r3, [pc, #608]	; (400aa8 <main+0x30c>)
  400846:	4798      	blx	r3
  400848:	e149      	b.n	400ade <main+0x342>
			g_adc_test_mode.uc_trigger_mode = TRIGGER_MODE_SOFTWARE;
  40084a:	2300      	movs	r3, #0
  40084c:	7033      	strb	r3, [r6, #0]
		display_menu();
  40084e:	4b91      	ldr	r3, [pc, #580]	; (400a94 <main+0x2f8>)
  400850:	4798      	blx	r3
		while (uart_read(CONSOLE_UART, &uc_key));
  400852:	4669      	mov	r1, sp
  400854:	4620      	mov	r0, r4
  400856:	47a8      	blx	r5
  400858:	2800      	cmp	r0, #0
  40085a:	d1fa      	bne.n	400852 <main+0xb6>
		switch (uc_key) {
  40085c:	f89d 3000 	ldrb.w	r3, [sp]
  400860:	3b30      	subs	r3, #48	; 0x30
  400862:	2b44      	cmp	r3, #68	; 0x44
  400864:	d8f3      	bhi.n	40084e <main+0xb2>
  400866:	a201      	add	r2, pc, #4	; (adr r2, 40086c <main+0xd0>)
  400868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40086c:	0040084b 	.word	0x0040084b
  400870:	00400981 	.word	0x00400981
  400874:	00400987 	.word	0x00400987
  400878:	0040098d 	.word	0x0040098d
  40087c:	00400993 	.word	0x00400993
  400880:	0040084f 	.word	0x0040084f
  400884:	0040084f 	.word	0x0040084f
  400888:	0040084f 	.word	0x0040084f
  40088c:	0040084f 	.word	0x0040084f
  400890:	0040084f 	.word	0x0040084f
  400894:	0040084f 	.word	0x0040084f
  400898:	0040084f 	.word	0x0040084f
  40089c:	0040084f 	.word	0x0040084f
  4008a0:	0040084f 	.word	0x0040084f
  4008a4:	0040084f 	.word	0x0040084f
  4008a8:	0040084f 	.word	0x0040084f
  4008ac:	0040084f 	.word	0x0040084f
  4008b0:	0040084f 	.word	0x0040084f
  4008b4:	0040084f 	.word	0x0040084f
  4008b8:	004009e9 	.word	0x004009e9
  4008bc:	0040084f 	.word	0x0040084f
  4008c0:	0040084f 	.word	0x0040084f
  4008c4:	0040084f 	.word	0x0040084f
  4008c8:	004009c9 	.word	0x004009c9
  4008cc:	0040084f 	.word	0x0040084f
  4008d0:	0040084f 	.word	0x0040084f
  4008d4:	0040084f 	.word	0x0040084f
  4008d8:	0040084f 	.word	0x0040084f
  4008dc:	0040084f 	.word	0x0040084f
  4008e0:	0040084f 	.word	0x0040084f
  4008e4:	0040084f 	.word	0x0040084f
  4008e8:	004009d9 	.word	0x004009d9
  4008ec:	004009b9 	.word	0x004009b9
  4008f0:	00400ac1 	.word	0x00400ac1
  4008f4:	0040084f 	.word	0x0040084f
  4008f8:	004009a9 	.word	0x004009a9
  4008fc:	00400999 	.word	0x00400999
  400900:	0040084f 	.word	0x0040084f
  400904:	0040084f 	.word	0x0040084f
  400908:	0040084f 	.word	0x0040084f
  40090c:	0040084f 	.word	0x0040084f
  400910:	0040084f 	.word	0x0040084f
  400914:	0040084f 	.word	0x0040084f
  400918:	0040084f 	.word	0x0040084f
  40091c:	0040084f 	.word	0x0040084f
  400920:	0040084f 	.word	0x0040084f
  400924:	0040084f 	.word	0x0040084f
  400928:	0040084f 	.word	0x0040084f
  40092c:	0040084f 	.word	0x0040084f
  400930:	0040084f 	.word	0x0040084f
  400934:	0040084f 	.word	0x0040084f
  400938:	004009e9 	.word	0x004009e9
  40093c:	0040084f 	.word	0x0040084f
  400940:	0040084f 	.word	0x0040084f
  400944:	0040084f 	.word	0x0040084f
  400948:	004009c9 	.word	0x004009c9
  40094c:	0040084f 	.word	0x0040084f
  400950:	0040084f 	.word	0x0040084f
  400954:	0040084f 	.word	0x0040084f
  400958:	0040084f 	.word	0x0040084f
  40095c:	0040084f 	.word	0x0040084f
  400960:	0040084f 	.word	0x0040084f
  400964:	0040084f 	.word	0x0040084f
  400968:	004009d9 	.word	0x004009d9
  40096c:	004009b9 	.word	0x004009b9
  400970:	00400ac1 	.word	0x00400ac1
  400974:	0040084f 	.word	0x0040084f
  400978:	004009a9 	.word	0x004009a9
  40097c:	00400999 	.word	0x00400999
			g_adc_test_mode.uc_trigger_mode = TRIGGER_MODE_ADTRG;
  400980:	2301      	movs	r3, #1
  400982:	7033      	strb	r3, [r6, #0]
  400984:	e763      	b.n	40084e <main+0xb2>
			g_adc_test_mode.uc_trigger_mode = TRIGGER_MODE_TIMER;
  400986:	2302      	movs	r3, #2
  400988:	7033      	strb	r3, [r6, #0]
  40098a:	e760      	b.n	40084e <main+0xb2>
			g_adc_test_mode.uc_trigger_mode = TRIGGER_MODE_PWM;
  40098c:	2303      	movs	r3, #3
  40098e:	7033      	strb	r3, [r6, #0]
  400990:	e75d      	b.n	40084e <main+0xb2>
			g_adc_test_mode.uc_trigger_mode = TRIGGER_MODE_FREERUN;
  400992:	2304      	movs	r3, #4
  400994:	7033      	strb	r3, [r6, #0]
  400996:	e75a      	b.n	40084e <main+0xb2>
			if (g_adc_test_mode.uc_pdc_en) {
  400998:	7873      	ldrb	r3, [r6, #1]
  40099a:	b113      	cbz	r3, 4009a2 <main+0x206>
				g_adc_test_mode.uc_pdc_en = 0;
  40099c:	2300      	movs	r3, #0
  40099e:	7073      	strb	r3, [r6, #1]
  4009a0:	e755      	b.n	40084e <main+0xb2>
				g_adc_test_mode.uc_pdc_en = 1;
  4009a2:	2301      	movs	r3, #1
  4009a4:	7073      	strb	r3, [r6, #1]
  4009a6:	e752      	b.n	40084e <main+0xb2>
			if (g_adc_test_mode.uc_sequence_en) {
  4009a8:	78b3      	ldrb	r3, [r6, #2]
  4009aa:	b113      	cbz	r3, 4009b2 <main+0x216>
				g_adc_test_mode.uc_sequence_en = 0;
  4009ac:	2300      	movs	r3, #0
  4009ae:	70b3      	strb	r3, [r6, #2]
  4009b0:	e74d      	b.n	40084e <main+0xb2>
				g_adc_test_mode.uc_sequence_en = 1;
  4009b2:	2301      	movs	r3, #1
  4009b4:	70b3      	strb	r3, [r6, #2]
  4009b6:	e74a      	b.n	40084e <main+0xb2>
			if (g_adc_test_mode.uc_power_save_en) {
  4009b8:	7973      	ldrb	r3, [r6, #5]
  4009ba:	b113      	cbz	r3, 4009c2 <main+0x226>
				g_adc_test_mode.uc_power_save_en = 0;
  4009bc:	2300      	movs	r3, #0
  4009be:	7173      	strb	r3, [r6, #5]
  4009c0:	e745      	b.n	40084e <main+0xb2>
				g_adc_test_mode.uc_power_save_en = 1;
  4009c2:	2301      	movs	r3, #1
  4009c4:	7173      	strb	r3, [r6, #5]
  4009c6:	e742      	b.n	40084e <main+0xb2>
			if (g_adc_test_mode.uc_gain_en) {
  4009c8:	78f3      	ldrb	r3, [r6, #3]
  4009ca:	b113      	cbz	r3, 4009d2 <main+0x236>
				g_adc_test_mode.uc_gain_en = 0;
  4009cc:	2300      	movs	r3, #0
  4009ce:	70f3      	strb	r3, [r6, #3]
  4009d0:	e73d      	b.n	40084e <main+0xb2>
				g_adc_test_mode.uc_gain_en = 1;
  4009d2:	2301      	movs	r3, #1
  4009d4:	70f3      	strb	r3, [r6, #3]
  4009d6:	e73a      	b.n	40084e <main+0xb2>
			if (g_adc_test_mode.uc_offset_en) {
  4009d8:	7933      	ldrb	r3, [r6, #4]
  4009da:	b113      	cbz	r3, 4009e2 <main+0x246>
				g_adc_test_mode.uc_offset_en = 0;
  4009dc:	2300      	movs	r3, #0
  4009de:	7133      	strb	r3, [r6, #4]
  4009e0:	e735      	b.n	40084e <main+0xb2>
				g_adc_test_mode.uc_offset_en = 1;
  4009e2:	2301      	movs	r3, #1
  4009e4:	7133      	strb	r3, [r6, #4]
  4009e6:	e732      	b.n	40084e <main+0xb2>
			if (g_adc_test_mode.uc_auto_calib_en) {
  4009e8:	79b3      	ldrb	r3, [r6, #6]
  4009ea:	b113      	cbz	r3, 4009f2 <main+0x256>
				g_adc_test_mode.uc_auto_calib_en = 0;
  4009ec:	2300      	movs	r3, #0
  4009ee:	71b3      	strb	r3, [r6, #6]
  4009f0:	e72d      	b.n	40084e <main+0xb2>
				g_adc_test_mode.uc_auto_calib_en = 1;
  4009f2:	2301      	movs	r3, #1
  4009f4:	71b3      	strb	r3, [r6, #6]
  4009f6:	e72a      	b.n	40084e <main+0xb2>
						(int)g_adc_sample_data.uc_ch_num[i],
						(int)(g_adc_sample_data.
								us_value[i] *
  4009f8:	4d2c      	ldr	r5, [pc, #176]	; (400aac <main+0x310>)
  4009fa:	886b      	ldrh	r3, [r5, #2]
  4009fc:	f640 4be4 	movw	fp, #3300	; 0xce4
  400a00:	fb0b f303 	mul.w	r3, fp, r3
				printf("CH%02d: %04d mv.    ",
  400a04:	fb88 1203 	smull	r1, r2, r8, r3
  400a08:	441a      	add	r2, r3
  400a0a:	17db      	asrs	r3, r3, #31
  400a0c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 400ab8 <main+0x31c>
  400a10:	ebc3 22e2 	rsb	r2, r3, r2, asr #11
  400a14:	7829      	ldrb	r1, [r5, #0]
  400a16:	4650      	mov	r0, sl
  400a18:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 400abc <main+0x320>
  400a1c:	47c8      	blx	r9
								us_value[i] *
  400a1e:	88ab      	ldrh	r3, [r5, #4]
  400a20:	fb0b f303 	mul.w	r3, fp, r3
				printf("CH%02d: %04d mv.    ",
  400a24:	fb88 1203 	smull	r1, r2, r8, r3
  400a28:	441a      	add	r2, r3
  400a2a:	17db      	asrs	r3, r3, #31
  400a2c:	ebc3 22e2 	rsb	r2, r3, r2, asr #11
  400a30:	7869      	ldrb	r1, [r5, #1]
  400a32:	4650      	mov	r0, sl
  400a34:	47c8      	blx	r9
								VOLT_REF /
								MAX_DIGITAL));
			}
			puts("\r");
  400a36:	481e      	ldr	r0, [pc, #120]	; (400ab0 <main+0x314>)
  400a38:	4b10      	ldr	r3, [pc, #64]	; (400a7c <main+0x2e0>)
  400a3a:	4798      	blx	r3
			g_adc_sample_data.us_done = 0;
  400a3c:	2300      	movs	r3, #0
  400a3e:	80eb      	strh	r3, [r5, #6]
  400a40:	e049      	b.n	400ad6 <main+0x33a>
  400a42:	bf00      	nop
  400a44:	00400b41 	.word	0x00400b41
  400a48:	00400c31 	.word	0x00400c31
  400a4c:	0040129d 	.word	0x0040129d
  400a50:	400e0600 	.word	0x400e0600
  400a54:	20000a9c 	.word	0x20000a9c
  400a58:	004002e1 	.word	0x004002e1
  400a5c:	20000a98 	.word	0x20000a98
  400a60:	00400259 	.word	0x00400259
  400a64:	20000a94 	.word	0x20000a94
  400a68:	07270e00 	.word	0x07270e00
  400a6c:	004015b9 	.word	0x004015b9
  400a70:	20000008 	.word	0x20000008
  400a74:	00401aa1 	.word	0x00401aa1
  400a78:	00404c20 	.word	0x00404c20
  400a7c:	00401a91 	.word	0x00401a91
  400a80:	00404c6c 	.word	0x00404c6c
  400a84:	e000e010 	.word	0xe000e010
  400a88:	0001d4bf 	.word	0x0001d4bf
  400a8c:	e000ed00 	.word	0xe000ed00
  400a90:	20000a84 	.word	0x20000a84
  400a94:	00400139 	.word	0x00400139
  400a98:	00400361 	.word	0x00400361
  400a9c:	00404c9c 	.word	0x00404c9c
  400aa0:	200009d4 	.word	0x200009d4
  400aa4:	40038000 	.word	0x40038000
  400aa8:	00400d97 	.word	0x00400d97
  400aac:	20000a8c 	.word	0x20000a8c
  400ab0:	00404b0c 	.word	0x00404b0c
  400ab4:	80080081 	.word	0x80080081
  400ab8:	00404ccc 	.word	0x00404ccc
  400abc:	00401931 	.word	0x00401931
		display_menu();
  400ac0:	4b13      	ldr	r3, [pc, #76]	; (400b10 <main+0x374>)
  400ac2:	4798      	blx	r3
			start_adc();
  400ac4:	4b13      	ldr	r3, [pc, #76]	; (400b14 <main+0x378>)
  400ac6:	4798      	blx	r3
			puts("Press any key to display configuration menu.\r");
  400ac8:	4813      	ldr	r0, [pc, #76]	; (400b18 <main+0x37c>)
  400aca:	4b14      	ldr	r3, [pc, #80]	; (400b1c <main+0x380>)
  400acc:	4798      	blx	r3
		if (g_adc_sample_data.us_done == ADC_DONE_MASK) {
  400ace:	4b14      	ldr	r3, [pc, #80]	; (400b20 <main+0x384>)
  400ad0:	88db      	ldrh	r3, [r3, #6]
  400ad2:	2b03      	cmp	r3, #3
  400ad4:	d090      	beq.n	4009f8 <main+0x25c>
		if (g_adc_test_mode.uc_trigger_mode == TRIGGER_MODE_SOFTWARE) {
  400ad6:	7833      	ldrb	r3, [r6, #0]
  400ad8:	2b00      	cmp	r3, #0
  400ada:	f43f aeac 	beq.w	400836 <main+0x9a>
		if (!uart_read(CONSOLE_UART, &uc_key)) {
  400ade:	f10d 010f 	add.w	r1, sp, #15
  400ae2:	4620      	mov	r0, r4
  400ae4:	4b0f      	ldr	r3, [pc, #60]	; (400b24 <main+0x388>)
  400ae6:	4798      	blx	r3
  400ae8:	2800      	cmp	r0, #0
  400aea:	d1f0      	bne.n	400ace <main+0x332>
			adc_disable_interrupt(ADC, 0xFFFFFFFF);	/* Disable all adc interrupt. */
  400aec:	f04f 31ff 	mov.w	r1, #4294967295
  400af0:	480d      	ldr	r0, [pc, #52]	; (400b28 <main+0x38c>)
  400af2:	4b0e      	ldr	r3, [pc, #56]	; (400b2c <main+0x390>)
  400af4:	4798      	blx	r3
			tc_start(TC0, 0);	/* Stop the Timer. */
  400af6:	2100      	movs	r1, #0
  400af8:	480d      	ldr	r0, [pc, #52]	; (400b30 <main+0x394>)
  400afa:	4b0e      	ldr	r3, [pc, #56]	; (400b34 <main+0x398>)
  400afc:	4798      	blx	r3
			pwm_channel_disable(PWM, 0);
  400afe:	2100      	movs	r1, #0
  400b00:	480d      	ldr	r0, [pc, #52]	; (400b38 <main+0x39c>)
  400b02:	4b0e      	ldr	r3, [pc, #56]	; (400b3c <main+0x3a0>)
  400b04:	4798      	blx	r3
			display_menu();
  400b06:	4b02      	ldr	r3, [pc, #8]	; (400b10 <main+0x374>)
  400b08:	4798      	blx	r3
		while (uart_read(CONSOLE_UART, &uc_key));
  400b0a:	4d06      	ldr	r5, [pc, #24]	; (400b24 <main+0x388>)
  400b0c:	e6a1      	b.n	400852 <main+0xb6>
  400b0e:	bf00      	nop
  400b10:	00400139 	.word	0x00400139
  400b14:	00400361 	.word	0x00400361
  400b18:	00404c9c 	.word	0x00404c9c
  400b1c:	00401a91 	.word	0x00401a91
  400b20:	20000a8c 	.word	0x20000a8c
  400b24:	004015ff 	.word	0x004015ff
  400b28:	40038000 	.word	0x40038000
  400b2c:	00400e11 	.word	0x00400e11
  400b30:	40010000 	.word	0x40010000
  400b34:	00401541 	.word	0x00401541
  400b38:	40020000 	.word	0x40020000
  400b3c:	00401479 	.word	0x00401479

00400b40 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400b40:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400b42:	480e      	ldr	r0, [pc, #56]	; (400b7c <sysclk_init+0x3c>)
  400b44:	4b0e      	ldr	r3, [pc, #56]	; (400b80 <sysclk_init+0x40>)
  400b46:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400b48:	213e      	movs	r1, #62	; 0x3e
  400b4a:	2000      	movs	r0, #0
  400b4c:	4b0d      	ldr	r3, [pc, #52]	; (400b84 <sysclk_init+0x44>)
  400b4e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400b50:	4c0d      	ldr	r4, [pc, #52]	; (400b88 <sysclk_init+0x48>)
  400b52:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400b54:	2800      	cmp	r0, #0
  400b56:	d0fc      	beq.n	400b52 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400b58:	4b0c      	ldr	r3, [pc, #48]	; (400b8c <sysclk_init+0x4c>)
  400b5a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400b5c:	4a0c      	ldr	r2, [pc, #48]	; (400b90 <sysclk_init+0x50>)
  400b5e:	4b0d      	ldr	r3, [pc, #52]	; (400b94 <sysclk_init+0x54>)
  400b60:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400b62:	4c0d      	ldr	r4, [pc, #52]	; (400b98 <sysclk_init+0x58>)
  400b64:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400b66:	2800      	cmp	r0, #0
  400b68:	d0fc      	beq.n	400b64 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400b6a:	2010      	movs	r0, #16
  400b6c:	4b0b      	ldr	r3, [pc, #44]	; (400b9c <sysclk_init+0x5c>)
  400b6e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400b70:	4b0b      	ldr	r3, [pc, #44]	; (400ba0 <sysclk_init+0x60>)
  400b72:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400b74:	4801      	ldr	r0, [pc, #4]	; (400b7c <sysclk_init+0x3c>)
  400b76:	4b02      	ldr	r3, [pc, #8]	; (400b80 <sysclk_init+0x40>)
  400b78:	4798      	blx	r3
  400b7a:	bd10      	pop	{r4, pc}
  400b7c:	07270e00 	.word	0x07270e00
  400b80:	004017fd 	.word	0x004017fd
  400b84:	00401219 	.word	0x00401219
  400b88:	0040126d 	.word	0x0040126d
  400b8c:	0040127d 	.word	0x0040127d
  400b90:	20133f01 	.word	0x20133f01
  400b94:	400e0400 	.word	0x400e0400
  400b98:	0040128d 	.word	0x0040128d
  400b9c:	004011b5 	.word	0x004011b5
  400ba0:	004016ed 	.word	0x004016ed

00400ba4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400ba8:	b980      	cbnz	r0, 400bcc <_read+0x28>
  400baa:	460c      	mov	r4, r1
  400bac:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400bae:	2a00      	cmp	r2, #0
  400bb0:	dd0f      	ble.n	400bd2 <_read+0x2e>
  400bb2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400bb4:	4e08      	ldr	r6, [pc, #32]	; (400bd8 <_read+0x34>)
  400bb6:	4d09      	ldr	r5, [pc, #36]	; (400bdc <_read+0x38>)
  400bb8:	6830      	ldr	r0, [r6, #0]
  400bba:	4621      	mov	r1, r4
  400bbc:	682b      	ldr	r3, [r5, #0]
  400bbe:	4798      	blx	r3
		ptr++;
  400bc0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400bc2:	42bc      	cmp	r4, r7
  400bc4:	d1f8      	bne.n	400bb8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400bc6:	4640      	mov	r0, r8
  400bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400bcc:	f04f 38ff 	mov.w	r8, #4294967295
  400bd0:	e7f9      	b.n	400bc6 <_read+0x22>
	for (; len > 0; --len) {
  400bd2:	4680      	mov	r8, r0
  400bd4:	e7f7      	b.n	400bc6 <_read+0x22>
  400bd6:	bf00      	nop
  400bd8:	20000a9c 	.word	0x20000a9c
  400bdc:	20000a94 	.word	0x20000a94

00400be0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400be0:	3801      	subs	r0, #1
  400be2:	2802      	cmp	r0, #2
  400be4:	d815      	bhi.n	400c12 <_write+0x32>
{
  400be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400bea:	460e      	mov	r6, r1
  400bec:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400bee:	b19a      	cbz	r2, 400c18 <_write+0x38>
  400bf0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400bf2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400c2c <_write+0x4c>
  400bf6:	4f0c      	ldr	r7, [pc, #48]	; (400c28 <_write+0x48>)
  400bf8:	f8d8 0000 	ldr.w	r0, [r8]
  400bfc:	f815 1b01 	ldrb.w	r1, [r5], #1
  400c00:	683b      	ldr	r3, [r7, #0]
  400c02:	4798      	blx	r3
  400c04:	2800      	cmp	r0, #0
  400c06:	db0a      	blt.n	400c1e <_write+0x3e>
  400c08:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400c0a:	3c01      	subs	r4, #1
  400c0c:	d1f4      	bne.n	400bf8 <_write+0x18>
  400c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400c12:	f04f 30ff 	mov.w	r0, #4294967295
  400c16:	4770      	bx	lr
	for (; len != 0; --len) {
  400c18:	4610      	mov	r0, r2
  400c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400c1e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c26:	bf00      	nop
  400c28:	20000a98 	.word	0x20000a98
  400c2c:	20000a9c 	.word	0x20000a9c

00400c30 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400c30:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400c32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400c36:	4b16      	ldr	r3, [pc, #88]	; (400c90 <board_init+0x60>)
  400c38:	605a      	str	r2, [r3, #4]
  400c3a:	200b      	movs	r0, #11
  400c3c:	4c15      	ldr	r4, [pc, #84]	; (400c94 <board_init+0x64>)
  400c3e:	47a0      	blx	r4
  400c40:	200c      	movs	r0, #12
  400c42:	47a0      	blx	r4
  400c44:	200d      	movs	r0, #13
  400c46:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400c48:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400c4c:	2013      	movs	r0, #19
  400c4e:	4c12      	ldr	r4, [pc, #72]	; (400c98 <board_init+0x68>)
  400c50:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  400c52:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400c56:	2014      	movs	r0, #20
  400c58:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  400c5a:	4910      	ldr	r1, [pc, #64]	; (400c9c <board_init+0x6c>)
  400c5c:	2023      	movs	r0, #35	; 0x23
  400c5e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400c60:	490f      	ldr	r1, [pc, #60]	; (400ca0 <board_init+0x70>)
  400c62:	204c      	movs	r0, #76	; 0x4c
  400c64:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  400c66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400c6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400c6e:	480d      	ldr	r0, [pc, #52]	; (400ca4 <board_init+0x74>)
  400c70:	4b0d      	ldr	r3, [pc, #52]	; (400ca8 <board_init+0x78>)
  400c72:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
  400c74:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c78:	2000      	movs	r0, #0
  400c7a:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
  400c7c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c80:	2008      	movs	r0, #8
  400c82:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
  400c84:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c88:	2052      	movs	r0, #82	; 0x52
  400c8a:	47a0      	blx	r4
  400c8c:	bd10      	pop	{r4, pc}
  400c8e:	bf00      	nop
  400c90:	400e1450 	.word	0x400e1450
  400c94:	0040129d 	.word	0x0040129d
  400c98:	00400f19 	.word	0x00400f19
  400c9c:	28000079 	.word	0x28000079
  400ca0:	28000059 	.word	0x28000059
  400ca4:	400e0e00 	.word	0x400e0e00
  400ca8:	00401039 	.word	0x00401039

00400cac <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  400cac:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  400cae:	2401      	movs	r4, #1
  400cb0:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  400cb2:	2400      	movs	r4, #0
  400cb4:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  400cb6:	f240 2502 	movw	r5, #514	; 0x202
  400cba:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  400cbe:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  400cc2:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  400cc6:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  400cc8:	0052      	lsls	r2, r2, #1
  400cca:	fbb1 f2f2 	udiv	r2, r1, r2
  400cce:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  400cd0:	0212      	lsls	r2, r2, #8
  400cd2:	b292      	uxth	r2, r2
  400cd4:	432b      	orrs	r3, r5
  400cd6:	431a      	orrs	r2, r3
  400cd8:	6042      	str	r2, [r0, #4]
	return 0;
}
  400cda:	4620      	mov	r0, r4
  400cdc:	bc30      	pop	{r4, r5}
  400cde:	4770      	bx	lr

00400ce0 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  400ce0:	6843      	ldr	r3, [r0, #4]
  400ce2:	01d2      	lsls	r2, r2, #7
  400ce4:	b2d2      	uxtb	r2, r2
  400ce6:	4319      	orrs	r1, r3
  400ce8:	430a      	orrs	r2, r1
  400cea:	6042      	str	r2, [r0, #4]
  400cec:	4770      	bx	lr

00400cee <adc_configure_power_save>:
 * \param uc_fwup ADC_MR_FWUP_OFF configures sleep mode as uc_sleep setting,
 * ADC_MR_FWUP_ON keeps voltage reference ON and ADC Core OFF between conversions.
 */
void adc_configure_power_save(Adc *p_adc, const uint8_t uc_sleep, const uint8_t uc_fwup)
{
	p_adc->ADC_MR |= (((uc_sleep << 5) & ADC_MR_SLEEP) |
  400cee:	6843      	ldr	r3, [r0, #4]
			((uc_fwup << 6) & ADC_MR_FWUP));
  400cf0:	0192      	lsls	r2, r2, #6
  400cf2:	f002 0240 	and.w	r2, r2, #64	; 0x40
	p_adc->ADC_MR |= (((uc_sleep << 5) & ADC_MR_SLEEP) |
  400cf6:	431a      	orrs	r2, r3
  400cf8:	0149      	lsls	r1, r1, #5
  400cfa:	f001 0120 	and.w	r1, r1, #32
  400cfe:	430a      	orrs	r2, r1
  400d00:	6042      	str	r2, [r0, #4]
  400d02:	4770      	bx	lr

00400d04 <adc_configure_sequence>:
 * \param ch_list Channel sequence list.
 * \param number Number of channels in the list.
 */
void adc_configure_sequence(Adc *p_adc, const enum adc_channel_num_t ch_list[],
		uint8_t uc_num)
{
  400d04:	b470      	push	{r4, r5, r6}
	uint8_t uc_counter;
	volatile uint32_t *adc_seqr = &p_adc->ADC_SEQR1;

	if (uc_num <= 8) {
  400d06:	2a08      	cmp	r2, #8
  400d08:	d810      	bhi.n	400d2c <adc_configure_sequence+0x28>
		for (uc_counter = 0; uc_counter < uc_num; uc_counter++) {
  400d0a:	b16a      	cbz	r2, 400d28 <adc_configure_sequence+0x24>
  400d0c:	1e4c      	subs	r4, r1, #1
  400d0e:	3a01      	subs	r2, #1
  400d10:	fa51 f182 	uxtab	r1, r1, r2
  400d14:	2200      	movs	r2, #0
			adc_seqr[0] |=
  400d16:	6885      	ldr	r5, [r0, #8]
					ch_list[uc_counter] << (4 * uc_counter);
  400d18:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400d1c:	4093      	lsls	r3, r2
			adc_seqr[0] |=
  400d1e:	432b      	orrs	r3, r5
  400d20:	6083      	str	r3, [r0, #8]
  400d22:	3204      	adds	r2, #4
		for (uc_counter = 0; uc_counter < uc_num; uc_counter++) {
  400d24:	42a1      	cmp	r1, r4
  400d26:	d1f6      	bne.n	400d16 <adc_configure_sequence+0x12>
		for (uc_counter = 0; uc_counter < uc_num - 8; uc_counter++) {
			adc_seqr[1] |=
					ch_list[8 + uc_counter] << (4 * uc_counter);
		}
	}
}
  400d28:	bc70      	pop	{r4, r5, r6}
  400d2a:	4770      	bx	lr
  400d2c:	1e4d      	subs	r5, r1, #1
	if (uc_num <= 8) {
  400d2e:	2400      	movs	r4, #0
			adc_seqr[0] |=
  400d30:	6886      	ldr	r6, [r0, #8]
					ch_list[uc_counter] << (4 * uc_counter);
  400d32:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  400d36:	40a3      	lsls	r3, r4
			adc_seqr[0] |=
  400d38:	4333      	orrs	r3, r6
  400d3a:	6083      	str	r3, [r0, #8]
  400d3c:	3404      	adds	r4, #4
		for (uc_counter = 0; uc_counter < 8; uc_counter++) {
  400d3e:	2c20      	cmp	r4, #32
  400d40:	d1f6      	bne.n	400d30 <adc_configure_sequence+0x2c>
		for (uc_counter = 0; uc_counter < uc_num - 8; uc_counter++) {
  400d42:	3a08      	subs	r2, #8
  400d44:	2a00      	cmp	r2, #0
  400d46:	ddef      	ble.n	400d28 <adc_configure_sequence+0x24>
  400d48:	2500      	movs	r5, #0
  400d4a:	462b      	mov	r3, r5
			adc_seqr[1] |=
  400d4c:	68c6      	ldr	r6, [r0, #12]
					ch_list[8 + uc_counter] << (4 * uc_counter);
  400d4e:	194c      	adds	r4, r1, r5
  400d50:	7a24      	ldrb	r4, [r4, #8]
  400d52:	00ad      	lsls	r5, r5, #2
  400d54:	40ac      	lsls	r4, r5
			adc_seqr[1] |=
  400d56:	4334      	orrs	r4, r6
  400d58:	60c4      	str	r4, [r0, #12]
		for (uc_counter = 0; uc_counter < uc_num - 8; uc_counter++) {
  400d5a:	3301      	adds	r3, #1
  400d5c:	b2db      	uxtb	r3, r3
  400d5e:	461d      	mov	r5, r3
  400d60:	4293      	cmp	r3, r2
  400d62:	dbf3      	blt.n	400d4c <adc_configure_sequence+0x48>
  400d64:	e7e0      	b.n	400d28 <adc_configure_sequence+0x24>

00400d66 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
  400d66:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  400d68:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
  400d6a:	0609      	lsls	r1, r1, #24
  400d6c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  400d70:	4321      	orrs	r1, r4
  400d72:	430a      	orrs	r2, r1
  400d74:	0719      	lsls	r1, r3, #28
  400d76:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
  400d7a:	4311      	orrs	r1, r2
  400d7c:	6041      	str	r1, [r0, #4]
}
  400d7e:	bc10      	pop	{r4}
  400d80:	4770      	bx	lr

00400d82 <adc_enable_anch>:
 *
 * \param p_Adc Pointer to an ADC instance.
 */
void adc_enable_anch(Adc *p_adc)
{
	p_adc->ADC_MR |= ADC_MR_ANACH;
  400d82:	6843      	ldr	r3, [r0, #4]
  400d84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  400d88:	6043      	str	r3, [r0, #4]
  400d8a:	4770      	bx	lr

00400d8c <adc_disable_anch>:
 *
 * \param p_Adc Pointer to an ADC instance.
 */
void adc_disable_anch(Adc *p_adc)
{
	p_adc->ADC_MR &= ~ADC_MR_ANACH;
  400d8c:	6843      	ldr	r3, [r0, #4]
  400d8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
  400d92:	6043      	str	r3, [r0, #4]
  400d94:	4770      	bx	lr

00400d96 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
  400d96:	2302      	movs	r3, #2
  400d98:	6003      	str	r3, [r0, #0]
  400d9a:	4770      	bx	lr

00400d9c <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  400d9c:	2301      	movs	r3, #1
  400d9e:	fa03 f101 	lsl.w	r1, r3, r1
  400da2:	6101      	str	r1, [r0, #16]
  400da4:	4770      	bx	lr

00400da6 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
  400da6:	6a00      	ldr	r0, [r0, #32]
}
  400da8:	4770      	bx	lr

00400daa <adc_enable_tag>:
 *
 * \param p_adc Pointer to an ADC instance.
 */
void adc_enable_tag(Adc *p_adc)
{
	p_adc->ADC_EMR |= ADC_EMR_TAG;
  400daa:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400dac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400db0:	6403      	str	r3, [r0, #64]	; 0x40
  400db2:	4770      	bx	lr

00400db4 <adc_start_sequencer>:
 *
 * \param p_adc Pointer to an ADC instance.
 */
void adc_start_sequencer(Adc *p_adc)
{
	p_adc->ADC_MR |= ADC_MR_USEQ;
  400db4:	6843      	ldr	r3, [r0, #4]
  400db6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  400dba:	6043      	str	r3, [r0, #4]
  400dbc:	4770      	bx	lr

00400dbe <adc_stop_sequencer>:
 *
 * \param p_adc Pointer to an ADC instance.
 */
void adc_stop_sequencer(Adc *p_adc)
{
	p_adc->ADC_MR &= ~ADC_MR_USEQ;
  400dbe:	6843      	ldr	r3, [r0, #4]
  400dc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  400dc4:	6043      	str	r3, [r0, #4]
  400dc6:	4770      	bx	lr

00400dc8 <adc_enable_channel_input_offset>:
 * \param p_adc Pointer to an ADC instance.
 * \param channel ADC channel number.
 */
void adc_enable_channel_input_offset(Adc *p_adc, const enum adc_channel_num_t channel)
{
	p_adc->ADC_COR |= 0x01u << channel;
  400dc8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  400dca:	2301      	movs	r3, #1
  400dcc:	fa03 f101 	lsl.w	r1, r3, r1
  400dd0:	4311      	orrs	r1, r2
  400dd2:	64c1      	str	r1, [r0, #76]	; 0x4c
  400dd4:	4770      	bx	lr

00400dd6 <adc_disable_channel_input_offset>:
 *
 * \param p_adc Pointer to an ADC instance.
 * \param channel ADC channel number.
 */
void adc_disable_channel_input_offset(Adc *p_adc, const enum adc_channel_num_t channel)
{
  400dd6:	b410      	push	{r4}
	uint32_t ul_temp;
	ul_temp = p_adc->ADC_COR;
  400dd8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
	p_adc->ADC_COR &= (0xfffffffeu << channel);
  400dda:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
  400ddc:	f06f 0301 	mvn.w	r3, #1
  400de0:	fa03 f101 	lsl.w	r1, r3, r1
  400de4:	4021      	ands	r1, r4
  400de6:	64c1      	str	r1, [r0, #76]	; 0x4c
	p_adc->ADC_COR |= ul_temp;
  400de8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  400dea:	431a      	orrs	r2, r3
  400dec:	64c2      	str	r2, [r0, #76]	; 0x4c
}
  400dee:	bc10      	pop	{r4}
  400df0:	4770      	bx	lr

00400df2 <adc_set_channel_input_gain>:
 * \param gain Gain value for the input.
 */
void adc_set_channel_input_gain(Adc *p_adc, const enum adc_channel_num_t channel,
		const enum adc_gainvalue_t gain)
{
	p_adc->ADC_CGR |= (0x03u << (2 * channel)) & (gain << (2 * channel));
  400df2:	6c83      	ldr	r3, [r0, #72]	; 0x48
  400df4:	0049      	lsls	r1, r1, #1
  400df6:	f002 0203 	and.w	r2, r2, #3
  400dfa:	408a      	lsls	r2, r1
  400dfc:	431a      	orrs	r2, r3
  400dfe:	6482      	str	r2, [r0, #72]	; 0x48
  400e00:	4770      	bx	lr

00400e02 <adc_set_calibmode>:
 *
 * \param p_adc Pointer to an ADC instance.
 */
void adc_set_calibmode(Adc * p_adc)
{
	p_adc->ADC_CR |= ADC_CR_AUTOCAL;
  400e02:	6803      	ldr	r3, [r0, #0]
  400e04:	f043 0308 	orr.w	r3, r3, #8
  400e08:	6003      	str	r3, [r0, #0]
  400e0a:	4770      	bx	lr

00400e0c <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
  400e0c:	6241      	str	r1, [r0, #36]	; 0x24
  400e0e:	4770      	bx	lr

00400e10 <adc_disable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be disabled.
 */
void adc_disable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IDR = ul_source;
  400e10:	6281      	str	r1, [r0, #40]	; 0x28
  400e12:	4770      	bx	lr

00400e14 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
  400e14:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  400e16:	4770      	bx	lr

00400e18 <adc_enable_ts>:
 *
 * \param p_adc Pointer to an ADC instance.
 */
void adc_enable_ts(Adc *p_adc)
{
	p_adc->ADC_ACR |= ADC_ACR_TSON;
  400e18:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
  400e1c:	f043 0310 	orr.w	r3, r3, #16
  400e20:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  400e24:	4770      	bx	lr

00400e26 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400e26:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400e28:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400e2c:	d039      	beq.n	400ea2 <pio_set_peripheral+0x7c>
  400e2e:	d813      	bhi.n	400e58 <pio_set_peripheral+0x32>
  400e30:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400e34:	d025      	beq.n	400e82 <pio_set_peripheral+0x5c>
  400e36:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400e3a:	d10a      	bne.n	400e52 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e3c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400e3e:	4313      	orrs	r3, r2
  400e40:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400e42:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400e44:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400e46:	400b      	ands	r3, r1
  400e48:	ea23 0302 	bic.w	r3, r3, r2
  400e4c:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400e4e:	6042      	str	r2, [r0, #4]
  400e50:	4770      	bx	lr
	switch (ul_type) {
  400e52:	2900      	cmp	r1, #0
  400e54:	d1fb      	bne.n	400e4e <pio_set_peripheral+0x28>
  400e56:	4770      	bx	lr
  400e58:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400e5c:	d020      	beq.n	400ea0 <pio_set_peripheral+0x7a>
  400e5e:	d809      	bhi.n	400e74 <pio_set_peripheral+0x4e>
  400e60:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400e64:	d1f3      	bne.n	400e4e <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e66:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400e68:	4313      	orrs	r3, r2
  400e6a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400e6c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400e6e:	4313      	orrs	r3, r2
  400e70:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400e72:	e7ec      	b.n	400e4e <pio_set_peripheral+0x28>
	switch (ul_type) {
  400e74:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400e78:	d012      	beq.n	400ea0 <pio_set_peripheral+0x7a>
  400e7a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400e7e:	d00f      	beq.n	400ea0 <pio_set_peripheral+0x7a>
  400e80:	e7e5      	b.n	400e4e <pio_set_peripheral+0x28>
{
  400e82:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e84:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400e86:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400e88:	43d3      	mvns	r3, r2
  400e8a:	4021      	ands	r1, r4
  400e8c:	461c      	mov	r4, r3
  400e8e:	4019      	ands	r1, r3
  400e90:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400e92:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400e94:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400e96:	400b      	ands	r3, r1
  400e98:	4023      	ands	r3, r4
  400e9a:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400e9c:	6042      	str	r2, [r0, #4]
}
  400e9e:	bc10      	pop	{r4}
  400ea0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ea2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400ea4:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400ea6:	400b      	ands	r3, r1
  400ea8:	ea23 0302 	bic.w	r3, r3, r2
  400eac:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400eae:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400eb0:	4313      	orrs	r3, r2
  400eb2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400eb4:	e7cb      	b.n	400e4e <pio_set_peripheral+0x28>

00400eb6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400eb6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400eb8:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400ebc:	bf14      	ite	ne
  400ebe:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400ec0:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400ec2:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400ec6:	bf14      	ite	ne
  400ec8:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  400eca:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  400ecc:	f012 0f02 	tst.w	r2, #2
  400ed0:	d107      	bne.n	400ee2 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400ed2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400ed6:	bf18      	it	ne
  400ed8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  400edc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400ede:	6001      	str	r1, [r0, #0]
  400ee0:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  400ee2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400ee6:	e7f9      	b.n	400edc <pio_set_input+0x26>

00400ee8 <pio_set_output>:
{
  400ee8:	b410      	push	{r4}
  400eea:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400eec:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400eee:	b944      	cbnz	r4, 400f02 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  400ef0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400ef2:	b143      	cbz	r3, 400f06 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  400ef4:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400ef6:	b942      	cbnz	r2, 400f0a <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  400ef8:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400efa:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400efc:	6001      	str	r1, [r0, #0]
}
  400efe:	bc10      	pop	{r4}
  400f00:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400f02:	6641      	str	r1, [r0, #100]	; 0x64
  400f04:	e7f5      	b.n	400ef2 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400f06:	6541      	str	r1, [r0, #84]	; 0x54
  400f08:	e7f5      	b.n	400ef6 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400f0a:	6301      	str	r1, [r0, #48]	; 0x30
  400f0c:	e7f5      	b.n	400efa <pio_set_output+0x12>

00400f0e <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400f0e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400f10:	4770      	bx	lr

00400f12 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400f12:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400f14:	4770      	bx	lr
	...

00400f18 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400f18:	b570      	push	{r4, r5, r6, lr}
  400f1a:	b082      	sub	sp, #8
  400f1c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400f1e:	0943      	lsrs	r3, r0, #5
  400f20:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400f24:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400f28:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  400f2a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400f32:	d053      	beq.n	400fdc <pio_configure_pin+0xc4>
  400f34:	d80a      	bhi.n	400f4c <pio_configure_pin+0x34>
  400f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400f3a:	d02d      	beq.n	400f98 <pio_configure_pin+0x80>
  400f3c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400f40:	d03b      	beq.n	400fba <pio_configure_pin+0xa2>
  400f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400f46:	d015      	beq.n	400f74 <pio_configure_pin+0x5c>
		return 0;
  400f48:	2000      	movs	r0, #0
  400f4a:	e023      	b.n	400f94 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  400f4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400f50:	d055      	beq.n	400ffe <pio_configure_pin+0xe6>
  400f52:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400f56:	d052      	beq.n	400ffe <pio_configure_pin+0xe6>
  400f58:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400f5c:	d1f4      	bne.n	400f48 <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400f5e:	f000 011f 	and.w	r1, r0, #31
  400f62:	2601      	movs	r6, #1
  400f64:	462a      	mov	r2, r5
  400f66:	fa06 f101 	lsl.w	r1, r6, r1
  400f6a:	4620      	mov	r0, r4
  400f6c:	4b2f      	ldr	r3, [pc, #188]	; (40102c <pio_configure_pin+0x114>)
  400f6e:	4798      	blx	r3
	return 1;
  400f70:	4630      	mov	r0, r6
		break;
  400f72:	e00f      	b.n	400f94 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400f74:	f000 001f 	and.w	r0, r0, #31
  400f78:	2601      	movs	r6, #1
  400f7a:	4086      	lsls	r6, r0
  400f7c:	4632      	mov	r2, r6
  400f7e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f82:	4620      	mov	r0, r4
  400f84:	4b2a      	ldr	r3, [pc, #168]	; (401030 <pio_configure_pin+0x118>)
  400f86:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400f88:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400f8c:	bf14      	ite	ne
  400f8e:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400f90:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400f92:	2001      	movs	r0, #1
}
  400f94:	b002      	add	sp, #8
  400f96:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400f98:	f000 001f 	and.w	r0, r0, #31
  400f9c:	2601      	movs	r6, #1
  400f9e:	4086      	lsls	r6, r0
  400fa0:	4632      	mov	r2, r6
  400fa2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400fa6:	4620      	mov	r0, r4
  400fa8:	4b21      	ldr	r3, [pc, #132]	; (401030 <pio_configure_pin+0x118>)
  400faa:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400fac:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400fb0:	bf14      	ite	ne
  400fb2:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400fb4:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400fb6:	2001      	movs	r0, #1
  400fb8:	e7ec      	b.n	400f94 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400fba:	f000 001f 	and.w	r0, r0, #31
  400fbe:	2601      	movs	r6, #1
  400fc0:	4086      	lsls	r6, r0
  400fc2:	4632      	mov	r2, r6
  400fc4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400fc8:	4620      	mov	r0, r4
  400fca:	4b19      	ldr	r3, [pc, #100]	; (401030 <pio_configure_pin+0x118>)
  400fcc:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400fce:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400fd2:	bf14      	ite	ne
  400fd4:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400fd6:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400fd8:	2001      	movs	r0, #1
  400fda:	e7db      	b.n	400f94 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400fdc:	f000 001f 	and.w	r0, r0, #31
  400fe0:	2601      	movs	r6, #1
  400fe2:	4086      	lsls	r6, r0
  400fe4:	4632      	mov	r2, r6
  400fe6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400fea:	4620      	mov	r0, r4
  400fec:	4b10      	ldr	r3, [pc, #64]	; (401030 <pio_configure_pin+0x118>)
  400fee:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400ff0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400ff4:	bf14      	ite	ne
  400ff6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400ff8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400ffa:	2001      	movs	r0, #1
  400ffc:	e7ca      	b.n	400f94 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400ffe:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401002:	f000 011f 	and.w	r1, r0, #31
  401006:	2601      	movs	r6, #1
  401008:	ea05 0306 	and.w	r3, r5, r6
  40100c:	9300      	str	r3, [sp, #0]
  40100e:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401012:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401016:	bf14      	ite	ne
  401018:	2200      	movne	r2, #0
  40101a:	2201      	moveq	r2, #1
  40101c:	fa06 f101 	lsl.w	r1, r6, r1
  401020:	4620      	mov	r0, r4
  401022:	4c04      	ldr	r4, [pc, #16]	; (401034 <pio_configure_pin+0x11c>)
  401024:	47a0      	blx	r4
	return 1;
  401026:	4630      	mov	r0, r6
		break;
  401028:	e7b4      	b.n	400f94 <pio_configure_pin+0x7c>
  40102a:	bf00      	nop
  40102c:	00400eb7 	.word	0x00400eb7
  401030:	00400e27 	.word	0x00400e27
  401034:	00400ee9 	.word	0x00400ee9

00401038 <pio_configure_pin_group>:
{
  401038:	b570      	push	{r4, r5, r6, lr}
  40103a:	b082      	sub	sp, #8
  40103c:	4605      	mov	r5, r0
  40103e:	460e      	mov	r6, r1
  401040:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  401042:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  401046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40104a:	d03d      	beq.n	4010c8 <pio_configure_pin_group+0x90>
  40104c:	d80a      	bhi.n	401064 <pio_configure_pin_group+0x2c>
  40104e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401052:	d021      	beq.n	401098 <pio_configure_pin_group+0x60>
  401054:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401058:	d02a      	beq.n	4010b0 <pio_configure_pin_group+0x78>
  40105a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40105e:	d00e      	beq.n	40107e <pio_configure_pin_group+0x46>
		return 0;
  401060:	2000      	movs	r0, #0
  401062:	e017      	b.n	401094 <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  401064:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401068:	d03a      	beq.n	4010e0 <pio_configure_pin_group+0xa8>
  40106a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40106e:	d037      	beq.n	4010e0 <pio_configure_pin_group+0xa8>
  401070:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401074:	d1f4      	bne.n	401060 <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  401076:	4b23      	ldr	r3, [pc, #140]	; (401104 <pio_configure_pin_group+0xcc>)
  401078:	4798      	blx	r3
	return 1;
  40107a:	2001      	movs	r0, #1
		break;
  40107c:	e00a      	b.n	401094 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40107e:	460a      	mov	r2, r1
  401080:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401084:	4b20      	ldr	r3, [pc, #128]	; (401108 <pio_configure_pin_group+0xd0>)
  401086:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401088:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40108c:	bf14      	ite	ne
  40108e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  401090:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  401092:	2001      	movs	r0, #1
}
  401094:	b002      	add	sp, #8
  401096:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401098:	460a      	mov	r2, r1
  40109a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40109e:	4b1a      	ldr	r3, [pc, #104]	; (401108 <pio_configure_pin_group+0xd0>)
  4010a0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4010a2:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4010a6:	bf14      	ite	ne
  4010a8:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4010aa:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4010ac:	2001      	movs	r0, #1
  4010ae:	e7f1      	b.n	401094 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4010b0:	460a      	mov	r2, r1
  4010b2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4010b6:	4b14      	ldr	r3, [pc, #80]	; (401108 <pio_configure_pin_group+0xd0>)
  4010b8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4010ba:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4010be:	bf14      	ite	ne
  4010c0:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4010c2:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4010c4:	2001      	movs	r0, #1
  4010c6:	e7e5      	b.n	401094 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4010c8:	460a      	mov	r2, r1
  4010ca:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4010ce:	4b0e      	ldr	r3, [pc, #56]	; (401108 <pio_configure_pin_group+0xd0>)
  4010d0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4010d2:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4010d6:	bf14      	ite	ne
  4010d8:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4010da:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4010dc:	2001      	movs	r0, #1
  4010de:	e7d9      	b.n	401094 <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4010e0:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  4010e4:	f004 0301 	and.w	r3, r4, #1
  4010e8:	9300      	str	r3, [sp, #0]
  4010ea:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4010ee:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4010f2:	bf14      	ite	ne
  4010f4:	2200      	movne	r2, #0
  4010f6:	2201      	moveq	r2, #1
  4010f8:	4631      	mov	r1, r6
  4010fa:	4628      	mov	r0, r5
  4010fc:	4c03      	ldr	r4, [pc, #12]	; (40110c <pio_configure_pin_group+0xd4>)
  4010fe:	47a0      	blx	r4
	return 1;
  401100:	2001      	movs	r0, #1
		break;
  401102:	e7c7      	b.n	401094 <pio_configure_pin_group+0x5c>
  401104:	00400eb7 	.word	0x00400eb7
  401108:	00400e27 	.word	0x00400e27
  40110c:	00400ee9 	.word	0x00400ee9

00401110 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401114:	4681      	mov	r9, r0
  401116:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401118:	4b12      	ldr	r3, [pc, #72]	; (401164 <pio_handler_process+0x54>)
  40111a:	4798      	blx	r3
  40111c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40111e:	4648      	mov	r0, r9
  401120:	4b11      	ldr	r3, [pc, #68]	; (401168 <pio_handler_process+0x58>)
  401122:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401124:	4005      	ands	r5, r0
  401126:	d013      	beq.n	401150 <pio_handler_process+0x40>
  401128:	4c10      	ldr	r4, [pc, #64]	; (40116c <pio_handler_process+0x5c>)
  40112a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40112e:	e003      	b.n	401138 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401130:	42b4      	cmp	r4, r6
  401132:	d00d      	beq.n	401150 <pio_handler_process+0x40>
  401134:	3410      	adds	r4, #16
		while (status != 0) {
  401136:	b15d      	cbz	r5, 401150 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401138:	6820      	ldr	r0, [r4, #0]
  40113a:	42b8      	cmp	r0, r7
  40113c:	d1f8      	bne.n	401130 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40113e:	6861      	ldr	r1, [r4, #4]
  401140:	4229      	tst	r1, r5
  401142:	d0f5      	beq.n	401130 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401144:	68e3      	ldr	r3, [r4, #12]
  401146:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401148:	6863      	ldr	r3, [r4, #4]
  40114a:	ea25 0503 	bic.w	r5, r5, r3
  40114e:	e7ef      	b.n	401130 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401150:	4b07      	ldr	r3, [pc, #28]	; (401170 <pio_handler_process+0x60>)
  401152:	681b      	ldr	r3, [r3, #0]
  401154:	b123      	cbz	r3, 401160 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  401156:	4b07      	ldr	r3, [pc, #28]	; (401174 <pio_handler_process+0x64>)
  401158:	681b      	ldr	r3, [r3, #0]
  40115a:	b10b      	cbz	r3, 401160 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  40115c:	4648      	mov	r0, r9
  40115e:	4798      	blx	r3
  401160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401164:	00400f0f 	.word	0x00400f0f
  401168:	00400f13 	.word	0x00400f13
  40116c:	200009d8 	.word	0x200009d8
  401170:	20000aa0 	.word	0x20000aa0
  401174:	20000a48 	.word	0x20000a48

00401178 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401178:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40117a:	210b      	movs	r1, #11
  40117c:	4801      	ldr	r0, [pc, #4]	; (401184 <PIOA_Handler+0xc>)
  40117e:	4b02      	ldr	r3, [pc, #8]	; (401188 <PIOA_Handler+0x10>)
  401180:	4798      	blx	r3
  401182:	bd08      	pop	{r3, pc}
  401184:	400e0e00 	.word	0x400e0e00
  401188:	00401111 	.word	0x00401111

0040118c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40118c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40118e:	210c      	movs	r1, #12
  401190:	4801      	ldr	r0, [pc, #4]	; (401198 <PIOB_Handler+0xc>)
  401192:	4b02      	ldr	r3, [pc, #8]	; (40119c <PIOB_Handler+0x10>)
  401194:	4798      	blx	r3
  401196:	bd08      	pop	{r3, pc}
  401198:	400e1000 	.word	0x400e1000
  40119c:	00401111 	.word	0x00401111

004011a0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4011a0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4011a2:	210d      	movs	r1, #13
  4011a4:	4801      	ldr	r0, [pc, #4]	; (4011ac <PIOC_Handler+0xc>)
  4011a6:	4b02      	ldr	r3, [pc, #8]	; (4011b0 <PIOC_Handler+0x10>)
  4011a8:	4798      	blx	r3
  4011aa:	bd08      	pop	{r3, pc}
  4011ac:	400e1200 	.word	0x400e1200
  4011b0:	00401111 	.word	0x00401111

004011b4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4011b4:	4a17      	ldr	r2, [pc, #92]	; (401214 <pmc_switch_mck_to_pllack+0x60>)
  4011b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4011bc:	4318      	orrs	r0, r3
  4011be:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011c2:	f013 0f08 	tst.w	r3, #8
  4011c6:	d10a      	bne.n	4011de <pmc_switch_mck_to_pllack+0x2a>
  4011c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011cc:	4911      	ldr	r1, [pc, #68]	; (401214 <pmc_switch_mck_to_pllack+0x60>)
  4011ce:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011d0:	f012 0f08 	tst.w	r2, #8
  4011d4:	d103      	bne.n	4011de <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011d6:	3b01      	subs	r3, #1
  4011d8:	d1f9      	bne.n	4011ce <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4011da:	2001      	movs	r0, #1
  4011dc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4011de:	4a0d      	ldr	r2, [pc, #52]	; (401214 <pmc_switch_mck_to_pllack+0x60>)
  4011e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011e2:	f023 0303 	bic.w	r3, r3, #3
  4011e6:	f043 0302 	orr.w	r3, r3, #2
  4011ea:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011ee:	f013 0f08 	tst.w	r3, #8
  4011f2:	d10a      	bne.n	40120a <pmc_switch_mck_to_pllack+0x56>
  4011f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011f8:	4906      	ldr	r1, [pc, #24]	; (401214 <pmc_switch_mck_to_pllack+0x60>)
  4011fa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011fc:	f012 0f08 	tst.w	r2, #8
  401200:	d105      	bne.n	40120e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401202:	3b01      	subs	r3, #1
  401204:	d1f9      	bne.n	4011fa <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401206:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401208:	4770      	bx	lr
	return 0;
  40120a:	2000      	movs	r0, #0
  40120c:	4770      	bx	lr
  40120e:	2000      	movs	r0, #0
  401210:	4770      	bx	lr
  401212:	bf00      	nop
  401214:	400e0400 	.word	0x400e0400

00401218 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401218:	b9c8      	cbnz	r0, 40124e <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40121a:	4a11      	ldr	r2, [pc, #68]	; (401260 <pmc_switch_mainck_to_xtal+0x48>)
  40121c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40121e:	0209      	lsls	r1, r1, #8
  401220:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401222:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401226:	f023 0303 	bic.w	r3, r3, #3
  40122a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40122e:	f043 0301 	orr.w	r3, r3, #1
  401232:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401234:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401236:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401238:	f013 0f01 	tst.w	r3, #1
  40123c:	d0fb      	beq.n	401236 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40123e:	4a08      	ldr	r2, [pc, #32]	; (401260 <pmc_switch_mainck_to_xtal+0x48>)
  401240:	6a13      	ldr	r3, [r2, #32]
  401242:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40124a:	6213      	str	r3, [r2, #32]
  40124c:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40124e:	4904      	ldr	r1, [pc, #16]	; (401260 <pmc_switch_mainck_to_xtal+0x48>)
  401250:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401252:	4a04      	ldr	r2, [pc, #16]	; (401264 <pmc_switch_mainck_to_xtal+0x4c>)
  401254:	401a      	ands	r2, r3
  401256:	4b04      	ldr	r3, [pc, #16]	; (401268 <pmc_switch_mainck_to_xtal+0x50>)
  401258:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40125a:	620b      	str	r3, [r1, #32]
  40125c:	4770      	bx	lr
  40125e:	bf00      	nop
  401260:	400e0400 	.word	0x400e0400
  401264:	fec8fffc 	.word	0xfec8fffc
  401268:	01370002 	.word	0x01370002

0040126c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40126c:	4b02      	ldr	r3, [pc, #8]	; (401278 <pmc_osc_is_ready_mainck+0xc>)
  40126e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401270:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401274:	4770      	bx	lr
  401276:	bf00      	nop
  401278:	400e0400 	.word	0x400e0400

0040127c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40127c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401280:	4b01      	ldr	r3, [pc, #4]	; (401288 <pmc_disable_pllack+0xc>)
  401282:	629a      	str	r2, [r3, #40]	; 0x28
  401284:	4770      	bx	lr
  401286:	bf00      	nop
  401288:	400e0400 	.word	0x400e0400

0040128c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40128c:	4b02      	ldr	r3, [pc, #8]	; (401298 <pmc_is_locked_pllack+0xc>)
  40128e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401290:	f000 0002 	and.w	r0, r0, #2
  401294:	4770      	bx	lr
  401296:	bf00      	nop
  401298:	400e0400 	.word	0x400e0400

0040129c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40129c:	2822      	cmp	r0, #34	; 0x22
  40129e:	d81e      	bhi.n	4012de <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4012a0:	281f      	cmp	r0, #31
  4012a2:	d80c      	bhi.n	4012be <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4012a4:	4b11      	ldr	r3, [pc, #68]	; (4012ec <pmc_enable_periph_clk+0x50>)
  4012a6:	699a      	ldr	r2, [r3, #24]
  4012a8:	2301      	movs	r3, #1
  4012aa:	4083      	lsls	r3, r0
  4012ac:	4393      	bics	r3, r2
  4012ae:	d018      	beq.n	4012e2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4012b0:	2301      	movs	r3, #1
  4012b2:	fa03 f000 	lsl.w	r0, r3, r0
  4012b6:	4b0d      	ldr	r3, [pc, #52]	; (4012ec <pmc_enable_periph_clk+0x50>)
  4012b8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4012ba:	2000      	movs	r0, #0
  4012bc:	4770      	bx	lr
		ul_id -= 32;
  4012be:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4012c0:	4b0a      	ldr	r3, [pc, #40]	; (4012ec <pmc_enable_periph_clk+0x50>)
  4012c2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4012c6:	2301      	movs	r3, #1
  4012c8:	4083      	lsls	r3, r0
  4012ca:	4393      	bics	r3, r2
  4012cc:	d00b      	beq.n	4012e6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4012ce:	2301      	movs	r3, #1
  4012d0:	fa03 f000 	lsl.w	r0, r3, r0
  4012d4:	4b05      	ldr	r3, [pc, #20]	; (4012ec <pmc_enable_periph_clk+0x50>)
  4012d6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4012da:	2000      	movs	r0, #0
  4012dc:	4770      	bx	lr
		return 1;
  4012de:	2001      	movs	r0, #1
  4012e0:	4770      	bx	lr
	return 0;
  4012e2:	2000      	movs	r0, #0
  4012e4:	4770      	bx	lr
  4012e6:	2000      	movs	r0, #0
}
  4012e8:	4770      	bx	lr
  4012ea:	bf00      	nop
  4012ec:	400e0400 	.word	0x400e0400

004012f0 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  4012f0:	b4f0      	push	{r4, r5, r6, r7}
  4012f2:	b08c      	sub	sp, #48	; 0x30
  4012f4:	4607      	mov	r7, r0
  4012f6:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  4012f8:	ac01      	add	r4, sp, #4
  4012fa:	4d11      	ldr	r5, [pc, #68]	; (401340 <pwm_clocks_generate+0x50>)
  4012fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4012fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401304:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401308:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  40130c:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  40130e:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  401310:	f852 0b04 	ldr.w	r0, [r2], #4
  401314:	fbb6 f0f0 	udiv	r0, r6, r0
  401318:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  40131c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  401320:	d907      	bls.n	401332 <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
  401322:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  401324:	2b0b      	cmp	r3, #11
  401326:	d1f3      	bne.n	401310 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  401328:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
  40132c:	b00c      	add	sp, #48	; 0x30
  40132e:	bcf0      	pop	{r4, r5, r6, r7}
  401330:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  401332:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
  401334:	bf94      	ite	ls
  401336:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
  40133a:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
  40133e:	e7f5      	b.n	40132c <pwm_clocks_generate+0x3c>
  401340:	00404ce4 	.word	0x00404ce4

00401344 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  401344:	b570      	push	{r4, r5, r6, lr}
  401346:	4606      	mov	r6, r0
  401348:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  40134a:	680c      	ldr	r4, [r1, #0]
  40134c:	b144      	cbz	r4, 401360 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  40134e:	6889      	ldr	r1, [r1, #8]
  401350:	4620      	mov	r0, r4
  401352:	4b0c      	ldr	r3, [pc, #48]	; (401384 <pwm_init+0x40>)
  401354:	4798      	blx	r3
  401356:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
  401358:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40135c:	4298      	cmp	r0, r3
  40135e:	d00c      	beq.n	40137a <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  401360:	6868      	ldr	r0, [r5, #4]
  401362:	b140      	cbz	r0, 401376 <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  401364:	68a9      	ldr	r1, [r5, #8]
  401366:	4b07      	ldr	r3, [pc, #28]	; (401384 <pwm_init+0x40>)
  401368:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  40136a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40136e:	4298      	cmp	r0, r3
  401370:	d005      	beq.n	40137e <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
  401372:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  401376:	6034      	str	r4, [r6, #0]
#endif
	return 0;
  401378:	2400      	movs	r4, #0
}
  40137a:	4620      	mov	r0, r4
  40137c:	bd70      	pop	{r4, r5, r6, pc}
			return result;
  40137e:	4604      	mov	r4, r0
  401380:	e7fb      	b.n	40137a <pwm_init+0x36>
  401382:	bf00      	nop
  401384:	004012f1 	.word	0x004012f1

00401388 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  401388:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  40138a:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40138c:	684b      	ldr	r3, [r1, #4]
  40138e:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  401392:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401394:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  401396:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401398:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
  40139a:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40139c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
  4013a0:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4013a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
  4013a6:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4013a8:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
  4013ac:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4013ae:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  4013b2:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  4013b6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  4013ba:	68cb      	ldr	r3, [r1, #12]
  4013bc:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  4013c0:	690b      	ldr	r3, [r1, #16]
  4013c2:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  4013c6:	7d8b      	ldrb	r3, [r1, #22]
  4013c8:	b13b      	cbz	r3, 4013da <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  4013ca:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  4013cc:	8b4b      	ldrh	r3, [r1, #26]
  4013ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  4013d2:	eb00 1442 	add.w	r4, r0, r2, lsl #5
  4013d6:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  4013da:	6c85      	ldr	r5, [r0, #72]	; 0x48
  4013dc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  4013e0:	4093      	lsls	r3, r2
  4013e2:	43db      	mvns	r3, r3
  4013e4:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  4013e6:	7fcc      	ldrb	r4, [r1, #31]
  4013e8:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  4013ec:	7f8c      	ldrb	r4, [r1, #30]
  4013ee:	4094      	lsls	r4, r2
  4013f0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  4013f4:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  4013f6:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  4013f8:	6c44      	ldr	r4, [r0, #68]	; 0x44
  4013fa:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  4013fc:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  401400:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  401404:	f891 4020 	ldrb.w	r4, [r1, #32]
  401408:	4094      	lsls	r4, r2
  40140a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40140e:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  401410:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  401412:	2301      	movs	r3, #1
  401414:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
  401416:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  40141a:	b31c      	cbz	r4, 401464 <pwm_channel_init+0xdc>
		p_pwm->PWM_SCM |= channel;
  40141c:	6a04      	ldr	r4, [r0, #32]
  40141e:	431c      	orrs	r4, r3
  401420:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  401422:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  401426:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  401428:	6e84      	ldr	r4, [r0, #104]	; 0x68
  40142a:	bf0c      	ite	eq
  40142c:	431c      	orreq	r4, r3
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  40142e:	439c      	bicne	r4, r3
  401430:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  401432:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  401436:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  401438:	6e84      	ldr	r4, [r0, #104]	; 0x68
  40143a:	bf0c      	ite	eq
  40143c:	ea44 4303 	orreq.w	r3, r4, r3, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  401440:	ea24 4303 	bicne.w	r3, r4, r3, lsl #16
  401444:	6683      	str	r3, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  401446:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  401448:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  40144a:	23ff      	movs	r3, #255	; 0xff
  40144c:	4093      	lsls	r3, r2
  40144e:	ea24 0403 	bic.w	r4, r4, r3
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  401452:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
  401456:	fa03 f202 	lsl.w	r2, r3, r2
  40145a:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
  40145c:	66c2      	str	r2, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  40145e:	2000      	movs	r0, #0
  401460:	bc70      	pop	{r4, r5, r6}
  401462:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  401464:	6a04      	ldr	r4, [r0, #32]
  401466:	ea24 0403 	bic.w	r4, r4, r3
  40146a:	6204      	str	r4, [r0, #32]
  40146c:	e7d9      	b.n	401422 <pwm_channel_init+0x9a>

0040146e <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  40146e:	2301      	movs	r3, #1
  401470:	fa03 f101 	lsl.w	r1, r3, r1
  401474:	6041      	str	r1, [r0, #4]
  401476:	4770      	bx	lr

00401478 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  401478:	2301      	movs	r3, #1
  40147a:	fa03 f101 	lsl.w	r1, r3, r1
  40147e:	6081      	str	r1, [r0, #8]
  401480:	4770      	bx	lr

00401482 <pwm_cmp_init>:
 * \param p_cmp Configurations of PWM comparison tagged by unit.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_cmp_init(Pwm *p_pwm, pwm_cmp_t *p_cmp)
{
  401482:	b410      	push	{r4}
	uint32_t unit = p_cmp->unit;
  401484:	680a      	ldr	r2, [r1, #0]

	p_pwm->PWM_CMP[unit].PWM_CMPV = PWM_CMPV_CV(p_cmp->ul_value) |
  401486:	688b      	ldr	r3, [r1, #8]
  401488:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			(p_cmp->b_is_decrementing << 24);
  40148c:	7b0c      	ldrb	r4, [r1, #12]
	p_pwm->PWM_CMP[unit].PWM_CMPV = PWM_CMPV_CV(p_cmp->ul_value) |
  40148e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  401492:	f102 0413 	add.w	r4, r2, #19
  401496:	0124      	lsls	r4, r4, #4
  401498:	5103      	str	r3, [r0, r4]

	p_pwm->PWM_CMP[unit].PWM_CMPM = PWM_CMPM_CTR(p_cmp->ul_trigger) |
  40149a:	690b      	ldr	r3, [r1, #16]
  40149c:	011b      	lsls	r3, r3, #4
  40149e:	b2db      	uxtb	r3, r3
			PWM_CMPM_CPR(p_cmp->ul_period) |
  4014a0:	694c      	ldr	r4, [r1, #20]
  4014a2:	0224      	lsls	r4, r4, #8
  4014a4:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
	p_pwm->PWM_CMP[unit].PWM_CMPM = PWM_CMPM_CTR(p_cmp->ul_trigger) |
  4014a8:	4323      	orrs	r3, r4
			PWM_CMPM_CUPR(p_cmp->ul_update_period);
  4014aa:	698c      	ldr	r4, [r1, #24]
  4014ac:	0424      	lsls	r4, r4, #16
  4014ae:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
			PWM_CMPM_CPR(p_cmp->ul_period) |
  4014b2:	4323      	orrs	r3, r4
	p_pwm->PWM_CMP[unit].PWM_CMPM = PWM_CMPM_CTR(p_cmp->ul_trigger) |
  4014b4:	eb00 1402 	add.w	r4, r0, r2, lsl #4
  4014b8:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138

	/** Boolean of generating a match pulse */
	if (p_cmp->b_pulse_on_line_0) {
  4014bc:	7f0b      	ldrb	r3, [r1, #28]
  4014be:	b1d3      	cbz	r3, 4014f6 <pwm_cmp_init+0x74>
		p_pwm->PWM_ELMR[0] |= (1 << unit);
  4014c0:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  4014c2:	2301      	movs	r3, #1
  4014c4:	4093      	lsls	r3, r2
  4014c6:	4323      	orrs	r3, r4
  4014c8:	67c3      	str	r3, [r0, #124]	; 0x7c
	} else {
		p_pwm->PWM_ELMR[0] &= ~((uint32_t) (1 << unit));
	}
	/** Boolean of generating a match pulse */
	if (p_cmp->b_pulse_on_line_1) {
  4014ca:	7f4b      	ldrb	r3, [r1, #29]
  4014cc:	b1d3      	cbz	r3, 401504 <pwm_cmp_init+0x82>
		p_pwm->PWM_ELMR[1] |= (1 << unit);
  4014ce:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  4014d2:	2301      	movs	r3, #1
  4014d4:	4093      	lsls	r3, r2
  4014d6:	4323      	orrs	r3, r4
  4014d8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	} else {
		p_pwm->PWM_ELMR[1] &= ~((uint32_t) (1 << unit));
	}

	/** Boolean of comparison enable */
	if (p_cmp->b_enable) {
  4014dc:	790b      	ldrb	r3, [r1, #4]
  4014de:	b9d3      	cbnz	r3, 401516 <pwm_cmp_init+0x94>
		p_pwm->PWM_CMP[unit].PWM_CMPM |= PWM_CMPM_CEN;
	} else {
		p_pwm->PWM_CMP[unit].PWM_CMPM &= ~PWM_CMPM_CEN;
  4014e0:	eb00 1002 	add.w	r0, r0, r2, lsl #4
  4014e4:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
  4014e8:	f023 0301 	bic.w	r3, r3, #1
  4014ec:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
	}

	return 0;
}
  4014f0:	2000      	movs	r0, #0
  4014f2:	bc10      	pop	{r4}
  4014f4:	4770      	bx	lr
		p_pwm->PWM_ELMR[0] &= ~((uint32_t) (1 << unit));
  4014f6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  4014f8:	2401      	movs	r4, #1
  4014fa:	4094      	lsls	r4, r2
  4014fc:	ea23 0304 	bic.w	r3, r3, r4
  401500:	67c3      	str	r3, [r0, #124]	; 0x7c
  401502:	e7e2      	b.n	4014ca <pwm_cmp_init+0x48>
		p_pwm->PWM_ELMR[1] &= ~((uint32_t) (1 << unit));
  401504:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
  401508:	2401      	movs	r4, #1
  40150a:	4094      	lsls	r4, r2
  40150c:	ea23 0304 	bic.w	r3, r3, r4
  401510:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  401514:	e7e2      	b.n	4014dc <pwm_cmp_init+0x5a>
		p_pwm->PWM_CMP[unit].PWM_CMPM |= PWM_CMPM_CEN;
  401516:	eb00 1002 	add.w	r0, r0, r2, lsl #4
  40151a:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
  40151e:	f043 0301 	orr.w	r3, r3, #1
  401522:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
  401526:	e7e3      	b.n	4014f0 <pwm_cmp_init+0x6e>

00401528 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  401528:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40152a:	0189      	lsls	r1, r1, #6
  40152c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40152e:	2402      	movs	r4, #2
  401530:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  401532:	f04f 31ff 	mov.w	r1, #4294967295
  401536:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  401538:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40153a:	605a      	str	r2, [r3, #4]
}
  40153c:	bc10      	pop	{r4}
  40153e:	4770      	bx	lr

00401540 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  401540:	0189      	lsls	r1, r1, #6
  401542:	2305      	movs	r3, #5
  401544:	5043      	str	r3, [r0, r1]
  401546:	4770      	bx	lr

00401548 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  401548:	b4f0      	push	{r4, r5, r6, r7}
  40154a:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40154c:	2402      	movs	r4, #2
  40154e:	9401      	str	r4, [sp, #4]
  401550:	2408      	movs	r4, #8
  401552:	9402      	str	r4, [sp, #8]
  401554:	2420      	movs	r4, #32
  401556:	9403      	str	r4, [sp, #12]
  401558:	2480      	movs	r4, #128	; 0x80
  40155a:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40155c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40155e:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  401560:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  401562:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  401566:	d814      	bhi.n	401592 <tc_find_mck_divisor+0x4a>
  401568:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  40156a:	42a0      	cmp	r0, r4
  40156c:	d217      	bcs.n	40159e <tc_find_mck_divisor+0x56>
  40156e:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  401570:	af01      	add	r7, sp, #4
  401572:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  401576:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  40157a:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  40157c:	4284      	cmp	r4, r0
  40157e:	d30a      	bcc.n	401596 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  401580:	4286      	cmp	r6, r0
  401582:	d90d      	bls.n	4015a0 <tc_find_mck_divisor+0x58>
			ul_index++) {
  401584:	3501      	adds	r5, #1
	for (ul_index = 0;
  401586:	2d05      	cmp	r5, #5
  401588:	d1f3      	bne.n	401572 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  40158a:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  40158c:	b006      	add	sp, #24
  40158e:	bcf0      	pop	{r4, r5, r6, r7}
  401590:	4770      	bx	lr
			return 0;
  401592:	2000      	movs	r0, #0
  401594:	e7fa      	b.n	40158c <tc_find_mck_divisor+0x44>
  401596:	2000      	movs	r0, #0
  401598:	e7f8      	b.n	40158c <tc_find_mck_divisor+0x44>
	return 1;
  40159a:	2001      	movs	r0, #1
  40159c:	e7f6      	b.n	40158c <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40159e:	2500      	movs	r5, #0
	if (p_uldiv) {
  4015a0:	b12a      	cbz	r2, 4015ae <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  4015a2:	a906      	add	r1, sp, #24
  4015a4:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4015a8:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4015ac:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4015ae:	2b00      	cmp	r3, #0
  4015b0:	d0f3      	beq.n	40159a <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4015b2:	601d      	str	r5, [r3, #0]
	return 1;
  4015b4:	2001      	movs	r0, #1
  4015b6:	e7e9      	b.n	40158c <tc_find_mck_divisor+0x44>

004015b8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4015b8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4015ba:	23ac      	movs	r3, #172	; 0xac
  4015bc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4015be:	680b      	ldr	r3, [r1, #0]
  4015c0:	684a      	ldr	r2, [r1, #4]
  4015c2:	fbb3 f3f2 	udiv	r3, r3, r2
  4015c6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4015c8:	1e5c      	subs	r4, r3, #1
  4015ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4015ce:	4294      	cmp	r4, r2
  4015d0:	d80b      	bhi.n	4015ea <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  4015d2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4015d4:	688b      	ldr	r3, [r1, #8]
  4015d6:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4015d8:	f240 2302 	movw	r3, #514	; 0x202
  4015dc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4015e0:	2350      	movs	r3, #80	; 0x50
  4015e2:	6003      	str	r3, [r0, #0]

	return 0;
  4015e4:	2000      	movs	r0, #0
}
  4015e6:	bc10      	pop	{r4}
  4015e8:	4770      	bx	lr
		return 1;
  4015ea:	2001      	movs	r0, #1
  4015ec:	e7fb      	b.n	4015e6 <uart_init+0x2e>

004015ee <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4015ee:	6943      	ldr	r3, [r0, #20]
  4015f0:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4015f4:	bf1a      	itte	ne
  4015f6:	61c1      	strne	r1, [r0, #28]
	return 0;
  4015f8:	2000      	movne	r0, #0
		return 1;
  4015fa:	2001      	moveq	r0, #1
}
  4015fc:	4770      	bx	lr

004015fe <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4015fe:	6943      	ldr	r3, [r0, #20]
  401600:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401604:	bf1d      	ittte	ne
  401606:	6983      	ldrne	r3, [r0, #24]
  401608:	700b      	strbne	r3, [r1, #0]
	return 0;
  40160a:	2000      	movne	r0, #0
		return 1;
  40160c:	2001      	moveq	r0, #1
}
  40160e:	4770      	bx	lr

00401610 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401610:	6943      	ldr	r3, [r0, #20]
  401612:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401616:	bf1d      	ittte	ne
  401618:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  40161c:	61c1      	strne	r1, [r0, #28]
	return 0;
  40161e:	2000      	movne	r0, #0
		return 1;
  401620:	2001      	moveq	r0, #1
}
  401622:	4770      	bx	lr

00401624 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401624:	6943      	ldr	r3, [r0, #20]
  401626:	f013 0f01 	tst.w	r3, #1
  40162a:	d005      	beq.n	401638 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40162c:	6983      	ldr	r3, [r0, #24]
  40162e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401632:	600b      	str	r3, [r1, #0]

	return 0;
  401634:	2000      	movs	r0, #0
  401636:	4770      	bx	lr
		return 1;
  401638:	2001      	movs	r0, #1
}
  40163a:	4770      	bx	lr

0040163c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40163c:	e7fe      	b.n	40163c <Dummy_Handler>
	...

00401640 <Reset_Handler>:
{
  401640:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  401642:	4b21      	ldr	r3, [pc, #132]	; (4016c8 <Reset_Handler+0x88>)
  401644:	4a21      	ldr	r2, [pc, #132]	; (4016cc <Reset_Handler+0x8c>)
  401646:	429a      	cmp	r2, r3
  401648:	d928      	bls.n	40169c <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  40164a:	4b21      	ldr	r3, [pc, #132]	; (4016d0 <Reset_Handler+0x90>)
  40164c:	4a1e      	ldr	r2, [pc, #120]	; (4016c8 <Reset_Handler+0x88>)
  40164e:	429a      	cmp	r2, r3
  401650:	d20c      	bcs.n	40166c <Reset_Handler+0x2c>
  401652:	3b01      	subs	r3, #1
  401654:	1a9b      	subs	r3, r3, r2
  401656:	f023 0303 	bic.w	r3, r3, #3
  40165a:	3304      	adds	r3, #4
  40165c:	4413      	add	r3, r2
  40165e:	491b      	ldr	r1, [pc, #108]	; (4016cc <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  401660:	f851 0b04 	ldr.w	r0, [r1], #4
  401664:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  401668:	429a      	cmp	r2, r3
  40166a:	d1f9      	bne.n	401660 <Reset_Handler+0x20>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40166c:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  40166e:	4b19      	ldr	r3, [pc, #100]	; (4016d4 <Reset_Handler+0x94>)
  401670:	4a19      	ldr	r2, [pc, #100]	; (4016d8 <Reset_Handler+0x98>)
  401672:	429a      	cmp	r2, r3
  401674:	d20a      	bcs.n	40168c <Reset_Handler+0x4c>
  401676:	3b01      	subs	r3, #1
  401678:	1a9b      	subs	r3, r3, r2
  40167a:	f023 0303 	bic.w	r3, r3, #3
  40167e:	3304      	adds	r3, #4
  401680:	4413      	add	r3, r2
		*pDest++ = 0;
  401682:	2100      	movs	r1, #0
  401684:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  401688:	429a      	cmp	r2, r3
  40168a:	d1fb      	bne.n	401684 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  40168c:	4b13      	ldr	r3, [pc, #76]	; (4016dc <Reset_Handler+0x9c>)
  40168e:	4a14      	ldr	r2, [pc, #80]	; (4016e0 <Reset_Handler+0xa0>)
  401690:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  401692:	4b14      	ldr	r3, [pc, #80]	; (4016e4 <Reset_Handler+0xa4>)
  401694:	4798      	blx	r3
	main();
  401696:	4b14      	ldr	r3, [pc, #80]	; (4016e8 <Reset_Handler+0xa8>)
  401698:	4798      	blx	r3
  40169a:	e7fe      	b.n	40169a <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  40169c:	4b0a      	ldr	r3, [pc, #40]	; (4016c8 <Reset_Handler+0x88>)
  40169e:	4a0b      	ldr	r2, [pc, #44]	; (4016cc <Reset_Handler+0x8c>)
  4016a0:	429a      	cmp	r2, r3
  4016a2:	d2e3      	bcs.n	40166c <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4016a4:	4b0a      	ldr	r3, [pc, #40]	; (4016d0 <Reset_Handler+0x90>)
  4016a6:	4808      	ldr	r0, [pc, #32]	; (4016c8 <Reset_Handler+0x88>)
  4016a8:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4016aa:	4611      	mov	r1, r2
  4016ac:	3a04      	subs	r2, #4
  4016ae:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  4016b0:	2800      	cmp	r0, #0
  4016b2:	d0db      	beq.n	40166c <Reset_Handler+0x2c>
  4016b4:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  4016b8:	f852 0904 	ldr.w	r0, [r2], #-4
  4016bc:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  4016c0:	42ca      	cmn	r2, r1
  4016c2:	d1f9      	bne.n	4016b8 <Reset_Handler+0x78>
  4016c4:	e7d2      	b.n	40166c <Reset_Handler+0x2c>
  4016c6:	bf00      	nop
  4016c8:	20000000 	.word	0x20000000
  4016cc:	00404ea8 	.word	0x00404ea8
  4016d0:	200009b8 	.word	0x200009b8
  4016d4:	20000acc 	.word	0x20000acc
  4016d8:	200009b8 	.word	0x200009b8
  4016dc:	e000ed00 	.word	0xe000ed00
  4016e0:	00400000 	.word	0x00400000
  4016e4:	004018e1 	.word	0x004018e1
  4016e8:	0040079d 	.word	0x0040079d

004016ec <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4016ec:	4b3c      	ldr	r3, [pc, #240]	; (4017e0 <SystemCoreClockUpdate+0xf4>)
  4016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016f0:	f003 0303 	and.w	r3, r3, #3
  4016f4:	2b03      	cmp	r3, #3
  4016f6:	d80e      	bhi.n	401716 <SystemCoreClockUpdate+0x2a>
  4016f8:	e8df f003 	tbb	[pc, r3]
  4016fc:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401700:	4b38      	ldr	r3, [pc, #224]	; (4017e4 <SystemCoreClockUpdate+0xf8>)
  401702:	695b      	ldr	r3, [r3, #20]
  401704:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401708:	bf14      	ite	ne
  40170a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40170e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401712:	4b35      	ldr	r3, [pc, #212]	; (4017e8 <SystemCoreClockUpdate+0xfc>)
  401714:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401716:	4b32      	ldr	r3, [pc, #200]	; (4017e0 <SystemCoreClockUpdate+0xf4>)
  401718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40171a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40171e:	2b70      	cmp	r3, #112	; 0x70
  401720:	d055      	beq.n	4017ce <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401722:	4b2f      	ldr	r3, [pc, #188]	; (4017e0 <SystemCoreClockUpdate+0xf4>)
  401724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  401726:	4930      	ldr	r1, [pc, #192]	; (4017e8 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401728:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  40172c:	680b      	ldr	r3, [r1, #0]
  40172e:	40d3      	lsrs	r3, r2
  401730:	600b      	str	r3, [r1, #0]
  401732:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401734:	4b2a      	ldr	r3, [pc, #168]	; (4017e0 <SystemCoreClockUpdate+0xf4>)
  401736:	6a1b      	ldr	r3, [r3, #32]
  401738:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40173c:	d003      	beq.n	401746 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40173e:	4a2b      	ldr	r2, [pc, #172]	; (4017ec <SystemCoreClockUpdate+0x100>)
  401740:	4b29      	ldr	r3, [pc, #164]	; (4017e8 <SystemCoreClockUpdate+0xfc>)
  401742:	601a      	str	r2, [r3, #0]
  401744:	e7e7      	b.n	401716 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401746:	4a2a      	ldr	r2, [pc, #168]	; (4017f0 <SystemCoreClockUpdate+0x104>)
  401748:	4b27      	ldr	r3, [pc, #156]	; (4017e8 <SystemCoreClockUpdate+0xfc>)
  40174a:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40174c:	4b24      	ldr	r3, [pc, #144]	; (4017e0 <SystemCoreClockUpdate+0xf4>)
  40174e:	6a1b      	ldr	r3, [r3, #32]
  401750:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401754:	2b10      	cmp	r3, #16
  401756:	d005      	beq.n	401764 <SystemCoreClockUpdate+0x78>
  401758:	2b20      	cmp	r3, #32
  40175a:	d1dc      	bne.n	401716 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40175c:	4a23      	ldr	r2, [pc, #140]	; (4017ec <SystemCoreClockUpdate+0x100>)
  40175e:	4b22      	ldr	r3, [pc, #136]	; (4017e8 <SystemCoreClockUpdate+0xfc>)
  401760:	601a      	str	r2, [r3, #0]
			break;
  401762:	e7d8      	b.n	401716 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401764:	4a23      	ldr	r2, [pc, #140]	; (4017f4 <SystemCoreClockUpdate+0x108>)
  401766:	4b20      	ldr	r3, [pc, #128]	; (4017e8 <SystemCoreClockUpdate+0xfc>)
  401768:	601a      	str	r2, [r3, #0]
			break;
  40176a:	e7d4      	b.n	401716 <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40176c:	4b1c      	ldr	r3, [pc, #112]	; (4017e0 <SystemCoreClockUpdate+0xf4>)
  40176e:	6a1b      	ldr	r3, [r3, #32]
  401770:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401774:	d018      	beq.n	4017a8 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401776:	4a1d      	ldr	r2, [pc, #116]	; (4017ec <SystemCoreClockUpdate+0x100>)
  401778:	4b1b      	ldr	r3, [pc, #108]	; (4017e8 <SystemCoreClockUpdate+0xfc>)
  40177a:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40177c:	4b18      	ldr	r3, [pc, #96]	; (4017e0 <SystemCoreClockUpdate+0xf4>)
  40177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401780:	f003 0303 	and.w	r3, r3, #3
  401784:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401786:	4a16      	ldr	r2, [pc, #88]	; (4017e0 <SystemCoreClockUpdate+0xf4>)
  401788:	bf07      	ittee	eq
  40178a:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40178c:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40178e:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401790:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  401792:	4815      	ldr	r0, [pc, #84]	; (4017e8 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401794:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401798:	6803      	ldr	r3, [r0, #0]
  40179a:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  40179e:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4017a0:	fbb3 f3f2 	udiv	r3, r3, r2
  4017a4:	6003      	str	r3, [r0, #0]
  4017a6:	e7b6      	b.n	401716 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4017a8:	4a11      	ldr	r2, [pc, #68]	; (4017f0 <SystemCoreClockUpdate+0x104>)
  4017aa:	4b0f      	ldr	r3, [pc, #60]	; (4017e8 <SystemCoreClockUpdate+0xfc>)
  4017ac:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4017ae:	4b0c      	ldr	r3, [pc, #48]	; (4017e0 <SystemCoreClockUpdate+0xf4>)
  4017b0:	6a1b      	ldr	r3, [r3, #32]
  4017b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017b6:	2b10      	cmp	r3, #16
  4017b8:	d005      	beq.n	4017c6 <SystemCoreClockUpdate+0xda>
  4017ba:	2b20      	cmp	r3, #32
  4017bc:	d1de      	bne.n	40177c <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4017be:	4a0b      	ldr	r2, [pc, #44]	; (4017ec <SystemCoreClockUpdate+0x100>)
  4017c0:	4b09      	ldr	r3, [pc, #36]	; (4017e8 <SystemCoreClockUpdate+0xfc>)
  4017c2:	601a      	str	r2, [r3, #0]
					break;
  4017c4:	e7da      	b.n	40177c <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4017c6:	4a0b      	ldr	r2, [pc, #44]	; (4017f4 <SystemCoreClockUpdate+0x108>)
  4017c8:	4b07      	ldr	r3, [pc, #28]	; (4017e8 <SystemCoreClockUpdate+0xfc>)
  4017ca:	601a      	str	r2, [r3, #0]
					break;
  4017cc:	e7d6      	b.n	40177c <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4017ce:	4a06      	ldr	r2, [pc, #24]	; (4017e8 <SystemCoreClockUpdate+0xfc>)
  4017d0:	6813      	ldr	r3, [r2, #0]
  4017d2:	4909      	ldr	r1, [pc, #36]	; (4017f8 <SystemCoreClockUpdate+0x10c>)
  4017d4:	fba1 1303 	umull	r1, r3, r1, r3
  4017d8:	085b      	lsrs	r3, r3, #1
  4017da:	6013      	str	r3, [r2, #0]
  4017dc:	4770      	bx	lr
  4017de:	bf00      	nop
  4017e0:	400e0400 	.word	0x400e0400
  4017e4:	400e1410 	.word	0x400e1410
  4017e8:	20000004 	.word	0x20000004
  4017ec:	00b71b00 	.word	0x00b71b00
  4017f0:	003d0900 	.word	0x003d0900
  4017f4:	007a1200 	.word	0x007a1200
  4017f8:	aaaaaaab 	.word	0xaaaaaaab

004017fc <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4017fc:	4b1a      	ldr	r3, [pc, #104]	; (401868 <system_init_flash+0x6c>)
  4017fe:	4298      	cmp	r0, r3
  401800:	d914      	bls.n	40182c <system_init_flash+0x30>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401802:	4b1a      	ldr	r3, [pc, #104]	; (40186c <system_init_flash+0x70>)
  401804:	4298      	cmp	r0, r3
  401806:	d919      	bls.n	40183c <system_init_flash+0x40>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401808:	4b19      	ldr	r3, [pc, #100]	; (401870 <system_init_flash+0x74>)
  40180a:	4298      	cmp	r0, r3
  40180c:	d91d      	bls.n	40184a <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40180e:	4b19      	ldr	r3, [pc, #100]	; (401874 <system_init_flash+0x78>)
  401810:	4298      	cmp	r0, r3
  401812:	d921      	bls.n	401858 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401814:	4b18      	ldr	r3, [pc, #96]	; (401878 <system_init_flash+0x7c>)
  401816:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401818:	bf94      	ite	ls
  40181a:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40181e:	4b17      	ldrhi	r3, [pc, #92]	; (40187c <system_init_flash+0x80>)
  401820:	4a17      	ldr	r2, [pc, #92]	; (401880 <system_init_flash+0x84>)
  401822:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401824:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401828:	6013      	str	r3, [r2, #0]
  40182a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40182c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  401830:	4a13      	ldr	r2, [pc, #76]	; (401880 <system_init_flash+0x84>)
  401832:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401834:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401838:	6013      	str	r3, [r2, #0]
  40183a:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40183c:	4b11      	ldr	r3, [pc, #68]	; (401884 <system_init_flash+0x88>)
  40183e:	4a10      	ldr	r2, [pc, #64]	; (401880 <system_init_flash+0x84>)
  401840:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401842:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401846:	6013      	str	r3, [r2, #0]
  401848:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40184a:	4b0f      	ldr	r3, [pc, #60]	; (401888 <system_init_flash+0x8c>)
  40184c:	4a0c      	ldr	r2, [pc, #48]	; (401880 <system_init_flash+0x84>)
  40184e:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401850:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401854:	6013      	str	r3, [r2, #0]
  401856:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401858:	4b0c      	ldr	r3, [pc, #48]	; (40188c <system_init_flash+0x90>)
  40185a:	4a09      	ldr	r2, [pc, #36]	; (401880 <system_init_flash+0x84>)
  40185c:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40185e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401862:	6013      	str	r3, [r2, #0]
  401864:	4770      	bx	lr
  401866:	bf00      	nop
  401868:	01312cff 	.word	0x01312cff
  40186c:	026259ff 	.word	0x026259ff
  401870:	039386ff 	.word	0x039386ff
  401874:	04c4b3ff 	.word	0x04c4b3ff
  401878:	05f5e0ff 	.word	0x05f5e0ff
  40187c:	04000500 	.word	0x04000500
  401880:	400e0a00 	.word	0x400e0a00
  401884:	04000100 	.word	0x04000100
  401888:	04000200 	.word	0x04000200
  40188c:	04000300 	.word	0x04000300

00401890 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401890:	4b0a      	ldr	r3, [pc, #40]	; (4018bc <_sbrk+0x2c>)
  401892:	681b      	ldr	r3, [r3, #0]
  401894:	b153      	cbz	r3, 4018ac <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401896:	4b09      	ldr	r3, [pc, #36]	; (4018bc <_sbrk+0x2c>)
  401898:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40189a:	181a      	adds	r2, r3, r0
  40189c:	4908      	ldr	r1, [pc, #32]	; (4018c0 <_sbrk+0x30>)
  40189e:	4291      	cmp	r1, r2
  4018a0:	db08      	blt.n	4018b4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4018a2:	4610      	mov	r0, r2
  4018a4:	4a05      	ldr	r2, [pc, #20]	; (4018bc <_sbrk+0x2c>)
  4018a6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4018a8:	4618      	mov	r0, r3
  4018aa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4018ac:	4a05      	ldr	r2, [pc, #20]	; (4018c4 <_sbrk+0x34>)
  4018ae:	4b03      	ldr	r3, [pc, #12]	; (4018bc <_sbrk+0x2c>)
  4018b0:	601a      	str	r2, [r3, #0]
  4018b2:	e7f0      	b.n	401896 <_sbrk+0x6>
		return (caddr_t) -1;	
  4018b4:	f04f 30ff 	mov.w	r0, #4294967295
}
  4018b8:	4770      	bx	lr
  4018ba:	bf00      	nop
  4018bc:	20000a4c 	.word	0x20000a4c
  4018c0:	20027ffc 	.word	0x20027ffc
  4018c4:	20003ad0 	.word	0x20003ad0

004018c8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4018c8:	f04f 30ff 	mov.w	r0, #4294967295
  4018cc:	4770      	bx	lr

004018ce <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4018ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4018d2:	604b      	str	r3, [r1, #4]

	return 0;
}
  4018d4:	2000      	movs	r0, #0
  4018d6:	4770      	bx	lr

004018d8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4018d8:	2001      	movs	r0, #1
  4018da:	4770      	bx	lr

004018dc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4018dc:	2000      	movs	r0, #0
  4018de:	4770      	bx	lr

004018e0 <__libc_init_array>:
  4018e0:	b570      	push	{r4, r5, r6, lr}
  4018e2:	4e0f      	ldr	r6, [pc, #60]	; (401920 <__libc_init_array+0x40>)
  4018e4:	4d0f      	ldr	r5, [pc, #60]	; (401924 <__libc_init_array+0x44>)
  4018e6:	1b76      	subs	r6, r6, r5
  4018e8:	10b6      	asrs	r6, r6, #2
  4018ea:	bf18      	it	ne
  4018ec:	2400      	movne	r4, #0
  4018ee:	d005      	beq.n	4018fc <__libc_init_array+0x1c>
  4018f0:	3401      	adds	r4, #1
  4018f2:	f855 3b04 	ldr.w	r3, [r5], #4
  4018f6:	4798      	blx	r3
  4018f8:	42a6      	cmp	r6, r4
  4018fa:	d1f9      	bne.n	4018f0 <__libc_init_array+0x10>
  4018fc:	4e0a      	ldr	r6, [pc, #40]	; (401928 <__libc_init_array+0x48>)
  4018fe:	4d0b      	ldr	r5, [pc, #44]	; (40192c <__libc_init_array+0x4c>)
  401900:	1b76      	subs	r6, r6, r5
  401902:	f003 fabb 	bl	404e7c <_init>
  401906:	10b6      	asrs	r6, r6, #2
  401908:	bf18      	it	ne
  40190a:	2400      	movne	r4, #0
  40190c:	d006      	beq.n	40191c <__libc_init_array+0x3c>
  40190e:	3401      	adds	r4, #1
  401910:	f855 3b04 	ldr.w	r3, [r5], #4
  401914:	4798      	blx	r3
  401916:	42a6      	cmp	r6, r4
  401918:	d1f9      	bne.n	40190e <__libc_init_array+0x2e>
  40191a:	bd70      	pop	{r4, r5, r6, pc}
  40191c:	bd70      	pop	{r4, r5, r6, pc}
  40191e:	bf00      	nop
  401920:	00404e88 	.word	0x00404e88
  401924:	00404e88 	.word	0x00404e88
  401928:	00404e90 	.word	0x00404e90
  40192c:	00404e88 	.word	0x00404e88

00401930 <iprintf>:
  401930:	b40f      	push	{r0, r1, r2, r3}
  401932:	b500      	push	{lr}
  401934:	4907      	ldr	r1, [pc, #28]	; (401954 <iprintf+0x24>)
  401936:	b083      	sub	sp, #12
  401938:	ab04      	add	r3, sp, #16
  40193a:	6808      	ldr	r0, [r1, #0]
  40193c:	f853 2b04 	ldr.w	r2, [r3], #4
  401940:	6881      	ldr	r1, [r0, #8]
  401942:	9301      	str	r3, [sp, #4]
  401944:	f000 fa2a 	bl	401d9c <_vfiprintf_r>
  401948:	b003      	add	sp, #12
  40194a:	f85d eb04 	ldr.w	lr, [sp], #4
  40194e:	b004      	add	sp, #16
  401950:	4770      	bx	lr
  401952:	bf00      	nop
  401954:	20000008 	.word	0x20000008

00401958 <memset>:
  401958:	b470      	push	{r4, r5, r6}
  40195a:	0786      	lsls	r6, r0, #30
  40195c:	d046      	beq.n	4019ec <memset+0x94>
  40195e:	1e54      	subs	r4, r2, #1
  401960:	2a00      	cmp	r2, #0
  401962:	d041      	beq.n	4019e8 <memset+0x90>
  401964:	b2ca      	uxtb	r2, r1
  401966:	4603      	mov	r3, r0
  401968:	e002      	b.n	401970 <memset+0x18>
  40196a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40196e:	d33b      	bcc.n	4019e8 <memset+0x90>
  401970:	f803 2b01 	strb.w	r2, [r3], #1
  401974:	079d      	lsls	r5, r3, #30
  401976:	d1f8      	bne.n	40196a <memset+0x12>
  401978:	2c03      	cmp	r4, #3
  40197a:	d92e      	bls.n	4019da <memset+0x82>
  40197c:	b2cd      	uxtb	r5, r1
  40197e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401982:	2c0f      	cmp	r4, #15
  401984:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401988:	d919      	bls.n	4019be <memset+0x66>
  40198a:	f103 0210 	add.w	r2, r3, #16
  40198e:	4626      	mov	r6, r4
  401990:	3e10      	subs	r6, #16
  401992:	2e0f      	cmp	r6, #15
  401994:	f842 5c10 	str.w	r5, [r2, #-16]
  401998:	f842 5c0c 	str.w	r5, [r2, #-12]
  40199c:	f842 5c08 	str.w	r5, [r2, #-8]
  4019a0:	f842 5c04 	str.w	r5, [r2, #-4]
  4019a4:	f102 0210 	add.w	r2, r2, #16
  4019a8:	d8f2      	bhi.n	401990 <memset+0x38>
  4019aa:	f1a4 0210 	sub.w	r2, r4, #16
  4019ae:	f022 020f 	bic.w	r2, r2, #15
  4019b2:	f004 040f 	and.w	r4, r4, #15
  4019b6:	3210      	adds	r2, #16
  4019b8:	2c03      	cmp	r4, #3
  4019ba:	4413      	add	r3, r2
  4019bc:	d90d      	bls.n	4019da <memset+0x82>
  4019be:	461e      	mov	r6, r3
  4019c0:	4622      	mov	r2, r4
  4019c2:	3a04      	subs	r2, #4
  4019c4:	2a03      	cmp	r2, #3
  4019c6:	f846 5b04 	str.w	r5, [r6], #4
  4019ca:	d8fa      	bhi.n	4019c2 <memset+0x6a>
  4019cc:	1f22      	subs	r2, r4, #4
  4019ce:	f022 0203 	bic.w	r2, r2, #3
  4019d2:	3204      	adds	r2, #4
  4019d4:	4413      	add	r3, r2
  4019d6:	f004 0403 	and.w	r4, r4, #3
  4019da:	b12c      	cbz	r4, 4019e8 <memset+0x90>
  4019dc:	b2c9      	uxtb	r1, r1
  4019de:	441c      	add	r4, r3
  4019e0:	f803 1b01 	strb.w	r1, [r3], #1
  4019e4:	429c      	cmp	r4, r3
  4019e6:	d1fb      	bne.n	4019e0 <memset+0x88>
  4019e8:	bc70      	pop	{r4, r5, r6}
  4019ea:	4770      	bx	lr
  4019ec:	4614      	mov	r4, r2
  4019ee:	4603      	mov	r3, r0
  4019f0:	e7c2      	b.n	401978 <memset+0x20>
  4019f2:	bf00      	nop

004019f4 <_puts_r>:
  4019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4019f6:	4605      	mov	r5, r0
  4019f8:	b089      	sub	sp, #36	; 0x24
  4019fa:	4608      	mov	r0, r1
  4019fc:	460c      	mov	r4, r1
  4019fe:	f000 f91f 	bl	401c40 <strlen>
  401a02:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401a04:	4f21      	ldr	r7, [pc, #132]	; (401a8c <_puts_r+0x98>)
  401a06:	9404      	str	r4, [sp, #16]
  401a08:	2601      	movs	r6, #1
  401a0a:	1c44      	adds	r4, r0, #1
  401a0c:	a904      	add	r1, sp, #16
  401a0e:	2202      	movs	r2, #2
  401a10:	9403      	str	r4, [sp, #12]
  401a12:	9005      	str	r0, [sp, #20]
  401a14:	68ac      	ldr	r4, [r5, #8]
  401a16:	9706      	str	r7, [sp, #24]
  401a18:	9607      	str	r6, [sp, #28]
  401a1a:	9101      	str	r1, [sp, #4]
  401a1c:	9202      	str	r2, [sp, #8]
  401a1e:	b353      	cbz	r3, 401a76 <_puts_r+0x82>
  401a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401a22:	f013 0f01 	tst.w	r3, #1
  401a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a2a:	b29a      	uxth	r2, r3
  401a2c:	d101      	bne.n	401a32 <_puts_r+0x3e>
  401a2e:	0590      	lsls	r0, r2, #22
  401a30:	d525      	bpl.n	401a7e <_puts_r+0x8a>
  401a32:	0491      	lsls	r1, r2, #18
  401a34:	d406      	bmi.n	401a44 <_puts_r+0x50>
  401a36:	6e62      	ldr	r2, [r4, #100]	; 0x64
  401a38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401a3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  401a40:	81a3      	strh	r3, [r4, #12]
  401a42:	6662      	str	r2, [r4, #100]	; 0x64
  401a44:	4628      	mov	r0, r5
  401a46:	aa01      	add	r2, sp, #4
  401a48:	4621      	mov	r1, r4
  401a4a:	f001 fba9 	bl	4031a0 <__sfvwrite_r>
  401a4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401a50:	2800      	cmp	r0, #0
  401a52:	bf0c      	ite	eq
  401a54:	250a      	moveq	r5, #10
  401a56:	f04f 35ff 	movne.w	r5, #4294967295
  401a5a:	07da      	lsls	r2, r3, #31
  401a5c:	d402      	bmi.n	401a64 <_puts_r+0x70>
  401a5e:	89a3      	ldrh	r3, [r4, #12]
  401a60:	059b      	lsls	r3, r3, #22
  401a62:	d502      	bpl.n	401a6a <_puts_r+0x76>
  401a64:	4628      	mov	r0, r5
  401a66:	b009      	add	sp, #36	; 0x24
  401a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401a6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401a6c:	f001 fd4e 	bl	40350c <__retarget_lock_release_recursive>
  401a70:	4628      	mov	r0, r5
  401a72:	b009      	add	sp, #36	; 0x24
  401a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401a76:	4628      	mov	r0, r5
  401a78:	f001 f986 	bl	402d88 <__sinit>
  401a7c:	e7d0      	b.n	401a20 <_puts_r+0x2c>
  401a7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401a80:	f001 fd42 	bl	403508 <__retarget_lock_acquire_recursive>
  401a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a88:	b29a      	uxth	r2, r3
  401a8a:	e7d2      	b.n	401a32 <_puts_r+0x3e>
  401a8c:	00404d14 	.word	0x00404d14

00401a90 <puts>:
  401a90:	4b02      	ldr	r3, [pc, #8]	; (401a9c <puts+0xc>)
  401a92:	4601      	mov	r1, r0
  401a94:	6818      	ldr	r0, [r3, #0]
  401a96:	f7ff bfad 	b.w	4019f4 <_puts_r>
  401a9a:	bf00      	nop
  401a9c:	20000008 	.word	0x20000008

00401aa0 <setbuf>:
  401aa0:	2900      	cmp	r1, #0
  401aa2:	bf0c      	ite	eq
  401aa4:	2202      	moveq	r2, #2
  401aa6:	2200      	movne	r2, #0
  401aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401aac:	f000 b800 	b.w	401ab0 <setvbuf>

00401ab0 <setvbuf>:
  401ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401ab4:	4c61      	ldr	r4, [pc, #388]	; (401c3c <setvbuf+0x18c>)
  401ab6:	6825      	ldr	r5, [r4, #0]
  401ab8:	b083      	sub	sp, #12
  401aba:	4604      	mov	r4, r0
  401abc:	460f      	mov	r7, r1
  401abe:	4690      	mov	r8, r2
  401ac0:	461e      	mov	r6, r3
  401ac2:	b115      	cbz	r5, 401aca <setvbuf+0x1a>
  401ac4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401ac6:	2b00      	cmp	r3, #0
  401ac8:	d064      	beq.n	401b94 <setvbuf+0xe4>
  401aca:	f1b8 0f02 	cmp.w	r8, #2
  401ace:	d006      	beq.n	401ade <setvbuf+0x2e>
  401ad0:	f1b8 0f01 	cmp.w	r8, #1
  401ad4:	f200 809f 	bhi.w	401c16 <setvbuf+0x166>
  401ad8:	2e00      	cmp	r6, #0
  401ada:	f2c0 809c 	blt.w	401c16 <setvbuf+0x166>
  401ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401ae0:	07d8      	lsls	r0, r3, #31
  401ae2:	d534      	bpl.n	401b4e <setvbuf+0x9e>
  401ae4:	4621      	mov	r1, r4
  401ae6:	4628      	mov	r0, r5
  401ae8:	f001 f8f6 	bl	402cd8 <_fflush_r>
  401aec:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401aee:	b141      	cbz	r1, 401b02 <setvbuf+0x52>
  401af0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401af4:	4299      	cmp	r1, r3
  401af6:	d002      	beq.n	401afe <setvbuf+0x4e>
  401af8:	4628      	mov	r0, r5
  401afa:	f001 fa6b 	bl	402fd4 <_free_r>
  401afe:	2300      	movs	r3, #0
  401b00:	6323      	str	r3, [r4, #48]	; 0x30
  401b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401b06:	2200      	movs	r2, #0
  401b08:	61a2      	str	r2, [r4, #24]
  401b0a:	6062      	str	r2, [r4, #4]
  401b0c:	061a      	lsls	r2, r3, #24
  401b0e:	d43a      	bmi.n	401b86 <setvbuf+0xd6>
  401b10:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401b14:	f023 0303 	bic.w	r3, r3, #3
  401b18:	f1b8 0f02 	cmp.w	r8, #2
  401b1c:	81a3      	strh	r3, [r4, #12]
  401b1e:	d01d      	beq.n	401b5c <setvbuf+0xac>
  401b20:	ab01      	add	r3, sp, #4
  401b22:	466a      	mov	r2, sp
  401b24:	4621      	mov	r1, r4
  401b26:	4628      	mov	r0, r5
  401b28:	f001 fcf2 	bl	403510 <__swhatbuf_r>
  401b2c:	89a3      	ldrh	r3, [r4, #12]
  401b2e:	4318      	orrs	r0, r3
  401b30:	81a0      	strh	r0, [r4, #12]
  401b32:	2e00      	cmp	r6, #0
  401b34:	d132      	bne.n	401b9c <setvbuf+0xec>
  401b36:	9e00      	ldr	r6, [sp, #0]
  401b38:	4630      	mov	r0, r6
  401b3a:	f001 fd61 	bl	403600 <malloc>
  401b3e:	4607      	mov	r7, r0
  401b40:	2800      	cmp	r0, #0
  401b42:	d06b      	beq.n	401c1c <setvbuf+0x16c>
  401b44:	89a3      	ldrh	r3, [r4, #12]
  401b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401b4a:	81a3      	strh	r3, [r4, #12]
  401b4c:	e028      	b.n	401ba0 <setvbuf+0xf0>
  401b4e:	89a3      	ldrh	r3, [r4, #12]
  401b50:	0599      	lsls	r1, r3, #22
  401b52:	d4c7      	bmi.n	401ae4 <setvbuf+0x34>
  401b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401b56:	f001 fcd7 	bl	403508 <__retarget_lock_acquire_recursive>
  401b5a:	e7c3      	b.n	401ae4 <setvbuf+0x34>
  401b5c:	2500      	movs	r5, #0
  401b5e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401b60:	2600      	movs	r6, #0
  401b62:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401b66:	f043 0302 	orr.w	r3, r3, #2
  401b6a:	2001      	movs	r0, #1
  401b6c:	60a6      	str	r6, [r4, #8]
  401b6e:	07ce      	lsls	r6, r1, #31
  401b70:	81a3      	strh	r3, [r4, #12]
  401b72:	6022      	str	r2, [r4, #0]
  401b74:	6122      	str	r2, [r4, #16]
  401b76:	6160      	str	r0, [r4, #20]
  401b78:	d401      	bmi.n	401b7e <setvbuf+0xce>
  401b7a:	0598      	lsls	r0, r3, #22
  401b7c:	d53e      	bpl.n	401bfc <setvbuf+0x14c>
  401b7e:	4628      	mov	r0, r5
  401b80:	b003      	add	sp, #12
  401b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401b86:	6921      	ldr	r1, [r4, #16]
  401b88:	4628      	mov	r0, r5
  401b8a:	f001 fa23 	bl	402fd4 <_free_r>
  401b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401b92:	e7bd      	b.n	401b10 <setvbuf+0x60>
  401b94:	4628      	mov	r0, r5
  401b96:	f001 f8f7 	bl	402d88 <__sinit>
  401b9a:	e796      	b.n	401aca <setvbuf+0x1a>
  401b9c:	2f00      	cmp	r7, #0
  401b9e:	d0cb      	beq.n	401b38 <setvbuf+0x88>
  401ba0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401ba2:	2b00      	cmp	r3, #0
  401ba4:	d033      	beq.n	401c0e <setvbuf+0x15e>
  401ba6:	9b00      	ldr	r3, [sp, #0]
  401ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401bac:	6027      	str	r7, [r4, #0]
  401bae:	429e      	cmp	r6, r3
  401bb0:	bf1c      	itt	ne
  401bb2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401bb6:	81a2      	strhne	r2, [r4, #12]
  401bb8:	f1b8 0f01 	cmp.w	r8, #1
  401bbc:	bf04      	itt	eq
  401bbe:	f042 0201 	orreq.w	r2, r2, #1
  401bc2:	81a2      	strheq	r2, [r4, #12]
  401bc4:	b292      	uxth	r2, r2
  401bc6:	f012 0308 	ands.w	r3, r2, #8
  401bca:	6127      	str	r7, [r4, #16]
  401bcc:	6166      	str	r6, [r4, #20]
  401bce:	d00e      	beq.n	401bee <setvbuf+0x13e>
  401bd0:	07d1      	lsls	r1, r2, #31
  401bd2:	d51a      	bpl.n	401c0a <setvbuf+0x15a>
  401bd4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401bd6:	4276      	negs	r6, r6
  401bd8:	2300      	movs	r3, #0
  401bda:	f015 0501 	ands.w	r5, r5, #1
  401bde:	61a6      	str	r6, [r4, #24]
  401be0:	60a3      	str	r3, [r4, #8]
  401be2:	d009      	beq.n	401bf8 <setvbuf+0x148>
  401be4:	2500      	movs	r5, #0
  401be6:	4628      	mov	r0, r5
  401be8:	b003      	add	sp, #12
  401bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401bee:	60a3      	str	r3, [r4, #8]
  401bf0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401bf2:	f015 0501 	ands.w	r5, r5, #1
  401bf6:	d1f5      	bne.n	401be4 <setvbuf+0x134>
  401bf8:	0593      	lsls	r3, r2, #22
  401bfa:	d4c0      	bmi.n	401b7e <setvbuf+0xce>
  401bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401bfe:	f001 fc85 	bl	40350c <__retarget_lock_release_recursive>
  401c02:	4628      	mov	r0, r5
  401c04:	b003      	add	sp, #12
  401c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401c0a:	60a6      	str	r6, [r4, #8]
  401c0c:	e7f0      	b.n	401bf0 <setvbuf+0x140>
  401c0e:	4628      	mov	r0, r5
  401c10:	f001 f8ba 	bl	402d88 <__sinit>
  401c14:	e7c7      	b.n	401ba6 <setvbuf+0xf6>
  401c16:	f04f 35ff 	mov.w	r5, #4294967295
  401c1a:	e7b0      	b.n	401b7e <setvbuf+0xce>
  401c1c:	f8dd 9000 	ldr.w	r9, [sp]
  401c20:	45b1      	cmp	r9, r6
  401c22:	d004      	beq.n	401c2e <setvbuf+0x17e>
  401c24:	4648      	mov	r0, r9
  401c26:	f001 fceb 	bl	403600 <malloc>
  401c2a:	4607      	mov	r7, r0
  401c2c:	b920      	cbnz	r0, 401c38 <setvbuf+0x188>
  401c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401c32:	f04f 35ff 	mov.w	r5, #4294967295
  401c36:	e792      	b.n	401b5e <setvbuf+0xae>
  401c38:	464e      	mov	r6, r9
  401c3a:	e783      	b.n	401b44 <setvbuf+0x94>
  401c3c:	20000008 	.word	0x20000008

00401c40 <strlen>:
  401c40:	f890 f000 	pld	[r0]
  401c44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401c48:	f020 0107 	bic.w	r1, r0, #7
  401c4c:	f06f 0c00 	mvn.w	ip, #0
  401c50:	f010 0407 	ands.w	r4, r0, #7
  401c54:	f891 f020 	pld	[r1, #32]
  401c58:	f040 8049 	bne.w	401cee <strlen+0xae>
  401c5c:	f04f 0400 	mov.w	r4, #0
  401c60:	f06f 0007 	mvn.w	r0, #7
  401c64:	e9d1 2300 	ldrd	r2, r3, [r1]
  401c68:	f891 f040 	pld	[r1, #64]	; 0x40
  401c6c:	f100 0008 	add.w	r0, r0, #8
  401c70:	fa82 f24c 	uadd8	r2, r2, ip
  401c74:	faa4 f28c 	sel	r2, r4, ip
  401c78:	fa83 f34c 	uadd8	r3, r3, ip
  401c7c:	faa2 f38c 	sel	r3, r2, ip
  401c80:	bb4b      	cbnz	r3, 401cd6 <strlen+0x96>
  401c82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401c86:	fa82 f24c 	uadd8	r2, r2, ip
  401c8a:	f100 0008 	add.w	r0, r0, #8
  401c8e:	faa4 f28c 	sel	r2, r4, ip
  401c92:	fa83 f34c 	uadd8	r3, r3, ip
  401c96:	faa2 f38c 	sel	r3, r2, ip
  401c9a:	b9e3      	cbnz	r3, 401cd6 <strlen+0x96>
  401c9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401ca0:	fa82 f24c 	uadd8	r2, r2, ip
  401ca4:	f100 0008 	add.w	r0, r0, #8
  401ca8:	faa4 f28c 	sel	r2, r4, ip
  401cac:	fa83 f34c 	uadd8	r3, r3, ip
  401cb0:	faa2 f38c 	sel	r3, r2, ip
  401cb4:	b97b      	cbnz	r3, 401cd6 <strlen+0x96>
  401cb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  401cba:	f101 0120 	add.w	r1, r1, #32
  401cbe:	fa82 f24c 	uadd8	r2, r2, ip
  401cc2:	f100 0008 	add.w	r0, r0, #8
  401cc6:	faa4 f28c 	sel	r2, r4, ip
  401cca:	fa83 f34c 	uadd8	r3, r3, ip
  401cce:	faa2 f38c 	sel	r3, r2, ip
  401cd2:	2b00      	cmp	r3, #0
  401cd4:	d0c6      	beq.n	401c64 <strlen+0x24>
  401cd6:	2a00      	cmp	r2, #0
  401cd8:	bf04      	itt	eq
  401cda:	3004      	addeq	r0, #4
  401cdc:	461a      	moveq	r2, r3
  401cde:	ba12      	rev	r2, r2
  401ce0:	fab2 f282 	clz	r2, r2
  401ce4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401ce8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  401cec:	4770      	bx	lr
  401cee:	e9d1 2300 	ldrd	r2, r3, [r1]
  401cf2:	f004 0503 	and.w	r5, r4, #3
  401cf6:	f1c4 0000 	rsb	r0, r4, #0
  401cfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  401cfe:	f014 0f04 	tst.w	r4, #4
  401d02:	f891 f040 	pld	[r1, #64]	; 0x40
  401d06:	fa0c f505 	lsl.w	r5, ip, r5
  401d0a:	ea62 0205 	orn	r2, r2, r5
  401d0e:	bf1c      	itt	ne
  401d10:	ea63 0305 	ornne	r3, r3, r5
  401d14:	4662      	movne	r2, ip
  401d16:	f04f 0400 	mov.w	r4, #0
  401d1a:	e7a9      	b.n	401c70 <strlen+0x30>

00401d1c <__sprint_r.part.0>:
  401d1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d20:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401d22:	049c      	lsls	r4, r3, #18
  401d24:	4693      	mov	fp, r2
  401d26:	d52f      	bpl.n	401d88 <__sprint_r.part.0+0x6c>
  401d28:	6893      	ldr	r3, [r2, #8]
  401d2a:	6812      	ldr	r2, [r2, #0]
  401d2c:	b353      	cbz	r3, 401d84 <__sprint_r.part.0+0x68>
  401d2e:	460e      	mov	r6, r1
  401d30:	4607      	mov	r7, r0
  401d32:	f102 0908 	add.w	r9, r2, #8
  401d36:	e919 0420 	ldmdb	r9, {r5, sl}
  401d3a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  401d3e:	d017      	beq.n	401d70 <__sprint_r.part.0+0x54>
  401d40:	3d04      	subs	r5, #4
  401d42:	2400      	movs	r4, #0
  401d44:	e001      	b.n	401d4a <__sprint_r.part.0+0x2e>
  401d46:	45a0      	cmp	r8, r4
  401d48:	d010      	beq.n	401d6c <__sprint_r.part.0+0x50>
  401d4a:	4632      	mov	r2, r6
  401d4c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401d50:	4638      	mov	r0, r7
  401d52:	f001 f8bb 	bl	402ecc <_fputwc_r>
  401d56:	1c43      	adds	r3, r0, #1
  401d58:	f104 0401 	add.w	r4, r4, #1
  401d5c:	d1f3      	bne.n	401d46 <__sprint_r.part.0+0x2a>
  401d5e:	2300      	movs	r3, #0
  401d60:	f8cb 3008 	str.w	r3, [fp, #8]
  401d64:	f8cb 3004 	str.w	r3, [fp, #4]
  401d68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d6c:	f8db 3008 	ldr.w	r3, [fp, #8]
  401d70:	f02a 0a03 	bic.w	sl, sl, #3
  401d74:	eba3 030a 	sub.w	r3, r3, sl
  401d78:	f8cb 3008 	str.w	r3, [fp, #8]
  401d7c:	f109 0908 	add.w	r9, r9, #8
  401d80:	2b00      	cmp	r3, #0
  401d82:	d1d8      	bne.n	401d36 <__sprint_r.part.0+0x1a>
  401d84:	2000      	movs	r0, #0
  401d86:	e7ea      	b.n	401d5e <__sprint_r.part.0+0x42>
  401d88:	f001 fa0a 	bl	4031a0 <__sfvwrite_r>
  401d8c:	2300      	movs	r3, #0
  401d8e:	f8cb 3008 	str.w	r3, [fp, #8]
  401d92:	f8cb 3004 	str.w	r3, [fp, #4]
  401d96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d9a:	bf00      	nop

00401d9c <_vfiprintf_r>:
  401d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401da0:	b0ad      	sub	sp, #180	; 0xb4
  401da2:	461d      	mov	r5, r3
  401da4:	468b      	mov	fp, r1
  401da6:	4690      	mov	r8, r2
  401da8:	9307      	str	r3, [sp, #28]
  401daa:	9006      	str	r0, [sp, #24]
  401dac:	b118      	cbz	r0, 401db6 <_vfiprintf_r+0x1a>
  401dae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401db0:	2b00      	cmp	r3, #0
  401db2:	f000 80f3 	beq.w	401f9c <_vfiprintf_r+0x200>
  401db6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401dba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401dbe:	07df      	lsls	r7, r3, #31
  401dc0:	b281      	uxth	r1, r0
  401dc2:	d402      	bmi.n	401dca <_vfiprintf_r+0x2e>
  401dc4:	058e      	lsls	r6, r1, #22
  401dc6:	f140 80fc 	bpl.w	401fc2 <_vfiprintf_r+0x226>
  401dca:	048c      	lsls	r4, r1, #18
  401dcc:	d40a      	bmi.n	401de4 <_vfiprintf_r+0x48>
  401dce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401dd2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401dd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401dda:	f8ab 100c 	strh.w	r1, [fp, #12]
  401dde:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401de2:	b289      	uxth	r1, r1
  401de4:	0708      	lsls	r0, r1, #28
  401de6:	f140 80b3 	bpl.w	401f50 <_vfiprintf_r+0x1b4>
  401dea:	f8db 3010 	ldr.w	r3, [fp, #16]
  401dee:	2b00      	cmp	r3, #0
  401df0:	f000 80ae 	beq.w	401f50 <_vfiprintf_r+0x1b4>
  401df4:	f001 031a 	and.w	r3, r1, #26
  401df8:	2b0a      	cmp	r3, #10
  401dfa:	f000 80b5 	beq.w	401f68 <_vfiprintf_r+0x1cc>
  401dfe:	2300      	movs	r3, #0
  401e00:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401e04:	930b      	str	r3, [sp, #44]	; 0x2c
  401e06:	9311      	str	r3, [sp, #68]	; 0x44
  401e08:	9310      	str	r3, [sp, #64]	; 0x40
  401e0a:	9303      	str	r3, [sp, #12]
  401e0c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401e10:	46ca      	mov	sl, r9
  401e12:	f8cd b010 	str.w	fp, [sp, #16]
  401e16:	f898 3000 	ldrb.w	r3, [r8]
  401e1a:	4644      	mov	r4, r8
  401e1c:	b1fb      	cbz	r3, 401e5e <_vfiprintf_r+0xc2>
  401e1e:	2b25      	cmp	r3, #37	; 0x25
  401e20:	d102      	bne.n	401e28 <_vfiprintf_r+0x8c>
  401e22:	e01c      	b.n	401e5e <_vfiprintf_r+0xc2>
  401e24:	2b25      	cmp	r3, #37	; 0x25
  401e26:	d003      	beq.n	401e30 <_vfiprintf_r+0x94>
  401e28:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401e2c:	2b00      	cmp	r3, #0
  401e2e:	d1f9      	bne.n	401e24 <_vfiprintf_r+0x88>
  401e30:	eba4 0508 	sub.w	r5, r4, r8
  401e34:	b19d      	cbz	r5, 401e5e <_vfiprintf_r+0xc2>
  401e36:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401e38:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e3a:	f8ca 8000 	str.w	r8, [sl]
  401e3e:	3301      	adds	r3, #1
  401e40:	442a      	add	r2, r5
  401e42:	2b07      	cmp	r3, #7
  401e44:	f8ca 5004 	str.w	r5, [sl, #4]
  401e48:	9211      	str	r2, [sp, #68]	; 0x44
  401e4a:	9310      	str	r3, [sp, #64]	; 0x40
  401e4c:	dd7a      	ble.n	401f44 <_vfiprintf_r+0x1a8>
  401e4e:	2a00      	cmp	r2, #0
  401e50:	f040 84b0 	bne.w	4027b4 <_vfiprintf_r+0xa18>
  401e54:	9b03      	ldr	r3, [sp, #12]
  401e56:	9210      	str	r2, [sp, #64]	; 0x40
  401e58:	442b      	add	r3, r5
  401e5a:	46ca      	mov	sl, r9
  401e5c:	9303      	str	r3, [sp, #12]
  401e5e:	7823      	ldrb	r3, [r4, #0]
  401e60:	2b00      	cmp	r3, #0
  401e62:	f000 83e0 	beq.w	402626 <_vfiprintf_r+0x88a>
  401e66:	2000      	movs	r0, #0
  401e68:	f04f 0300 	mov.w	r3, #0
  401e6c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401e70:	f104 0801 	add.w	r8, r4, #1
  401e74:	7862      	ldrb	r2, [r4, #1]
  401e76:	4605      	mov	r5, r0
  401e78:	4606      	mov	r6, r0
  401e7a:	4603      	mov	r3, r0
  401e7c:	f04f 34ff 	mov.w	r4, #4294967295
  401e80:	f108 0801 	add.w	r8, r8, #1
  401e84:	f1a2 0120 	sub.w	r1, r2, #32
  401e88:	2958      	cmp	r1, #88	; 0x58
  401e8a:	f200 82de 	bhi.w	40244a <_vfiprintf_r+0x6ae>
  401e8e:	e8df f011 	tbh	[pc, r1, lsl #1]
  401e92:	0221      	.short	0x0221
  401e94:	02dc02dc 	.word	0x02dc02dc
  401e98:	02dc0229 	.word	0x02dc0229
  401e9c:	02dc02dc 	.word	0x02dc02dc
  401ea0:	02dc02dc 	.word	0x02dc02dc
  401ea4:	028902dc 	.word	0x028902dc
  401ea8:	02dc0295 	.word	0x02dc0295
  401eac:	02bd00a2 	.word	0x02bd00a2
  401eb0:	019f02dc 	.word	0x019f02dc
  401eb4:	01a401a4 	.word	0x01a401a4
  401eb8:	01a401a4 	.word	0x01a401a4
  401ebc:	01a401a4 	.word	0x01a401a4
  401ec0:	01a401a4 	.word	0x01a401a4
  401ec4:	02dc01a4 	.word	0x02dc01a4
  401ec8:	02dc02dc 	.word	0x02dc02dc
  401ecc:	02dc02dc 	.word	0x02dc02dc
  401ed0:	02dc02dc 	.word	0x02dc02dc
  401ed4:	02dc02dc 	.word	0x02dc02dc
  401ed8:	01b202dc 	.word	0x01b202dc
  401edc:	02dc02dc 	.word	0x02dc02dc
  401ee0:	02dc02dc 	.word	0x02dc02dc
  401ee4:	02dc02dc 	.word	0x02dc02dc
  401ee8:	02dc02dc 	.word	0x02dc02dc
  401eec:	02dc02dc 	.word	0x02dc02dc
  401ef0:	02dc0197 	.word	0x02dc0197
  401ef4:	02dc02dc 	.word	0x02dc02dc
  401ef8:	02dc02dc 	.word	0x02dc02dc
  401efc:	02dc019b 	.word	0x02dc019b
  401f00:	025302dc 	.word	0x025302dc
  401f04:	02dc02dc 	.word	0x02dc02dc
  401f08:	02dc02dc 	.word	0x02dc02dc
  401f0c:	02dc02dc 	.word	0x02dc02dc
  401f10:	02dc02dc 	.word	0x02dc02dc
  401f14:	02dc02dc 	.word	0x02dc02dc
  401f18:	021b025a 	.word	0x021b025a
  401f1c:	02dc02dc 	.word	0x02dc02dc
  401f20:	026e02dc 	.word	0x026e02dc
  401f24:	02dc021b 	.word	0x02dc021b
  401f28:	027302dc 	.word	0x027302dc
  401f2c:	01f502dc 	.word	0x01f502dc
  401f30:	02090182 	.word	0x02090182
  401f34:	02dc02d7 	.word	0x02dc02d7
  401f38:	02dc029a 	.word	0x02dc029a
  401f3c:	02dc00a7 	.word	0x02dc00a7
  401f40:	022e02dc 	.word	0x022e02dc
  401f44:	f10a 0a08 	add.w	sl, sl, #8
  401f48:	9b03      	ldr	r3, [sp, #12]
  401f4a:	442b      	add	r3, r5
  401f4c:	9303      	str	r3, [sp, #12]
  401f4e:	e786      	b.n	401e5e <_vfiprintf_r+0xc2>
  401f50:	4659      	mov	r1, fp
  401f52:	9806      	ldr	r0, [sp, #24]
  401f54:	f000 fdac 	bl	402ab0 <__swsetup_r>
  401f58:	bb18      	cbnz	r0, 401fa2 <_vfiprintf_r+0x206>
  401f5a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  401f5e:	f001 031a 	and.w	r3, r1, #26
  401f62:	2b0a      	cmp	r3, #10
  401f64:	f47f af4b 	bne.w	401dfe <_vfiprintf_r+0x62>
  401f68:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  401f6c:	2b00      	cmp	r3, #0
  401f6e:	f6ff af46 	blt.w	401dfe <_vfiprintf_r+0x62>
  401f72:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401f76:	07db      	lsls	r3, r3, #31
  401f78:	d405      	bmi.n	401f86 <_vfiprintf_r+0x1ea>
  401f7a:	058f      	lsls	r7, r1, #22
  401f7c:	d403      	bmi.n	401f86 <_vfiprintf_r+0x1ea>
  401f7e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401f82:	f001 fac3 	bl	40350c <__retarget_lock_release_recursive>
  401f86:	462b      	mov	r3, r5
  401f88:	4642      	mov	r2, r8
  401f8a:	4659      	mov	r1, fp
  401f8c:	9806      	ldr	r0, [sp, #24]
  401f8e:	f000 fd4d 	bl	402a2c <__sbprintf>
  401f92:	9003      	str	r0, [sp, #12]
  401f94:	9803      	ldr	r0, [sp, #12]
  401f96:	b02d      	add	sp, #180	; 0xb4
  401f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f9c:	f000 fef4 	bl	402d88 <__sinit>
  401fa0:	e709      	b.n	401db6 <_vfiprintf_r+0x1a>
  401fa2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401fa6:	07d9      	lsls	r1, r3, #31
  401fa8:	d404      	bmi.n	401fb4 <_vfiprintf_r+0x218>
  401faa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401fae:	059a      	lsls	r2, r3, #22
  401fb0:	f140 84aa 	bpl.w	402908 <_vfiprintf_r+0xb6c>
  401fb4:	f04f 33ff 	mov.w	r3, #4294967295
  401fb8:	9303      	str	r3, [sp, #12]
  401fba:	9803      	ldr	r0, [sp, #12]
  401fbc:	b02d      	add	sp, #180	; 0xb4
  401fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fc2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401fc6:	f001 fa9f 	bl	403508 <__retarget_lock_acquire_recursive>
  401fca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401fce:	b281      	uxth	r1, r0
  401fd0:	e6fb      	b.n	401dca <_vfiprintf_r+0x2e>
  401fd2:	4276      	negs	r6, r6
  401fd4:	9207      	str	r2, [sp, #28]
  401fd6:	f043 0304 	orr.w	r3, r3, #4
  401fda:	f898 2000 	ldrb.w	r2, [r8]
  401fde:	e74f      	b.n	401e80 <_vfiprintf_r+0xe4>
  401fe0:	9608      	str	r6, [sp, #32]
  401fe2:	069e      	lsls	r6, r3, #26
  401fe4:	f100 8450 	bmi.w	402888 <_vfiprintf_r+0xaec>
  401fe8:	9907      	ldr	r1, [sp, #28]
  401fea:	06dd      	lsls	r5, r3, #27
  401fec:	460a      	mov	r2, r1
  401fee:	f100 83ef 	bmi.w	4027d0 <_vfiprintf_r+0xa34>
  401ff2:	0658      	lsls	r0, r3, #25
  401ff4:	f140 83ec 	bpl.w	4027d0 <_vfiprintf_r+0xa34>
  401ff8:	880e      	ldrh	r6, [r1, #0]
  401ffa:	3104      	adds	r1, #4
  401ffc:	2700      	movs	r7, #0
  401ffe:	2201      	movs	r2, #1
  402000:	9107      	str	r1, [sp, #28]
  402002:	f04f 0100 	mov.w	r1, #0
  402006:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40200a:	2500      	movs	r5, #0
  40200c:	1c61      	adds	r1, r4, #1
  40200e:	f000 8116 	beq.w	40223e <_vfiprintf_r+0x4a2>
  402012:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  402016:	9102      	str	r1, [sp, #8]
  402018:	ea56 0107 	orrs.w	r1, r6, r7
  40201c:	f040 8114 	bne.w	402248 <_vfiprintf_r+0x4ac>
  402020:	2c00      	cmp	r4, #0
  402022:	f040 835c 	bne.w	4026de <_vfiprintf_r+0x942>
  402026:	2a00      	cmp	r2, #0
  402028:	f040 83b7 	bne.w	40279a <_vfiprintf_r+0x9fe>
  40202c:	f013 0301 	ands.w	r3, r3, #1
  402030:	9305      	str	r3, [sp, #20]
  402032:	f000 8457 	beq.w	4028e4 <_vfiprintf_r+0xb48>
  402036:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40203a:	2330      	movs	r3, #48	; 0x30
  40203c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  402040:	9b05      	ldr	r3, [sp, #20]
  402042:	42a3      	cmp	r3, r4
  402044:	bfb8      	it	lt
  402046:	4623      	movlt	r3, r4
  402048:	9301      	str	r3, [sp, #4]
  40204a:	b10d      	cbz	r5, 402050 <_vfiprintf_r+0x2b4>
  40204c:	3301      	adds	r3, #1
  40204e:	9301      	str	r3, [sp, #4]
  402050:	9b02      	ldr	r3, [sp, #8]
  402052:	f013 0302 	ands.w	r3, r3, #2
  402056:	9309      	str	r3, [sp, #36]	; 0x24
  402058:	d002      	beq.n	402060 <_vfiprintf_r+0x2c4>
  40205a:	9b01      	ldr	r3, [sp, #4]
  40205c:	3302      	adds	r3, #2
  40205e:	9301      	str	r3, [sp, #4]
  402060:	9b02      	ldr	r3, [sp, #8]
  402062:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  402066:	930a      	str	r3, [sp, #40]	; 0x28
  402068:	f040 8217 	bne.w	40249a <_vfiprintf_r+0x6fe>
  40206c:	9b08      	ldr	r3, [sp, #32]
  40206e:	9a01      	ldr	r2, [sp, #4]
  402070:	1a9d      	subs	r5, r3, r2
  402072:	2d00      	cmp	r5, #0
  402074:	f340 8211 	ble.w	40249a <_vfiprintf_r+0x6fe>
  402078:	2d10      	cmp	r5, #16
  40207a:	f340 8490 	ble.w	40299e <_vfiprintf_r+0xc02>
  40207e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402080:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402082:	4ec4      	ldr	r6, [pc, #784]	; (402394 <_vfiprintf_r+0x5f8>)
  402084:	46d6      	mov	lr, sl
  402086:	2710      	movs	r7, #16
  402088:	46a2      	mov	sl, r4
  40208a:	4619      	mov	r1, r3
  40208c:	9c06      	ldr	r4, [sp, #24]
  40208e:	e007      	b.n	4020a0 <_vfiprintf_r+0x304>
  402090:	f101 0c02 	add.w	ip, r1, #2
  402094:	f10e 0e08 	add.w	lr, lr, #8
  402098:	4601      	mov	r1, r0
  40209a:	3d10      	subs	r5, #16
  40209c:	2d10      	cmp	r5, #16
  40209e:	dd11      	ble.n	4020c4 <_vfiprintf_r+0x328>
  4020a0:	1c48      	adds	r0, r1, #1
  4020a2:	3210      	adds	r2, #16
  4020a4:	2807      	cmp	r0, #7
  4020a6:	9211      	str	r2, [sp, #68]	; 0x44
  4020a8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4020ac:	9010      	str	r0, [sp, #64]	; 0x40
  4020ae:	ddef      	ble.n	402090 <_vfiprintf_r+0x2f4>
  4020b0:	2a00      	cmp	r2, #0
  4020b2:	f040 81e4 	bne.w	40247e <_vfiprintf_r+0x6e2>
  4020b6:	3d10      	subs	r5, #16
  4020b8:	2d10      	cmp	r5, #16
  4020ba:	4611      	mov	r1, r2
  4020bc:	f04f 0c01 	mov.w	ip, #1
  4020c0:	46ce      	mov	lr, r9
  4020c2:	dced      	bgt.n	4020a0 <_vfiprintf_r+0x304>
  4020c4:	4654      	mov	r4, sl
  4020c6:	4661      	mov	r1, ip
  4020c8:	46f2      	mov	sl, lr
  4020ca:	442a      	add	r2, r5
  4020cc:	2907      	cmp	r1, #7
  4020ce:	9211      	str	r2, [sp, #68]	; 0x44
  4020d0:	f8ca 6000 	str.w	r6, [sl]
  4020d4:	f8ca 5004 	str.w	r5, [sl, #4]
  4020d8:	9110      	str	r1, [sp, #64]	; 0x40
  4020da:	f300 82ec 	bgt.w	4026b6 <_vfiprintf_r+0x91a>
  4020de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4020e2:	f10a 0a08 	add.w	sl, sl, #8
  4020e6:	1c48      	adds	r0, r1, #1
  4020e8:	2d00      	cmp	r5, #0
  4020ea:	f040 81de 	bne.w	4024aa <_vfiprintf_r+0x70e>
  4020ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4020f0:	2b00      	cmp	r3, #0
  4020f2:	f000 81f8 	beq.w	4024e6 <_vfiprintf_r+0x74a>
  4020f6:	3202      	adds	r2, #2
  4020f8:	a90e      	add	r1, sp, #56	; 0x38
  4020fa:	2302      	movs	r3, #2
  4020fc:	2807      	cmp	r0, #7
  4020fe:	9211      	str	r2, [sp, #68]	; 0x44
  402100:	9010      	str	r0, [sp, #64]	; 0x40
  402102:	e88a 000a 	stmia.w	sl, {r1, r3}
  402106:	f340 81ea 	ble.w	4024de <_vfiprintf_r+0x742>
  40210a:	2a00      	cmp	r2, #0
  40210c:	f040 838c 	bne.w	402828 <_vfiprintf_r+0xa8c>
  402110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402112:	2b80      	cmp	r3, #128	; 0x80
  402114:	f04f 0001 	mov.w	r0, #1
  402118:	4611      	mov	r1, r2
  40211a:	46ca      	mov	sl, r9
  40211c:	f040 81e7 	bne.w	4024ee <_vfiprintf_r+0x752>
  402120:	9b08      	ldr	r3, [sp, #32]
  402122:	9d01      	ldr	r5, [sp, #4]
  402124:	1b5e      	subs	r6, r3, r5
  402126:	2e00      	cmp	r6, #0
  402128:	f340 81e1 	ble.w	4024ee <_vfiprintf_r+0x752>
  40212c:	2e10      	cmp	r6, #16
  40212e:	4d9a      	ldr	r5, [pc, #616]	; (402398 <_vfiprintf_r+0x5fc>)
  402130:	f340 8450 	ble.w	4029d4 <_vfiprintf_r+0xc38>
  402134:	46d4      	mov	ip, sl
  402136:	2710      	movs	r7, #16
  402138:	46a2      	mov	sl, r4
  40213a:	9c06      	ldr	r4, [sp, #24]
  40213c:	e007      	b.n	40214e <_vfiprintf_r+0x3b2>
  40213e:	f101 0e02 	add.w	lr, r1, #2
  402142:	f10c 0c08 	add.w	ip, ip, #8
  402146:	4601      	mov	r1, r0
  402148:	3e10      	subs	r6, #16
  40214a:	2e10      	cmp	r6, #16
  40214c:	dd11      	ble.n	402172 <_vfiprintf_r+0x3d6>
  40214e:	1c48      	adds	r0, r1, #1
  402150:	3210      	adds	r2, #16
  402152:	2807      	cmp	r0, #7
  402154:	9211      	str	r2, [sp, #68]	; 0x44
  402156:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40215a:	9010      	str	r0, [sp, #64]	; 0x40
  40215c:	ddef      	ble.n	40213e <_vfiprintf_r+0x3a2>
  40215e:	2a00      	cmp	r2, #0
  402160:	f040 829d 	bne.w	40269e <_vfiprintf_r+0x902>
  402164:	3e10      	subs	r6, #16
  402166:	2e10      	cmp	r6, #16
  402168:	f04f 0e01 	mov.w	lr, #1
  40216c:	4611      	mov	r1, r2
  40216e:	46cc      	mov	ip, r9
  402170:	dced      	bgt.n	40214e <_vfiprintf_r+0x3b2>
  402172:	4654      	mov	r4, sl
  402174:	46e2      	mov	sl, ip
  402176:	4432      	add	r2, r6
  402178:	f1be 0f07 	cmp.w	lr, #7
  40217c:	9211      	str	r2, [sp, #68]	; 0x44
  40217e:	e88a 0060 	stmia.w	sl, {r5, r6}
  402182:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  402186:	f300 8369 	bgt.w	40285c <_vfiprintf_r+0xac0>
  40218a:	f10a 0a08 	add.w	sl, sl, #8
  40218e:	f10e 0001 	add.w	r0, lr, #1
  402192:	4671      	mov	r1, lr
  402194:	e1ab      	b.n	4024ee <_vfiprintf_r+0x752>
  402196:	9608      	str	r6, [sp, #32]
  402198:	f013 0220 	ands.w	r2, r3, #32
  40219c:	f040 838c 	bne.w	4028b8 <_vfiprintf_r+0xb1c>
  4021a0:	f013 0110 	ands.w	r1, r3, #16
  4021a4:	f040 831a 	bne.w	4027dc <_vfiprintf_r+0xa40>
  4021a8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4021ac:	f000 8316 	beq.w	4027dc <_vfiprintf_r+0xa40>
  4021b0:	9807      	ldr	r0, [sp, #28]
  4021b2:	460a      	mov	r2, r1
  4021b4:	4601      	mov	r1, r0
  4021b6:	3104      	adds	r1, #4
  4021b8:	8806      	ldrh	r6, [r0, #0]
  4021ba:	9107      	str	r1, [sp, #28]
  4021bc:	2700      	movs	r7, #0
  4021be:	e720      	b.n	402002 <_vfiprintf_r+0x266>
  4021c0:	9608      	str	r6, [sp, #32]
  4021c2:	f043 0310 	orr.w	r3, r3, #16
  4021c6:	e7e7      	b.n	402198 <_vfiprintf_r+0x3fc>
  4021c8:	9608      	str	r6, [sp, #32]
  4021ca:	f043 0310 	orr.w	r3, r3, #16
  4021ce:	e708      	b.n	401fe2 <_vfiprintf_r+0x246>
  4021d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4021d4:	f898 2000 	ldrb.w	r2, [r8]
  4021d8:	e652      	b.n	401e80 <_vfiprintf_r+0xe4>
  4021da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4021de:	2600      	movs	r6, #0
  4021e0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4021e4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4021e8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4021ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4021f0:	2909      	cmp	r1, #9
  4021f2:	d9f5      	bls.n	4021e0 <_vfiprintf_r+0x444>
  4021f4:	e646      	b.n	401e84 <_vfiprintf_r+0xe8>
  4021f6:	9608      	str	r6, [sp, #32]
  4021f8:	2800      	cmp	r0, #0
  4021fa:	f040 8408 	bne.w	402a0e <_vfiprintf_r+0xc72>
  4021fe:	f043 0310 	orr.w	r3, r3, #16
  402202:	069e      	lsls	r6, r3, #26
  402204:	f100 834c 	bmi.w	4028a0 <_vfiprintf_r+0xb04>
  402208:	06dd      	lsls	r5, r3, #27
  40220a:	f100 82f3 	bmi.w	4027f4 <_vfiprintf_r+0xa58>
  40220e:	0658      	lsls	r0, r3, #25
  402210:	f140 82f0 	bpl.w	4027f4 <_vfiprintf_r+0xa58>
  402214:	9d07      	ldr	r5, [sp, #28]
  402216:	f9b5 6000 	ldrsh.w	r6, [r5]
  40221a:	462a      	mov	r2, r5
  40221c:	17f7      	asrs	r7, r6, #31
  40221e:	3204      	adds	r2, #4
  402220:	4630      	mov	r0, r6
  402222:	4639      	mov	r1, r7
  402224:	9207      	str	r2, [sp, #28]
  402226:	2800      	cmp	r0, #0
  402228:	f171 0200 	sbcs.w	r2, r1, #0
  40222c:	f2c0 835d 	blt.w	4028ea <_vfiprintf_r+0xb4e>
  402230:	1c61      	adds	r1, r4, #1
  402232:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402236:	f04f 0201 	mov.w	r2, #1
  40223a:	f47f aeea 	bne.w	402012 <_vfiprintf_r+0x276>
  40223e:	ea56 0107 	orrs.w	r1, r6, r7
  402242:	f000 824d 	beq.w	4026e0 <_vfiprintf_r+0x944>
  402246:	9302      	str	r3, [sp, #8]
  402248:	2a01      	cmp	r2, #1
  40224a:	f000 828c 	beq.w	402766 <_vfiprintf_r+0x9ca>
  40224e:	2a02      	cmp	r2, #2
  402250:	f040 825c 	bne.w	40270c <_vfiprintf_r+0x970>
  402254:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402256:	46cb      	mov	fp, r9
  402258:	0933      	lsrs	r3, r6, #4
  40225a:	f006 010f 	and.w	r1, r6, #15
  40225e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  402262:	093a      	lsrs	r2, r7, #4
  402264:	461e      	mov	r6, r3
  402266:	4617      	mov	r7, r2
  402268:	5c43      	ldrb	r3, [r0, r1]
  40226a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40226e:	ea56 0307 	orrs.w	r3, r6, r7
  402272:	d1f1      	bne.n	402258 <_vfiprintf_r+0x4bc>
  402274:	eba9 030b 	sub.w	r3, r9, fp
  402278:	9305      	str	r3, [sp, #20]
  40227a:	e6e1      	b.n	402040 <_vfiprintf_r+0x2a4>
  40227c:	2800      	cmp	r0, #0
  40227e:	f040 83c0 	bne.w	402a02 <_vfiprintf_r+0xc66>
  402282:	0699      	lsls	r1, r3, #26
  402284:	f100 8367 	bmi.w	402956 <_vfiprintf_r+0xbba>
  402288:	06da      	lsls	r2, r3, #27
  40228a:	f100 80f1 	bmi.w	402470 <_vfiprintf_r+0x6d4>
  40228e:	065b      	lsls	r3, r3, #25
  402290:	f140 80ee 	bpl.w	402470 <_vfiprintf_r+0x6d4>
  402294:	9a07      	ldr	r2, [sp, #28]
  402296:	6813      	ldr	r3, [r2, #0]
  402298:	3204      	adds	r2, #4
  40229a:	9207      	str	r2, [sp, #28]
  40229c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4022a0:	801a      	strh	r2, [r3, #0]
  4022a2:	e5b8      	b.n	401e16 <_vfiprintf_r+0x7a>
  4022a4:	9807      	ldr	r0, [sp, #28]
  4022a6:	4a3d      	ldr	r2, [pc, #244]	; (40239c <_vfiprintf_r+0x600>)
  4022a8:	9608      	str	r6, [sp, #32]
  4022aa:	920b      	str	r2, [sp, #44]	; 0x2c
  4022ac:	6806      	ldr	r6, [r0, #0]
  4022ae:	2278      	movs	r2, #120	; 0x78
  4022b0:	2130      	movs	r1, #48	; 0x30
  4022b2:	3004      	adds	r0, #4
  4022b4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4022b8:	f043 0302 	orr.w	r3, r3, #2
  4022bc:	9007      	str	r0, [sp, #28]
  4022be:	2700      	movs	r7, #0
  4022c0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4022c4:	2202      	movs	r2, #2
  4022c6:	e69c      	b.n	402002 <_vfiprintf_r+0x266>
  4022c8:	9608      	str	r6, [sp, #32]
  4022ca:	2800      	cmp	r0, #0
  4022cc:	d099      	beq.n	402202 <_vfiprintf_r+0x466>
  4022ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4022d2:	e796      	b.n	402202 <_vfiprintf_r+0x466>
  4022d4:	f898 2000 	ldrb.w	r2, [r8]
  4022d8:	2d00      	cmp	r5, #0
  4022da:	f47f add1 	bne.w	401e80 <_vfiprintf_r+0xe4>
  4022de:	2001      	movs	r0, #1
  4022e0:	2520      	movs	r5, #32
  4022e2:	e5cd      	b.n	401e80 <_vfiprintf_r+0xe4>
  4022e4:	f043 0301 	orr.w	r3, r3, #1
  4022e8:	f898 2000 	ldrb.w	r2, [r8]
  4022ec:	e5c8      	b.n	401e80 <_vfiprintf_r+0xe4>
  4022ee:	9608      	str	r6, [sp, #32]
  4022f0:	2800      	cmp	r0, #0
  4022f2:	f040 8393 	bne.w	402a1c <_vfiprintf_r+0xc80>
  4022f6:	4929      	ldr	r1, [pc, #164]	; (40239c <_vfiprintf_r+0x600>)
  4022f8:	910b      	str	r1, [sp, #44]	; 0x2c
  4022fa:	069f      	lsls	r7, r3, #26
  4022fc:	f100 82e8 	bmi.w	4028d0 <_vfiprintf_r+0xb34>
  402300:	9807      	ldr	r0, [sp, #28]
  402302:	06de      	lsls	r6, r3, #27
  402304:	4601      	mov	r1, r0
  402306:	f100 8270 	bmi.w	4027ea <_vfiprintf_r+0xa4e>
  40230a:	065d      	lsls	r5, r3, #25
  40230c:	f140 826d 	bpl.w	4027ea <_vfiprintf_r+0xa4e>
  402310:	3104      	adds	r1, #4
  402312:	8806      	ldrh	r6, [r0, #0]
  402314:	9107      	str	r1, [sp, #28]
  402316:	2700      	movs	r7, #0
  402318:	07d8      	lsls	r0, r3, #31
  40231a:	f140 8222 	bpl.w	402762 <_vfiprintf_r+0x9c6>
  40231e:	ea56 0107 	orrs.w	r1, r6, r7
  402322:	f000 821e 	beq.w	402762 <_vfiprintf_r+0x9c6>
  402326:	2130      	movs	r1, #48	; 0x30
  402328:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40232c:	f043 0302 	orr.w	r3, r3, #2
  402330:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402334:	2202      	movs	r2, #2
  402336:	e664      	b.n	402002 <_vfiprintf_r+0x266>
  402338:	9608      	str	r6, [sp, #32]
  40233a:	2800      	cmp	r0, #0
  40233c:	f040 836b 	bne.w	402a16 <_vfiprintf_r+0xc7a>
  402340:	4917      	ldr	r1, [pc, #92]	; (4023a0 <_vfiprintf_r+0x604>)
  402342:	910b      	str	r1, [sp, #44]	; 0x2c
  402344:	e7d9      	b.n	4022fa <_vfiprintf_r+0x55e>
  402346:	9907      	ldr	r1, [sp, #28]
  402348:	9608      	str	r6, [sp, #32]
  40234a:	680a      	ldr	r2, [r1, #0]
  40234c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402350:	f04f 0000 	mov.w	r0, #0
  402354:	460a      	mov	r2, r1
  402356:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40235a:	3204      	adds	r2, #4
  40235c:	2001      	movs	r0, #1
  40235e:	9001      	str	r0, [sp, #4]
  402360:	9207      	str	r2, [sp, #28]
  402362:	9005      	str	r0, [sp, #20]
  402364:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  402368:	9302      	str	r3, [sp, #8]
  40236a:	2400      	movs	r4, #0
  40236c:	e670      	b.n	402050 <_vfiprintf_r+0x2b4>
  40236e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402372:	f898 2000 	ldrb.w	r2, [r8]
  402376:	e583      	b.n	401e80 <_vfiprintf_r+0xe4>
  402378:	f898 2000 	ldrb.w	r2, [r8]
  40237c:	2a6c      	cmp	r2, #108	; 0x6c
  40237e:	bf03      	ittte	eq
  402380:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  402384:	f043 0320 	orreq.w	r3, r3, #32
  402388:	f108 0801 	addeq.w	r8, r8, #1
  40238c:	f043 0310 	orrne.w	r3, r3, #16
  402390:	e576      	b.n	401e80 <_vfiprintf_r+0xe4>
  402392:	bf00      	nop
  402394:	00404d48 	.word	0x00404d48
  402398:	00404d58 	.word	0x00404d58
  40239c:	00404d2c 	.word	0x00404d2c
  4023a0:	00404d18 	.word	0x00404d18
  4023a4:	9907      	ldr	r1, [sp, #28]
  4023a6:	680e      	ldr	r6, [r1, #0]
  4023a8:	460a      	mov	r2, r1
  4023aa:	2e00      	cmp	r6, #0
  4023ac:	f102 0204 	add.w	r2, r2, #4
  4023b0:	f6ff ae0f 	blt.w	401fd2 <_vfiprintf_r+0x236>
  4023b4:	9207      	str	r2, [sp, #28]
  4023b6:	f898 2000 	ldrb.w	r2, [r8]
  4023ba:	e561      	b.n	401e80 <_vfiprintf_r+0xe4>
  4023bc:	f898 2000 	ldrb.w	r2, [r8]
  4023c0:	2001      	movs	r0, #1
  4023c2:	252b      	movs	r5, #43	; 0x2b
  4023c4:	e55c      	b.n	401e80 <_vfiprintf_r+0xe4>
  4023c6:	9907      	ldr	r1, [sp, #28]
  4023c8:	9608      	str	r6, [sp, #32]
  4023ca:	f8d1 b000 	ldr.w	fp, [r1]
  4023ce:	f04f 0200 	mov.w	r2, #0
  4023d2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4023d6:	1d0e      	adds	r6, r1, #4
  4023d8:	f1bb 0f00 	cmp.w	fp, #0
  4023dc:	f000 82e5 	beq.w	4029aa <_vfiprintf_r+0xc0e>
  4023e0:	1c67      	adds	r7, r4, #1
  4023e2:	f000 82c4 	beq.w	40296e <_vfiprintf_r+0xbd2>
  4023e6:	4622      	mov	r2, r4
  4023e8:	2100      	movs	r1, #0
  4023ea:	4658      	mov	r0, fp
  4023ec:	9301      	str	r3, [sp, #4]
  4023ee:	f001 fbd7 	bl	403ba0 <memchr>
  4023f2:	9b01      	ldr	r3, [sp, #4]
  4023f4:	2800      	cmp	r0, #0
  4023f6:	f000 82e5 	beq.w	4029c4 <_vfiprintf_r+0xc28>
  4023fa:	eba0 020b 	sub.w	r2, r0, fp
  4023fe:	9205      	str	r2, [sp, #20]
  402400:	9607      	str	r6, [sp, #28]
  402402:	9302      	str	r3, [sp, #8]
  402404:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402408:	2400      	movs	r4, #0
  40240a:	e619      	b.n	402040 <_vfiprintf_r+0x2a4>
  40240c:	f898 2000 	ldrb.w	r2, [r8]
  402410:	2a2a      	cmp	r2, #42	; 0x2a
  402412:	f108 0701 	add.w	r7, r8, #1
  402416:	f000 82e9 	beq.w	4029ec <_vfiprintf_r+0xc50>
  40241a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40241e:	2909      	cmp	r1, #9
  402420:	46b8      	mov	r8, r7
  402422:	f04f 0400 	mov.w	r4, #0
  402426:	f63f ad2d 	bhi.w	401e84 <_vfiprintf_r+0xe8>
  40242a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40242e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402432:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  402436:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40243a:	2909      	cmp	r1, #9
  40243c:	d9f5      	bls.n	40242a <_vfiprintf_r+0x68e>
  40243e:	e521      	b.n	401e84 <_vfiprintf_r+0xe8>
  402440:	f043 0320 	orr.w	r3, r3, #32
  402444:	f898 2000 	ldrb.w	r2, [r8]
  402448:	e51a      	b.n	401e80 <_vfiprintf_r+0xe4>
  40244a:	9608      	str	r6, [sp, #32]
  40244c:	2800      	cmp	r0, #0
  40244e:	f040 82db 	bne.w	402a08 <_vfiprintf_r+0xc6c>
  402452:	2a00      	cmp	r2, #0
  402454:	f000 80e7 	beq.w	402626 <_vfiprintf_r+0x88a>
  402458:	2101      	movs	r1, #1
  40245a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40245e:	f04f 0200 	mov.w	r2, #0
  402462:	9101      	str	r1, [sp, #4]
  402464:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402468:	9105      	str	r1, [sp, #20]
  40246a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40246e:	e77b      	b.n	402368 <_vfiprintf_r+0x5cc>
  402470:	9a07      	ldr	r2, [sp, #28]
  402472:	6813      	ldr	r3, [r2, #0]
  402474:	3204      	adds	r2, #4
  402476:	9207      	str	r2, [sp, #28]
  402478:	9a03      	ldr	r2, [sp, #12]
  40247a:	601a      	str	r2, [r3, #0]
  40247c:	e4cb      	b.n	401e16 <_vfiprintf_r+0x7a>
  40247e:	aa0f      	add	r2, sp, #60	; 0x3c
  402480:	9904      	ldr	r1, [sp, #16]
  402482:	4620      	mov	r0, r4
  402484:	f7ff fc4a 	bl	401d1c <__sprint_r.part.0>
  402488:	2800      	cmp	r0, #0
  40248a:	f040 8139 	bne.w	402700 <_vfiprintf_r+0x964>
  40248e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402490:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402492:	f101 0c01 	add.w	ip, r1, #1
  402496:	46ce      	mov	lr, r9
  402498:	e5ff      	b.n	40209a <_vfiprintf_r+0x2fe>
  40249a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40249c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40249e:	1c48      	adds	r0, r1, #1
  4024a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4024a4:	2d00      	cmp	r5, #0
  4024a6:	f43f ae22 	beq.w	4020ee <_vfiprintf_r+0x352>
  4024aa:	3201      	adds	r2, #1
  4024ac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4024b0:	2101      	movs	r1, #1
  4024b2:	2807      	cmp	r0, #7
  4024b4:	9211      	str	r2, [sp, #68]	; 0x44
  4024b6:	9010      	str	r0, [sp, #64]	; 0x40
  4024b8:	f8ca 5000 	str.w	r5, [sl]
  4024bc:	f8ca 1004 	str.w	r1, [sl, #4]
  4024c0:	f340 8108 	ble.w	4026d4 <_vfiprintf_r+0x938>
  4024c4:	2a00      	cmp	r2, #0
  4024c6:	f040 81bc 	bne.w	402842 <_vfiprintf_r+0xaa6>
  4024ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4024cc:	2b00      	cmp	r3, #0
  4024ce:	f43f ae1f 	beq.w	402110 <_vfiprintf_r+0x374>
  4024d2:	ab0e      	add	r3, sp, #56	; 0x38
  4024d4:	2202      	movs	r2, #2
  4024d6:	4608      	mov	r0, r1
  4024d8:	931c      	str	r3, [sp, #112]	; 0x70
  4024da:	921d      	str	r2, [sp, #116]	; 0x74
  4024dc:	46ca      	mov	sl, r9
  4024de:	4601      	mov	r1, r0
  4024e0:	f10a 0a08 	add.w	sl, sl, #8
  4024e4:	3001      	adds	r0, #1
  4024e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4024e8:	2b80      	cmp	r3, #128	; 0x80
  4024ea:	f43f ae19 	beq.w	402120 <_vfiprintf_r+0x384>
  4024ee:	9b05      	ldr	r3, [sp, #20]
  4024f0:	1ae4      	subs	r4, r4, r3
  4024f2:	2c00      	cmp	r4, #0
  4024f4:	dd2e      	ble.n	402554 <_vfiprintf_r+0x7b8>
  4024f6:	2c10      	cmp	r4, #16
  4024f8:	4db3      	ldr	r5, [pc, #716]	; (4027c8 <_vfiprintf_r+0xa2c>)
  4024fa:	dd1e      	ble.n	40253a <_vfiprintf_r+0x79e>
  4024fc:	46d6      	mov	lr, sl
  4024fe:	2610      	movs	r6, #16
  402500:	9f06      	ldr	r7, [sp, #24]
  402502:	f8dd a010 	ldr.w	sl, [sp, #16]
  402506:	e006      	b.n	402516 <_vfiprintf_r+0x77a>
  402508:	1c88      	adds	r0, r1, #2
  40250a:	f10e 0e08 	add.w	lr, lr, #8
  40250e:	4619      	mov	r1, r3
  402510:	3c10      	subs	r4, #16
  402512:	2c10      	cmp	r4, #16
  402514:	dd10      	ble.n	402538 <_vfiprintf_r+0x79c>
  402516:	1c4b      	adds	r3, r1, #1
  402518:	3210      	adds	r2, #16
  40251a:	2b07      	cmp	r3, #7
  40251c:	9211      	str	r2, [sp, #68]	; 0x44
  40251e:	e88e 0060 	stmia.w	lr, {r5, r6}
  402522:	9310      	str	r3, [sp, #64]	; 0x40
  402524:	ddf0      	ble.n	402508 <_vfiprintf_r+0x76c>
  402526:	2a00      	cmp	r2, #0
  402528:	d165      	bne.n	4025f6 <_vfiprintf_r+0x85a>
  40252a:	3c10      	subs	r4, #16
  40252c:	2c10      	cmp	r4, #16
  40252e:	f04f 0001 	mov.w	r0, #1
  402532:	4611      	mov	r1, r2
  402534:	46ce      	mov	lr, r9
  402536:	dcee      	bgt.n	402516 <_vfiprintf_r+0x77a>
  402538:	46f2      	mov	sl, lr
  40253a:	4422      	add	r2, r4
  40253c:	2807      	cmp	r0, #7
  40253e:	9211      	str	r2, [sp, #68]	; 0x44
  402540:	f8ca 5000 	str.w	r5, [sl]
  402544:	f8ca 4004 	str.w	r4, [sl, #4]
  402548:	9010      	str	r0, [sp, #64]	; 0x40
  40254a:	f300 8085 	bgt.w	402658 <_vfiprintf_r+0x8bc>
  40254e:	f10a 0a08 	add.w	sl, sl, #8
  402552:	3001      	adds	r0, #1
  402554:	9905      	ldr	r1, [sp, #20]
  402556:	f8ca b000 	str.w	fp, [sl]
  40255a:	440a      	add	r2, r1
  40255c:	2807      	cmp	r0, #7
  40255e:	9211      	str	r2, [sp, #68]	; 0x44
  402560:	f8ca 1004 	str.w	r1, [sl, #4]
  402564:	9010      	str	r0, [sp, #64]	; 0x40
  402566:	f340 8082 	ble.w	40266e <_vfiprintf_r+0x8d2>
  40256a:	2a00      	cmp	r2, #0
  40256c:	f040 8118 	bne.w	4027a0 <_vfiprintf_r+0xa04>
  402570:	9b02      	ldr	r3, [sp, #8]
  402572:	9210      	str	r2, [sp, #64]	; 0x40
  402574:	0758      	lsls	r0, r3, #29
  402576:	d535      	bpl.n	4025e4 <_vfiprintf_r+0x848>
  402578:	9b08      	ldr	r3, [sp, #32]
  40257a:	9901      	ldr	r1, [sp, #4]
  40257c:	1a5c      	subs	r4, r3, r1
  40257e:	2c00      	cmp	r4, #0
  402580:	f340 80e7 	ble.w	402752 <_vfiprintf_r+0x9b6>
  402584:	46ca      	mov	sl, r9
  402586:	2c10      	cmp	r4, #16
  402588:	f340 8218 	ble.w	4029bc <_vfiprintf_r+0xc20>
  40258c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40258e:	4e8f      	ldr	r6, [pc, #572]	; (4027cc <_vfiprintf_r+0xa30>)
  402590:	9f06      	ldr	r7, [sp, #24]
  402592:	f8dd b010 	ldr.w	fp, [sp, #16]
  402596:	2510      	movs	r5, #16
  402598:	e006      	b.n	4025a8 <_vfiprintf_r+0x80c>
  40259a:	1c88      	adds	r0, r1, #2
  40259c:	f10a 0a08 	add.w	sl, sl, #8
  4025a0:	4619      	mov	r1, r3
  4025a2:	3c10      	subs	r4, #16
  4025a4:	2c10      	cmp	r4, #16
  4025a6:	dd11      	ble.n	4025cc <_vfiprintf_r+0x830>
  4025a8:	1c4b      	adds	r3, r1, #1
  4025aa:	3210      	adds	r2, #16
  4025ac:	2b07      	cmp	r3, #7
  4025ae:	9211      	str	r2, [sp, #68]	; 0x44
  4025b0:	f8ca 6000 	str.w	r6, [sl]
  4025b4:	f8ca 5004 	str.w	r5, [sl, #4]
  4025b8:	9310      	str	r3, [sp, #64]	; 0x40
  4025ba:	ddee      	ble.n	40259a <_vfiprintf_r+0x7fe>
  4025bc:	bb42      	cbnz	r2, 402610 <_vfiprintf_r+0x874>
  4025be:	3c10      	subs	r4, #16
  4025c0:	2c10      	cmp	r4, #16
  4025c2:	f04f 0001 	mov.w	r0, #1
  4025c6:	4611      	mov	r1, r2
  4025c8:	46ca      	mov	sl, r9
  4025ca:	dced      	bgt.n	4025a8 <_vfiprintf_r+0x80c>
  4025cc:	4422      	add	r2, r4
  4025ce:	2807      	cmp	r0, #7
  4025d0:	9211      	str	r2, [sp, #68]	; 0x44
  4025d2:	f8ca 6000 	str.w	r6, [sl]
  4025d6:	f8ca 4004 	str.w	r4, [sl, #4]
  4025da:	9010      	str	r0, [sp, #64]	; 0x40
  4025dc:	dd51      	ble.n	402682 <_vfiprintf_r+0x8e6>
  4025de:	2a00      	cmp	r2, #0
  4025e0:	f040 819b 	bne.w	40291a <_vfiprintf_r+0xb7e>
  4025e4:	9b03      	ldr	r3, [sp, #12]
  4025e6:	9a08      	ldr	r2, [sp, #32]
  4025e8:	9901      	ldr	r1, [sp, #4]
  4025ea:	428a      	cmp	r2, r1
  4025ec:	bfac      	ite	ge
  4025ee:	189b      	addge	r3, r3, r2
  4025f0:	185b      	addlt	r3, r3, r1
  4025f2:	9303      	str	r3, [sp, #12]
  4025f4:	e04e      	b.n	402694 <_vfiprintf_r+0x8f8>
  4025f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4025f8:	4651      	mov	r1, sl
  4025fa:	4638      	mov	r0, r7
  4025fc:	f7ff fb8e 	bl	401d1c <__sprint_r.part.0>
  402600:	2800      	cmp	r0, #0
  402602:	f040 813f 	bne.w	402884 <_vfiprintf_r+0xae8>
  402606:	9910      	ldr	r1, [sp, #64]	; 0x40
  402608:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40260a:	1c48      	adds	r0, r1, #1
  40260c:	46ce      	mov	lr, r9
  40260e:	e77f      	b.n	402510 <_vfiprintf_r+0x774>
  402610:	aa0f      	add	r2, sp, #60	; 0x3c
  402612:	4659      	mov	r1, fp
  402614:	4638      	mov	r0, r7
  402616:	f7ff fb81 	bl	401d1c <__sprint_r.part.0>
  40261a:	b960      	cbnz	r0, 402636 <_vfiprintf_r+0x89a>
  40261c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40261e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402620:	1c48      	adds	r0, r1, #1
  402622:	46ca      	mov	sl, r9
  402624:	e7bd      	b.n	4025a2 <_vfiprintf_r+0x806>
  402626:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402628:	f8dd b010 	ldr.w	fp, [sp, #16]
  40262c:	2b00      	cmp	r3, #0
  40262e:	f040 81d4 	bne.w	4029da <_vfiprintf_r+0xc3e>
  402632:	2300      	movs	r3, #0
  402634:	9310      	str	r3, [sp, #64]	; 0x40
  402636:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40263a:	f013 0f01 	tst.w	r3, #1
  40263e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402642:	d102      	bne.n	40264a <_vfiprintf_r+0x8ae>
  402644:	059a      	lsls	r2, r3, #22
  402646:	f140 80de 	bpl.w	402806 <_vfiprintf_r+0xa6a>
  40264a:	065b      	lsls	r3, r3, #25
  40264c:	f53f acb2 	bmi.w	401fb4 <_vfiprintf_r+0x218>
  402650:	9803      	ldr	r0, [sp, #12]
  402652:	b02d      	add	sp, #180	; 0xb4
  402654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402658:	2a00      	cmp	r2, #0
  40265a:	f040 8106 	bne.w	40286a <_vfiprintf_r+0xace>
  40265e:	9a05      	ldr	r2, [sp, #20]
  402660:	921d      	str	r2, [sp, #116]	; 0x74
  402662:	2301      	movs	r3, #1
  402664:	9211      	str	r2, [sp, #68]	; 0x44
  402666:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40266a:	9310      	str	r3, [sp, #64]	; 0x40
  40266c:	46ca      	mov	sl, r9
  40266e:	f10a 0a08 	add.w	sl, sl, #8
  402672:	9b02      	ldr	r3, [sp, #8]
  402674:	0759      	lsls	r1, r3, #29
  402676:	d504      	bpl.n	402682 <_vfiprintf_r+0x8e6>
  402678:	9b08      	ldr	r3, [sp, #32]
  40267a:	9901      	ldr	r1, [sp, #4]
  40267c:	1a5c      	subs	r4, r3, r1
  40267e:	2c00      	cmp	r4, #0
  402680:	dc81      	bgt.n	402586 <_vfiprintf_r+0x7ea>
  402682:	9b03      	ldr	r3, [sp, #12]
  402684:	9908      	ldr	r1, [sp, #32]
  402686:	9801      	ldr	r0, [sp, #4]
  402688:	4281      	cmp	r1, r0
  40268a:	bfac      	ite	ge
  40268c:	185b      	addge	r3, r3, r1
  40268e:	181b      	addlt	r3, r3, r0
  402690:	9303      	str	r3, [sp, #12]
  402692:	bb72      	cbnz	r2, 4026f2 <_vfiprintf_r+0x956>
  402694:	2300      	movs	r3, #0
  402696:	9310      	str	r3, [sp, #64]	; 0x40
  402698:	46ca      	mov	sl, r9
  40269a:	f7ff bbbc 	b.w	401e16 <_vfiprintf_r+0x7a>
  40269e:	aa0f      	add	r2, sp, #60	; 0x3c
  4026a0:	9904      	ldr	r1, [sp, #16]
  4026a2:	4620      	mov	r0, r4
  4026a4:	f7ff fb3a 	bl	401d1c <__sprint_r.part.0>
  4026a8:	bb50      	cbnz	r0, 402700 <_vfiprintf_r+0x964>
  4026aa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4026ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4026ae:	f101 0e01 	add.w	lr, r1, #1
  4026b2:	46cc      	mov	ip, r9
  4026b4:	e548      	b.n	402148 <_vfiprintf_r+0x3ac>
  4026b6:	2a00      	cmp	r2, #0
  4026b8:	f040 8140 	bne.w	40293c <_vfiprintf_r+0xba0>
  4026bc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4026c0:	2900      	cmp	r1, #0
  4026c2:	f000 811b 	beq.w	4028fc <_vfiprintf_r+0xb60>
  4026c6:	2201      	movs	r2, #1
  4026c8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4026cc:	4610      	mov	r0, r2
  4026ce:	921d      	str	r2, [sp, #116]	; 0x74
  4026d0:	911c      	str	r1, [sp, #112]	; 0x70
  4026d2:	46ca      	mov	sl, r9
  4026d4:	4601      	mov	r1, r0
  4026d6:	f10a 0a08 	add.w	sl, sl, #8
  4026da:	3001      	adds	r0, #1
  4026dc:	e507      	b.n	4020ee <_vfiprintf_r+0x352>
  4026de:	9b02      	ldr	r3, [sp, #8]
  4026e0:	2a01      	cmp	r2, #1
  4026e2:	f000 8098 	beq.w	402816 <_vfiprintf_r+0xa7a>
  4026e6:	2a02      	cmp	r2, #2
  4026e8:	d10d      	bne.n	402706 <_vfiprintf_r+0x96a>
  4026ea:	9302      	str	r3, [sp, #8]
  4026ec:	2600      	movs	r6, #0
  4026ee:	2700      	movs	r7, #0
  4026f0:	e5b0      	b.n	402254 <_vfiprintf_r+0x4b8>
  4026f2:	aa0f      	add	r2, sp, #60	; 0x3c
  4026f4:	9904      	ldr	r1, [sp, #16]
  4026f6:	9806      	ldr	r0, [sp, #24]
  4026f8:	f7ff fb10 	bl	401d1c <__sprint_r.part.0>
  4026fc:	2800      	cmp	r0, #0
  4026fe:	d0c9      	beq.n	402694 <_vfiprintf_r+0x8f8>
  402700:	f8dd b010 	ldr.w	fp, [sp, #16]
  402704:	e797      	b.n	402636 <_vfiprintf_r+0x89a>
  402706:	9302      	str	r3, [sp, #8]
  402708:	2600      	movs	r6, #0
  40270a:	2700      	movs	r7, #0
  40270c:	4649      	mov	r1, r9
  40270e:	e000      	b.n	402712 <_vfiprintf_r+0x976>
  402710:	4659      	mov	r1, fp
  402712:	08f2      	lsrs	r2, r6, #3
  402714:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402718:	08f8      	lsrs	r0, r7, #3
  40271a:	f006 0307 	and.w	r3, r6, #7
  40271e:	4607      	mov	r7, r0
  402720:	4616      	mov	r6, r2
  402722:	3330      	adds	r3, #48	; 0x30
  402724:	ea56 0207 	orrs.w	r2, r6, r7
  402728:	f801 3c01 	strb.w	r3, [r1, #-1]
  40272c:	f101 3bff 	add.w	fp, r1, #4294967295
  402730:	d1ee      	bne.n	402710 <_vfiprintf_r+0x974>
  402732:	9a02      	ldr	r2, [sp, #8]
  402734:	07d6      	lsls	r6, r2, #31
  402736:	f57f ad9d 	bpl.w	402274 <_vfiprintf_r+0x4d8>
  40273a:	2b30      	cmp	r3, #48	; 0x30
  40273c:	f43f ad9a 	beq.w	402274 <_vfiprintf_r+0x4d8>
  402740:	3902      	subs	r1, #2
  402742:	2330      	movs	r3, #48	; 0x30
  402744:	f80b 3c01 	strb.w	r3, [fp, #-1]
  402748:	eba9 0301 	sub.w	r3, r9, r1
  40274c:	9305      	str	r3, [sp, #20]
  40274e:	468b      	mov	fp, r1
  402750:	e476      	b.n	402040 <_vfiprintf_r+0x2a4>
  402752:	9b03      	ldr	r3, [sp, #12]
  402754:	9a08      	ldr	r2, [sp, #32]
  402756:	428a      	cmp	r2, r1
  402758:	bfac      	ite	ge
  40275a:	189b      	addge	r3, r3, r2
  40275c:	185b      	addlt	r3, r3, r1
  40275e:	9303      	str	r3, [sp, #12]
  402760:	e798      	b.n	402694 <_vfiprintf_r+0x8f8>
  402762:	2202      	movs	r2, #2
  402764:	e44d      	b.n	402002 <_vfiprintf_r+0x266>
  402766:	2f00      	cmp	r7, #0
  402768:	bf08      	it	eq
  40276a:	2e0a      	cmpeq	r6, #10
  40276c:	d352      	bcc.n	402814 <_vfiprintf_r+0xa78>
  40276e:	46cb      	mov	fp, r9
  402770:	4630      	mov	r0, r6
  402772:	4639      	mov	r1, r7
  402774:	220a      	movs	r2, #10
  402776:	2300      	movs	r3, #0
  402778:	f001 ff36 	bl	4045e8 <__aeabi_uldivmod>
  40277c:	3230      	adds	r2, #48	; 0x30
  40277e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  402782:	4630      	mov	r0, r6
  402784:	4639      	mov	r1, r7
  402786:	2300      	movs	r3, #0
  402788:	220a      	movs	r2, #10
  40278a:	f001 ff2d 	bl	4045e8 <__aeabi_uldivmod>
  40278e:	4606      	mov	r6, r0
  402790:	460f      	mov	r7, r1
  402792:	ea56 0307 	orrs.w	r3, r6, r7
  402796:	d1eb      	bne.n	402770 <_vfiprintf_r+0x9d4>
  402798:	e56c      	b.n	402274 <_vfiprintf_r+0x4d8>
  40279a:	9405      	str	r4, [sp, #20]
  40279c:	46cb      	mov	fp, r9
  40279e:	e44f      	b.n	402040 <_vfiprintf_r+0x2a4>
  4027a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4027a2:	9904      	ldr	r1, [sp, #16]
  4027a4:	9806      	ldr	r0, [sp, #24]
  4027a6:	f7ff fab9 	bl	401d1c <__sprint_r.part.0>
  4027aa:	2800      	cmp	r0, #0
  4027ac:	d1a8      	bne.n	402700 <_vfiprintf_r+0x964>
  4027ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4027b0:	46ca      	mov	sl, r9
  4027b2:	e75e      	b.n	402672 <_vfiprintf_r+0x8d6>
  4027b4:	aa0f      	add	r2, sp, #60	; 0x3c
  4027b6:	9904      	ldr	r1, [sp, #16]
  4027b8:	9806      	ldr	r0, [sp, #24]
  4027ba:	f7ff faaf 	bl	401d1c <__sprint_r.part.0>
  4027be:	2800      	cmp	r0, #0
  4027c0:	d19e      	bne.n	402700 <_vfiprintf_r+0x964>
  4027c2:	46ca      	mov	sl, r9
  4027c4:	f7ff bbc0 	b.w	401f48 <_vfiprintf_r+0x1ac>
  4027c8:	00404d58 	.word	0x00404d58
  4027cc:	00404d48 	.word	0x00404d48
  4027d0:	3104      	adds	r1, #4
  4027d2:	6816      	ldr	r6, [r2, #0]
  4027d4:	9107      	str	r1, [sp, #28]
  4027d6:	2201      	movs	r2, #1
  4027d8:	2700      	movs	r7, #0
  4027da:	e412      	b.n	402002 <_vfiprintf_r+0x266>
  4027dc:	9807      	ldr	r0, [sp, #28]
  4027de:	4601      	mov	r1, r0
  4027e0:	3104      	adds	r1, #4
  4027e2:	6806      	ldr	r6, [r0, #0]
  4027e4:	9107      	str	r1, [sp, #28]
  4027e6:	2700      	movs	r7, #0
  4027e8:	e40b      	b.n	402002 <_vfiprintf_r+0x266>
  4027ea:	680e      	ldr	r6, [r1, #0]
  4027ec:	3104      	adds	r1, #4
  4027ee:	9107      	str	r1, [sp, #28]
  4027f0:	2700      	movs	r7, #0
  4027f2:	e591      	b.n	402318 <_vfiprintf_r+0x57c>
  4027f4:	9907      	ldr	r1, [sp, #28]
  4027f6:	680e      	ldr	r6, [r1, #0]
  4027f8:	460a      	mov	r2, r1
  4027fa:	17f7      	asrs	r7, r6, #31
  4027fc:	3204      	adds	r2, #4
  4027fe:	9207      	str	r2, [sp, #28]
  402800:	4630      	mov	r0, r6
  402802:	4639      	mov	r1, r7
  402804:	e50f      	b.n	402226 <_vfiprintf_r+0x48a>
  402806:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40280a:	f000 fe7f 	bl	40350c <__retarget_lock_release_recursive>
  40280e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402812:	e71a      	b.n	40264a <_vfiprintf_r+0x8ae>
  402814:	9b02      	ldr	r3, [sp, #8]
  402816:	9302      	str	r3, [sp, #8]
  402818:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40281c:	3630      	adds	r6, #48	; 0x30
  40281e:	2301      	movs	r3, #1
  402820:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402824:	9305      	str	r3, [sp, #20]
  402826:	e40b      	b.n	402040 <_vfiprintf_r+0x2a4>
  402828:	aa0f      	add	r2, sp, #60	; 0x3c
  40282a:	9904      	ldr	r1, [sp, #16]
  40282c:	9806      	ldr	r0, [sp, #24]
  40282e:	f7ff fa75 	bl	401d1c <__sprint_r.part.0>
  402832:	2800      	cmp	r0, #0
  402834:	f47f af64 	bne.w	402700 <_vfiprintf_r+0x964>
  402838:	9910      	ldr	r1, [sp, #64]	; 0x40
  40283a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40283c:	1c48      	adds	r0, r1, #1
  40283e:	46ca      	mov	sl, r9
  402840:	e651      	b.n	4024e6 <_vfiprintf_r+0x74a>
  402842:	aa0f      	add	r2, sp, #60	; 0x3c
  402844:	9904      	ldr	r1, [sp, #16]
  402846:	9806      	ldr	r0, [sp, #24]
  402848:	f7ff fa68 	bl	401d1c <__sprint_r.part.0>
  40284c:	2800      	cmp	r0, #0
  40284e:	f47f af57 	bne.w	402700 <_vfiprintf_r+0x964>
  402852:	9910      	ldr	r1, [sp, #64]	; 0x40
  402854:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402856:	1c48      	adds	r0, r1, #1
  402858:	46ca      	mov	sl, r9
  40285a:	e448      	b.n	4020ee <_vfiprintf_r+0x352>
  40285c:	2a00      	cmp	r2, #0
  40285e:	f040 8091 	bne.w	402984 <_vfiprintf_r+0xbe8>
  402862:	2001      	movs	r0, #1
  402864:	4611      	mov	r1, r2
  402866:	46ca      	mov	sl, r9
  402868:	e641      	b.n	4024ee <_vfiprintf_r+0x752>
  40286a:	aa0f      	add	r2, sp, #60	; 0x3c
  40286c:	9904      	ldr	r1, [sp, #16]
  40286e:	9806      	ldr	r0, [sp, #24]
  402870:	f7ff fa54 	bl	401d1c <__sprint_r.part.0>
  402874:	2800      	cmp	r0, #0
  402876:	f47f af43 	bne.w	402700 <_vfiprintf_r+0x964>
  40287a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40287c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40287e:	3001      	adds	r0, #1
  402880:	46ca      	mov	sl, r9
  402882:	e667      	b.n	402554 <_vfiprintf_r+0x7b8>
  402884:	46d3      	mov	fp, sl
  402886:	e6d6      	b.n	402636 <_vfiprintf_r+0x89a>
  402888:	9e07      	ldr	r6, [sp, #28]
  40288a:	3607      	adds	r6, #7
  40288c:	f026 0207 	bic.w	r2, r6, #7
  402890:	f102 0108 	add.w	r1, r2, #8
  402894:	e9d2 6700 	ldrd	r6, r7, [r2]
  402898:	9107      	str	r1, [sp, #28]
  40289a:	2201      	movs	r2, #1
  40289c:	f7ff bbb1 	b.w	402002 <_vfiprintf_r+0x266>
  4028a0:	9e07      	ldr	r6, [sp, #28]
  4028a2:	3607      	adds	r6, #7
  4028a4:	f026 0607 	bic.w	r6, r6, #7
  4028a8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4028ac:	f106 0208 	add.w	r2, r6, #8
  4028b0:	9207      	str	r2, [sp, #28]
  4028b2:	4606      	mov	r6, r0
  4028b4:	460f      	mov	r7, r1
  4028b6:	e4b6      	b.n	402226 <_vfiprintf_r+0x48a>
  4028b8:	9e07      	ldr	r6, [sp, #28]
  4028ba:	3607      	adds	r6, #7
  4028bc:	f026 0207 	bic.w	r2, r6, #7
  4028c0:	f102 0108 	add.w	r1, r2, #8
  4028c4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4028c8:	9107      	str	r1, [sp, #28]
  4028ca:	2200      	movs	r2, #0
  4028cc:	f7ff bb99 	b.w	402002 <_vfiprintf_r+0x266>
  4028d0:	9e07      	ldr	r6, [sp, #28]
  4028d2:	3607      	adds	r6, #7
  4028d4:	f026 0107 	bic.w	r1, r6, #7
  4028d8:	f101 0008 	add.w	r0, r1, #8
  4028dc:	9007      	str	r0, [sp, #28]
  4028de:	e9d1 6700 	ldrd	r6, r7, [r1]
  4028e2:	e519      	b.n	402318 <_vfiprintf_r+0x57c>
  4028e4:	46cb      	mov	fp, r9
  4028e6:	f7ff bbab 	b.w	402040 <_vfiprintf_r+0x2a4>
  4028ea:	252d      	movs	r5, #45	; 0x2d
  4028ec:	4276      	negs	r6, r6
  4028ee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4028f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4028f6:	2201      	movs	r2, #1
  4028f8:	f7ff bb88 	b.w	40200c <_vfiprintf_r+0x270>
  4028fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4028fe:	b9b3      	cbnz	r3, 40292e <_vfiprintf_r+0xb92>
  402900:	4611      	mov	r1, r2
  402902:	2001      	movs	r0, #1
  402904:	46ca      	mov	sl, r9
  402906:	e5f2      	b.n	4024ee <_vfiprintf_r+0x752>
  402908:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40290c:	f000 fdfe 	bl	40350c <__retarget_lock_release_recursive>
  402910:	f04f 33ff 	mov.w	r3, #4294967295
  402914:	9303      	str	r3, [sp, #12]
  402916:	f7ff bb50 	b.w	401fba <_vfiprintf_r+0x21e>
  40291a:	aa0f      	add	r2, sp, #60	; 0x3c
  40291c:	9904      	ldr	r1, [sp, #16]
  40291e:	9806      	ldr	r0, [sp, #24]
  402920:	f7ff f9fc 	bl	401d1c <__sprint_r.part.0>
  402924:	2800      	cmp	r0, #0
  402926:	f47f aeeb 	bne.w	402700 <_vfiprintf_r+0x964>
  40292a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40292c:	e6a9      	b.n	402682 <_vfiprintf_r+0x8e6>
  40292e:	ab0e      	add	r3, sp, #56	; 0x38
  402930:	2202      	movs	r2, #2
  402932:	931c      	str	r3, [sp, #112]	; 0x70
  402934:	921d      	str	r2, [sp, #116]	; 0x74
  402936:	2001      	movs	r0, #1
  402938:	46ca      	mov	sl, r9
  40293a:	e5d0      	b.n	4024de <_vfiprintf_r+0x742>
  40293c:	aa0f      	add	r2, sp, #60	; 0x3c
  40293e:	9904      	ldr	r1, [sp, #16]
  402940:	9806      	ldr	r0, [sp, #24]
  402942:	f7ff f9eb 	bl	401d1c <__sprint_r.part.0>
  402946:	2800      	cmp	r0, #0
  402948:	f47f aeda 	bne.w	402700 <_vfiprintf_r+0x964>
  40294c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40294e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402950:	1c48      	adds	r0, r1, #1
  402952:	46ca      	mov	sl, r9
  402954:	e5a4      	b.n	4024a0 <_vfiprintf_r+0x704>
  402956:	9a07      	ldr	r2, [sp, #28]
  402958:	9903      	ldr	r1, [sp, #12]
  40295a:	6813      	ldr	r3, [r2, #0]
  40295c:	17cd      	asrs	r5, r1, #31
  40295e:	4608      	mov	r0, r1
  402960:	3204      	adds	r2, #4
  402962:	4629      	mov	r1, r5
  402964:	9207      	str	r2, [sp, #28]
  402966:	e9c3 0100 	strd	r0, r1, [r3]
  40296a:	f7ff ba54 	b.w	401e16 <_vfiprintf_r+0x7a>
  40296e:	4658      	mov	r0, fp
  402970:	9607      	str	r6, [sp, #28]
  402972:	9302      	str	r3, [sp, #8]
  402974:	f7ff f964 	bl	401c40 <strlen>
  402978:	2400      	movs	r4, #0
  40297a:	9005      	str	r0, [sp, #20]
  40297c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402980:	f7ff bb5e 	b.w	402040 <_vfiprintf_r+0x2a4>
  402984:	aa0f      	add	r2, sp, #60	; 0x3c
  402986:	9904      	ldr	r1, [sp, #16]
  402988:	9806      	ldr	r0, [sp, #24]
  40298a:	f7ff f9c7 	bl	401d1c <__sprint_r.part.0>
  40298e:	2800      	cmp	r0, #0
  402990:	f47f aeb6 	bne.w	402700 <_vfiprintf_r+0x964>
  402994:	9910      	ldr	r1, [sp, #64]	; 0x40
  402996:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402998:	1c48      	adds	r0, r1, #1
  40299a:	46ca      	mov	sl, r9
  40299c:	e5a7      	b.n	4024ee <_vfiprintf_r+0x752>
  40299e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4029a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4029a2:	4e20      	ldr	r6, [pc, #128]	; (402a24 <_vfiprintf_r+0xc88>)
  4029a4:	3101      	adds	r1, #1
  4029a6:	f7ff bb90 	b.w	4020ca <_vfiprintf_r+0x32e>
  4029aa:	2c06      	cmp	r4, #6
  4029ac:	bf28      	it	cs
  4029ae:	2406      	movcs	r4, #6
  4029b0:	9405      	str	r4, [sp, #20]
  4029b2:	9607      	str	r6, [sp, #28]
  4029b4:	9401      	str	r4, [sp, #4]
  4029b6:	f8df b070 	ldr.w	fp, [pc, #112]	; 402a28 <_vfiprintf_r+0xc8c>
  4029ba:	e4d5      	b.n	402368 <_vfiprintf_r+0x5cc>
  4029bc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4029be:	4e19      	ldr	r6, [pc, #100]	; (402a24 <_vfiprintf_r+0xc88>)
  4029c0:	3001      	adds	r0, #1
  4029c2:	e603      	b.n	4025cc <_vfiprintf_r+0x830>
  4029c4:	9405      	str	r4, [sp, #20]
  4029c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4029ca:	9607      	str	r6, [sp, #28]
  4029cc:	9302      	str	r3, [sp, #8]
  4029ce:	4604      	mov	r4, r0
  4029d0:	f7ff bb36 	b.w	402040 <_vfiprintf_r+0x2a4>
  4029d4:	4686      	mov	lr, r0
  4029d6:	f7ff bbce 	b.w	402176 <_vfiprintf_r+0x3da>
  4029da:	9806      	ldr	r0, [sp, #24]
  4029dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4029de:	4659      	mov	r1, fp
  4029e0:	f7ff f99c 	bl	401d1c <__sprint_r.part.0>
  4029e4:	2800      	cmp	r0, #0
  4029e6:	f43f ae24 	beq.w	402632 <_vfiprintf_r+0x896>
  4029ea:	e624      	b.n	402636 <_vfiprintf_r+0x89a>
  4029ec:	9907      	ldr	r1, [sp, #28]
  4029ee:	f898 2001 	ldrb.w	r2, [r8, #1]
  4029f2:	680c      	ldr	r4, [r1, #0]
  4029f4:	3104      	adds	r1, #4
  4029f6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4029fa:	46b8      	mov	r8, r7
  4029fc:	9107      	str	r1, [sp, #28]
  4029fe:	f7ff ba3f 	b.w	401e80 <_vfiprintf_r+0xe4>
  402a02:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402a06:	e43c      	b.n	402282 <_vfiprintf_r+0x4e6>
  402a08:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402a0c:	e521      	b.n	402452 <_vfiprintf_r+0x6b6>
  402a0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402a12:	f7ff bbf4 	b.w	4021fe <_vfiprintf_r+0x462>
  402a16:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402a1a:	e491      	b.n	402340 <_vfiprintf_r+0x5a4>
  402a1c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402a20:	e469      	b.n	4022f6 <_vfiprintf_r+0x55a>
  402a22:	bf00      	nop
  402a24:	00404d48 	.word	0x00404d48
  402a28:	00404d40 	.word	0x00404d40

00402a2c <__sbprintf>:
  402a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402a30:	460c      	mov	r4, r1
  402a32:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402a36:	8989      	ldrh	r1, [r1, #12]
  402a38:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402a3a:	89e5      	ldrh	r5, [r4, #14]
  402a3c:	9619      	str	r6, [sp, #100]	; 0x64
  402a3e:	f021 0102 	bic.w	r1, r1, #2
  402a42:	4606      	mov	r6, r0
  402a44:	69e0      	ldr	r0, [r4, #28]
  402a46:	f8ad 100c 	strh.w	r1, [sp, #12]
  402a4a:	4617      	mov	r7, r2
  402a4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402a50:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402a52:	f8ad 500e 	strh.w	r5, [sp, #14]
  402a56:	4698      	mov	r8, r3
  402a58:	ad1a      	add	r5, sp, #104	; 0x68
  402a5a:	2300      	movs	r3, #0
  402a5c:	9007      	str	r0, [sp, #28]
  402a5e:	a816      	add	r0, sp, #88	; 0x58
  402a60:	9209      	str	r2, [sp, #36]	; 0x24
  402a62:	9306      	str	r3, [sp, #24]
  402a64:	9500      	str	r5, [sp, #0]
  402a66:	9504      	str	r5, [sp, #16]
  402a68:	9102      	str	r1, [sp, #8]
  402a6a:	9105      	str	r1, [sp, #20]
  402a6c:	f000 fd48 	bl	403500 <__retarget_lock_init_recursive>
  402a70:	4643      	mov	r3, r8
  402a72:	463a      	mov	r2, r7
  402a74:	4669      	mov	r1, sp
  402a76:	4630      	mov	r0, r6
  402a78:	f7ff f990 	bl	401d9c <_vfiprintf_r>
  402a7c:	1e05      	subs	r5, r0, #0
  402a7e:	db07      	blt.n	402a90 <__sbprintf+0x64>
  402a80:	4630      	mov	r0, r6
  402a82:	4669      	mov	r1, sp
  402a84:	f000 f928 	bl	402cd8 <_fflush_r>
  402a88:	2800      	cmp	r0, #0
  402a8a:	bf18      	it	ne
  402a8c:	f04f 35ff 	movne.w	r5, #4294967295
  402a90:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402a94:	065b      	lsls	r3, r3, #25
  402a96:	d503      	bpl.n	402aa0 <__sbprintf+0x74>
  402a98:	89a3      	ldrh	r3, [r4, #12]
  402a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402a9e:	81a3      	strh	r3, [r4, #12]
  402aa0:	9816      	ldr	r0, [sp, #88]	; 0x58
  402aa2:	f000 fd2f 	bl	403504 <__retarget_lock_close_recursive>
  402aa6:	4628      	mov	r0, r5
  402aa8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  402aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402ab0 <__swsetup_r>:
  402ab0:	b538      	push	{r3, r4, r5, lr}
  402ab2:	4b30      	ldr	r3, [pc, #192]	; (402b74 <__swsetup_r+0xc4>)
  402ab4:	681b      	ldr	r3, [r3, #0]
  402ab6:	4605      	mov	r5, r0
  402ab8:	460c      	mov	r4, r1
  402aba:	b113      	cbz	r3, 402ac2 <__swsetup_r+0x12>
  402abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402abe:	2a00      	cmp	r2, #0
  402ac0:	d038      	beq.n	402b34 <__swsetup_r+0x84>
  402ac2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402ac6:	b293      	uxth	r3, r2
  402ac8:	0718      	lsls	r0, r3, #28
  402aca:	d50c      	bpl.n	402ae6 <__swsetup_r+0x36>
  402acc:	6920      	ldr	r0, [r4, #16]
  402ace:	b1a8      	cbz	r0, 402afc <__swsetup_r+0x4c>
  402ad0:	f013 0201 	ands.w	r2, r3, #1
  402ad4:	d01e      	beq.n	402b14 <__swsetup_r+0x64>
  402ad6:	6963      	ldr	r3, [r4, #20]
  402ad8:	2200      	movs	r2, #0
  402ada:	425b      	negs	r3, r3
  402adc:	61a3      	str	r3, [r4, #24]
  402ade:	60a2      	str	r2, [r4, #8]
  402ae0:	b1f0      	cbz	r0, 402b20 <__swsetup_r+0x70>
  402ae2:	2000      	movs	r0, #0
  402ae4:	bd38      	pop	{r3, r4, r5, pc}
  402ae6:	06d9      	lsls	r1, r3, #27
  402ae8:	d53c      	bpl.n	402b64 <__swsetup_r+0xb4>
  402aea:	0758      	lsls	r0, r3, #29
  402aec:	d426      	bmi.n	402b3c <__swsetup_r+0x8c>
  402aee:	6920      	ldr	r0, [r4, #16]
  402af0:	f042 0308 	orr.w	r3, r2, #8
  402af4:	81a3      	strh	r3, [r4, #12]
  402af6:	b29b      	uxth	r3, r3
  402af8:	2800      	cmp	r0, #0
  402afa:	d1e9      	bne.n	402ad0 <__swsetup_r+0x20>
  402afc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402b00:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402b04:	d0e4      	beq.n	402ad0 <__swsetup_r+0x20>
  402b06:	4628      	mov	r0, r5
  402b08:	4621      	mov	r1, r4
  402b0a:	f000 fd2f 	bl	40356c <__smakebuf_r>
  402b0e:	89a3      	ldrh	r3, [r4, #12]
  402b10:	6920      	ldr	r0, [r4, #16]
  402b12:	e7dd      	b.n	402ad0 <__swsetup_r+0x20>
  402b14:	0799      	lsls	r1, r3, #30
  402b16:	bf58      	it	pl
  402b18:	6962      	ldrpl	r2, [r4, #20]
  402b1a:	60a2      	str	r2, [r4, #8]
  402b1c:	2800      	cmp	r0, #0
  402b1e:	d1e0      	bne.n	402ae2 <__swsetup_r+0x32>
  402b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b24:	061a      	lsls	r2, r3, #24
  402b26:	d5dd      	bpl.n	402ae4 <__swsetup_r+0x34>
  402b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402b2c:	81a3      	strh	r3, [r4, #12]
  402b2e:	f04f 30ff 	mov.w	r0, #4294967295
  402b32:	bd38      	pop	{r3, r4, r5, pc}
  402b34:	4618      	mov	r0, r3
  402b36:	f000 f927 	bl	402d88 <__sinit>
  402b3a:	e7c2      	b.n	402ac2 <__swsetup_r+0x12>
  402b3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402b3e:	b151      	cbz	r1, 402b56 <__swsetup_r+0xa6>
  402b40:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402b44:	4299      	cmp	r1, r3
  402b46:	d004      	beq.n	402b52 <__swsetup_r+0xa2>
  402b48:	4628      	mov	r0, r5
  402b4a:	f000 fa43 	bl	402fd4 <_free_r>
  402b4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402b52:	2300      	movs	r3, #0
  402b54:	6323      	str	r3, [r4, #48]	; 0x30
  402b56:	2300      	movs	r3, #0
  402b58:	6920      	ldr	r0, [r4, #16]
  402b5a:	6063      	str	r3, [r4, #4]
  402b5c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402b60:	6020      	str	r0, [r4, #0]
  402b62:	e7c5      	b.n	402af0 <__swsetup_r+0x40>
  402b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402b68:	2309      	movs	r3, #9
  402b6a:	602b      	str	r3, [r5, #0]
  402b6c:	f04f 30ff 	mov.w	r0, #4294967295
  402b70:	81a2      	strh	r2, [r4, #12]
  402b72:	bd38      	pop	{r3, r4, r5, pc}
  402b74:	20000008 	.word	0x20000008

00402b78 <register_fini>:
  402b78:	4b02      	ldr	r3, [pc, #8]	; (402b84 <register_fini+0xc>)
  402b7a:	b113      	cbz	r3, 402b82 <register_fini+0xa>
  402b7c:	4802      	ldr	r0, [pc, #8]	; (402b88 <register_fini+0x10>)
  402b7e:	f000 b805 	b.w	402b8c <atexit>
  402b82:	4770      	bx	lr
  402b84:	00000000 	.word	0x00000000
  402b88:	00402df9 	.word	0x00402df9

00402b8c <atexit>:
  402b8c:	2300      	movs	r3, #0
  402b8e:	4601      	mov	r1, r0
  402b90:	461a      	mov	r2, r3
  402b92:	4618      	mov	r0, r3
  402b94:	f001 bc00 	b.w	404398 <__register_exitproc>

00402b98 <__sflush_r>:
  402b98:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402b9c:	b29a      	uxth	r2, r3
  402b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402ba2:	460d      	mov	r5, r1
  402ba4:	0711      	lsls	r1, r2, #28
  402ba6:	4680      	mov	r8, r0
  402ba8:	d43a      	bmi.n	402c20 <__sflush_r+0x88>
  402baa:	686a      	ldr	r2, [r5, #4]
  402bac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402bb0:	2a00      	cmp	r2, #0
  402bb2:	81ab      	strh	r3, [r5, #12]
  402bb4:	dd6f      	ble.n	402c96 <__sflush_r+0xfe>
  402bb6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402bb8:	2c00      	cmp	r4, #0
  402bba:	d049      	beq.n	402c50 <__sflush_r+0xb8>
  402bbc:	2200      	movs	r2, #0
  402bbe:	b29b      	uxth	r3, r3
  402bc0:	f8d8 6000 	ldr.w	r6, [r8]
  402bc4:	f8c8 2000 	str.w	r2, [r8]
  402bc8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402bcc:	d067      	beq.n	402c9e <__sflush_r+0x106>
  402bce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402bd0:	075f      	lsls	r7, r3, #29
  402bd2:	d505      	bpl.n	402be0 <__sflush_r+0x48>
  402bd4:	6869      	ldr	r1, [r5, #4]
  402bd6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402bd8:	1a52      	subs	r2, r2, r1
  402bda:	b10b      	cbz	r3, 402be0 <__sflush_r+0x48>
  402bdc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402bde:	1ad2      	subs	r2, r2, r3
  402be0:	2300      	movs	r3, #0
  402be2:	69e9      	ldr	r1, [r5, #28]
  402be4:	4640      	mov	r0, r8
  402be6:	47a0      	blx	r4
  402be8:	1c44      	adds	r4, r0, #1
  402bea:	d03c      	beq.n	402c66 <__sflush_r+0xce>
  402bec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402bf0:	692a      	ldr	r2, [r5, #16]
  402bf2:	602a      	str	r2, [r5, #0]
  402bf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402bf8:	2200      	movs	r2, #0
  402bfa:	81ab      	strh	r3, [r5, #12]
  402bfc:	04db      	lsls	r3, r3, #19
  402bfe:	606a      	str	r2, [r5, #4]
  402c00:	d447      	bmi.n	402c92 <__sflush_r+0xfa>
  402c02:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402c04:	f8c8 6000 	str.w	r6, [r8]
  402c08:	b311      	cbz	r1, 402c50 <__sflush_r+0xb8>
  402c0a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402c0e:	4299      	cmp	r1, r3
  402c10:	d002      	beq.n	402c18 <__sflush_r+0x80>
  402c12:	4640      	mov	r0, r8
  402c14:	f000 f9de 	bl	402fd4 <_free_r>
  402c18:	2000      	movs	r0, #0
  402c1a:	6328      	str	r0, [r5, #48]	; 0x30
  402c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c20:	692e      	ldr	r6, [r5, #16]
  402c22:	b1ae      	cbz	r6, 402c50 <__sflush_r+0xb8>
  402c24:	682c      	ldr	r4, [r5, #0]
  402c26:	602e      	str	r6, [r5, #0]
  402c28:	0791      	lsls	r1, r2, #30
  402c2a:	bf0c      	ite	eq
  402c2c:	696b      	ldreq	r3, [r5, #20]
  402c2e:	2300      	movne	r3, #0
  402c30:	1ba4      	subs	r4, r4, r6
  402c32:	60ab      	str	r3, [r5, #8]
  402c34:	e00a      	b.n	402c4c <__sflush_r+0xb4>
  402c36:	4623      	mov	r3, r4
  402c38:	4632      	mov	r2, r6
  402c3a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402c3c:	69e9      	ldr	r1, [r5, #28]
  402c3e:	4640      	mov	r0, r8
  402c40:	47b8      	blx	r7
  402c42:	2800      	cmp	r0, #0
  402c44:	eba4 0400 	sub.w	r4, r4, r0
  402c48:	4406      	add	r6, r0
  402c4a:	dd04      	ble.n	402c56 <__sflush_r+0xbe>
  402c4c:	2c00      	cmp	r4, #0
  402c4e:	dcf2      	bgt.n	402c36 <__sflush_r+0x9e>
  402c50:	2000      	movs	r0, #0
  402c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c56:	89ab      	ldrh	r3, [r5, #12]
  402c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402c5c:	81ab      	strh	r3, [r5, #12]
  402c5e:	f04f 30ff 	mov.w	r0, #4294967295
  402c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c66:	f8d8 4000 	ldr.w	r4, [r8]
  402c6a:	2c1d      	cmp	r4, #29
  402c6c:	d8f3      	bhi.n	402c56 <__sflush_r+0xbe>
  402c6e:	4b19      	ldr	r3, [pc, #100]	; (402cd4 <__sflush_r+0x13c>)
  402c70:	40e3      	lsrs	r3, r4
  402c72:	43db      	mvns	r3, r3
  402c74:	f013 0301 	ands.w	r3, r3, #1
  402c78:	d1ed      	bne.n	402c56 <__sflush_r+0xbe>
  402c7a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402c7e:	606b      	str	r3, [r5, #4]
  402c80:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402c84:	6929      	ldr	r1, [r5, #16]
  402c86:	81ab      	strh	r3, [r5, #12]
  402c88:	04da      	lsls	r2, r3, #19
  402c8a:	6029      	str	r1, [r5, #0]
  402c8c:	d5b9      	bpl.n	402c02 <__sflush_r+0x6a>
  402c8e:	2c00      	cmp	r4, #0
  402c90:	d1b7      	bne.n	402c02 <__sflush_r+0x6a>
  402c92:	6528      	str	r0, [r5, #80]	; 0x50
  402c94:	e7b5      	b.n	402c02 <__sflush_r+0x6a>
  402c96:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402c98:	2a00      	cmp	r2, #0
  402c9a:	dc8c      	bgt.n	402bb6 <__sflush_r+0x1e>
  402c9c:	e7d8      	b.n	402c50 <__sflush_r+0xb8>
  402c9e:	2301      	movs	r3, #1
  402ca0:	69e9      	ldr	r1, [r5, #28]
  402ca2:	4640      	mov	r0, r8
  402ca4:	47a0      	blx	r4
  402ca6:	1c43      	adds	r3, r0, #1
  402ca8:	4602      	mov	r2, r0
  402caa:	d002      	beq.n	402cb2 <__sflush_r+0x11a>
  402cac:	89ab      	ldrh	r3, [r5, #12]
  402cae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402cb0:	e78e      	b.n	402bd0 <__sflush_r+0x38>
  402cb2:	f8d8 3000 	ldr.w	r3, [r8]
  402cb6:	2b00      	cmp	r3, #0
  402cb8:	d0f8      	beq.n	402cac <__sflush_r+0x114>
  402cba:	2b1d      	cmp	r3, #29
  402cbc:	d001      	beq.n	402cc2 <__sflush_r+0x12a>
  402cbe:	2b16      	cmp	r3, #22
  402cc0:	d102      	bne.n	402cc8 <__sflush_r+0x130>
  402cc2:	f8c8 6000 	str.w	r6, [r8]
  402cc6:	e7c3      	b.n	402c50 <__sflush_r+0xb8>
  402cc8:	89ab      	ldrh	r3, [r5, #12]
  402cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402cce:	81ab      	strh	r3, [r5, #12]
  402cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402cd4:	20400001 	.word	0x20400001

00402cd8 <_fflush_r>:
  402cd8:	b538      	push	{r3, r4, r5, lr}
  402cda:	460d      	mov	r5, r1
  402cdc:	4604      	mov	r4, r0
  402cde:	b108      	cbz	r0, 402ce4 <_fflush_r+0xc>
  402ce0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402ce2:	b1bb      	cbz	r3, 402d14 <_fflush_r+0x3c>
  402ce4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402ce8:	b188      	cbz	r0, 402d0e <_fflush_r+0x36>
  402cea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402cec:	07db      	lsls	r3, r3, #31
  402cee:	d401      	bmi.n	402cf4 <_fflush_r+0x1c>
  402cf0:	0581      	lsls	r1, r0, #22
  402cf2:	d517      	bpl.n	402d24 <_fflush_r+0x4c>
  402cf4:	4620      	mov	r0, r4
  402cf6:	4629      	mov	r1, r5
  402cf8:	f7ff ff4e 	bl	402b98 <__sflush_r>
  402cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402cfe:	07da      	lsls	r2, r3, #31
  402d00:	4604      	mov	r4, r0
  402d02:	d402      	bmi.n	402d0a <_fflush_r+0x32>
  402d04:	89ab      	ldrh	r3, [r5, #12]
  402d06:	059b      	lsls	r3, r3, #22
  402d08:	d507      	bpl.n	402d1a <_fflush_r+0x42>
  402d0a:	4620      	mov	r0, r4
  402d0c:	bd38      	pop	{r3, r4, r5, pc}
  402d0e:	4604      	mov	r4, r0
  402d10:	4620      	mov	r0, r4
  402d12:	bd38      	pop	{r3, r4, r5, pc}
  402d14:	f000 f838 	bl	402d88 <__sinit>
  402d18:	e7e4      	b.n	402ce4 <_fflush_r+0xc>
  402d1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402d1c:	f000 fbf6 	bl	40350c <__retarget_lock_release_recursive>
  402d20:	4620      	mov	r0, r4
  402d22:	bd38      	pop	{r3, r4, r5, pc}
  402d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402d26:	f000 fbef 	bl	403508 <__retarget_lock_acquire_recursive>
  402d2a:	e7e3      	b.n	402cf4 <_fflush_r+0x1c>

00402d2c <_cleanup_r>:
  402d2c:	4901      	ldr	r1, [pc, #4]	; (402d34 <_cleanup_r+0x8>)
  402d2e:	f000 bbaf 	b.w	403490 <_fwalk_reent>
  402d32:	bf00      	nop
  402d34:	00404481 	.word	0x00404481

00402d38 <std.isra.0>:
  402d38:	b510      	push	{r4, lr}
  402d3a:	2300      	movs	r3, #0
  402d3c:	4604      	mov	r4, r0
  402d3e:	8181      	strh	r1, [r0, #12]
  402d40:	81c2      	strh	r2, [r0, #14]
  402d42:	6003      	str	r3, [r0, #0]
  402d44:	6043      	str	r3, [r0, #4]
  402d46:	6083      	str	r3, [r0, #8]
  402d48:	6643      	str	r3, [r0, #100]	; 0x64
  402d4a:	6103      	str	r3, [r0, #16]
  402d4c:	6143      	str	r3, [r0, #20]
  402d4e:	6183      	str	r3, [r0, #24]
  402d50:	4619      	mov	r1, r3
  402d52:	2208      	movs	r2, #8
  402d54:	305c      	adds	r0, #92	; 0x5c
  402d56:	f7fe fdff 	bl	401958 <memset>
  402d5a:	4807      	ldr	r0, [pc, #28]	; (402d78 <std.isra.0+0x40>)
  402d5c:	4907      	ldr	r1, [pc, #28]	; (402d7c <std.isra.0+0x44>)
  402d5e:	4a08      	ldr	r2, [pc, #32]	; (402d80 <std.isra.0+0x48>)
  402d60:	4b08      	ldr	r3, [pc, #32]	; (402d84 <std.isra.0+0x4c>)
  402d62:	6220      	str	r0, [r4, #32]
  402d64:	61e4      	str	r4, [r4, #28]
  402d66:	6261      	str	r1, [r4, #36]	; 0x24
  402d68:	62a2      	str	r2, [r4, #40]	; 0x28
  402d6a:	62e3      	str	r3, [r4, #44]	; 0x2c
  402d6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402d74:	f000 bbc4 	b.w	403500 <__retarget_lock_init_recursive>
  402d78:	004041c5 	.word	0x004041c5
  402d7c:	004041e9 	.word	0x004041e9
  402d80:	00404225 	.word	0x00404225
  402d84:	00404245 	.word	0x00404245

00402d88 <__sinit>:
  402d88:	b510      	push	{r4, lr}
  402d8a:	4604      	mov	r4, r0
  402d8c:	4812      	ldr	r0, [pc, #72]	; (402dd8 <__sinit+0x50>)
  402d8e:	f000 fbbb 	bl	403508 <__retarget_lock_acquire_recursive>
  402d92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402d94:	b9d2      	cbnz	r2, 402dcc <__sinit+0x44>
  402d96:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  402d9a:	4810      	ldr	r0, [pc, #64]	; (402ddc <__sinit+0x54>)
  402d9c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402da0:	2103      	movs	r1, #3
  402da2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402da6:	63e0      	str	r0, [r4, #60]	; 0x3c
  402da8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  402dac:	6860      	ldr	r0, [r4, #4]
  402dae:	2104      	movs	r1, #4
  402db0:	f7ff ffc2 	bl	402d38 <std.isra.0>
  402db4:	2201      	movs	r2, #1
  402db6:	2109      	movs	r1, #9
  402db8:	68a0      	ldr	r0, [r4, #8]
  402dba:	f7ff ffbd 	bl	402d38 <std.isra.0>
  402dbe:	2202      	movs	r2, #2
  402dc0:	2112      	movs	r1, #18
  402dc2:	68e0      	ldr	r0, [r4, #12]
  402dc4:	f7ff ffb8 	bl	402d38 <std.isra.0>
  402dc8:	2301      	movs	r3, #1
  402dca:	63a3      	str	r3, [r4, #56]	; 0x38
  402dcc:	4802      	ldr	r0, [pc, #8]	; (402dd8 <__sinit+0x50>)
  402dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402dd2:	f000 bb9b 	b.w	40350c <__retarget_lock_release_recursive>
  402dd6:	bf00      	nop
  402dd8:	20000ab0 	.word	0x20000ab0
  402ddc:	00402d2d 	.word	0x00402d2d

00402de0 <__sfp_lock_acquire>:
  402de0:	4801      	ldr	r0, [pc, #4]	; (402de8 <__sfp_lock_acquire+0x8>)
  402de2:	f000 bb91 	b.w	403508 <__retarget_lock_acquire_recursive>
  402de6:	bf00      	nop
  402de8:	20000ac4 	.word	0x20000ac4

00402dec <__sfp_lock_release>:
  402dec:	4801      	ldr	r0, [pc, #4]	; (402df4 <__sfp_lock_release+0x8>)
  402dee:	f000 bb8d 	b.w	40350c <__retarget_lock_release_recursive>
  402df2:	bf00      	nop
  402df4:	20000ac4 	.word	0x20000ac4

00402df8 <__libc_fini_array>:
  402df8:	b538      	push	{r3, r4, r5, lr}
  402dfa:	4c0a      	ldr	r4, [pc, #40]	; (402e24 <__libc_fini_array+0x2c>)
  402dfc:	4d0a      	ldr	r5, [pc, #40]	; (402e28 <__libc_fini_array+0x30>)
  402dfe:	1b64      	subs	r4, r4, r5
  402e00:	10a4      	asrs	r4, r4, #2
  402e02:	d00a      	beq.n	402e1a <__libc_fini_array+0x22>
  402e04:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402e08:	3b01      	subs	r3, #1
  402e0a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402e0e:	3c01      	subs	r4, #1
  402e10:	f855 3904 	ldr.w	r3, [r5], #-4
  402e14:	4798      	blx	r3
  402e16:	2c00      	cmp	r4, #0
  402e18:	d1f9      	bne.n	402e0e <__libc_fini_array+0x16>
  402e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402e1e:	f002 b837 	b.w	404e90 <_fini>
  402e22:	bf00      	nop
  402e24:	00404ea0 	.word	0x00404ea0
  402e28:	00404e9c 	.word	0x00404e9c

00402e2c <__fputwc>:
  402e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402e30:	b082      	sub	sp, #8
  402e32:	4680      	mov	r8, r0
  402e34:	4689      	mov	r9, r1
  402e36:	4614      	mov	r4, r2
  402e38:	f000 fb54 	bl	4034e4 <__locale_mb_cur_max>
  402e3c:	2801      	cmp	r0, #1
  402e3e:	d036      	beq.n	402eae <__fputwc+0x82>
  402e40:	464a      	mov	r2, r9
  402e42:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402e46:	a901      	add	r1, sp, #4
  402e48:	4640      	mov	r0, r8
  402e4a:	f001 fa57 	bl	4042fc <_wcrtomb_r>
  402e4e:	1c42      	adds	r2, r0, #1
  402e50:	4606      	mov	r6, r0
  402e52:	d025      	beq.n	402ea0 <__fputwc+0x74>
  402e54:	b3a8      	cbz	r0, 402ec2 <__fputwc+0x96>
  402e56:	f89d e004 	ldrb.w	lr, [sp, #4]
  402e5a:	2500      	movs	r5, #0
  402e5c:	f10d 0a04 	add.w	sl, sp, #4
  402e60:	e009      	b.n	402e76 <__fputwc+0x4a>
  402e62:	6823      	ldr	r3, [r4, #0]
  402e64:	1c5a      	adds	r2, r3, #1
  402e66:	6022      	str	r2, [r4, #0]
  402e68:	f883 e000 	strb.w	lr, [r3]
  402e6c:	3501      	adds	r5, #1
  402e6e:	42b5      	cmp	r5, r6
  402e70:	d227      	bcs.n	402ec2 <__fputwc+0x96>
  402e72:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402e76:	68a3      	ldr	r3, [r4, #8]
  402e78:	3b01      	subs	r3, #1
  402e7a:	2b00      	cmp	r3, #0
  402e7c:	60a3      	str	r3, [r4, #8]
  402e7e:	daf0      	bge.n	402e62 <__fputwc+0x36>
  402e80:	69a7      	ldr	r7, [r4, #24]
  402e82:	42bb      	cmp	r3, r7
  402e84:	4671      	mov	r1, lr
  402e86:	4622      	mov	r2, r4
  402e88:	4640      	mov	r0, r8
  402e8a:	db02      	blt.n	402e92 <__fputwc+0x66>
  402e8c:	f1be 0f0a 	cmp.w	lr, #10
  402e90:	d1e7      	bne.n	402e62 <__fputwc+0x36>
  402e92:	f001 f9db 	bl	40424c <__swbuf_r>
  402e96:	1c43      	adds	r3, r0, #1
  402e98:	d1e8      	bne.n	402e6c <__fputwc+0x40>
  402e9a:	b002      	add	sp, #8
  402e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402ea0:	89a3      	ldrh	r3, [r4, #12]
  402ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402ea6:	81a3      	strh	r3, [r4, #12]
  402ea8:	b002      	add	sp, #8
  402eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402eae:	f109 33ff 	add.w	r3, r9, #4294967295
  402eb2:	2bfe      	cmp	r3, #254	; 0xfe
  402eb4:	d8c4      	bhi.n	402e40 <__fputwc+0x14>
  402eb6:	fa5f fe89 	uxtb.w	lr, r9
  402eba:	4606      	mov	r6, r0
  402ebc:	f88d e004 	strb.w	lr, [sp, #4]
  402ec0:	e7cb      	b.n	402e5a <__fputwc+0x2e>
  402ec2:	4648      	mov	r0, r9
  402ec4:	b002      	add	sp, #8
  402ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402eca:	bf00      	nop

00402ecc <_fputwc_r>:
  402ecc:	b530      	push	{r4, r5, lr}
  402ece:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402ed0:	f013 0f01 	tst.w	r3, #1
  402ed4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402ed8:	4614      	mov	r4, r2
  402eda:	b083      	sub	sp, #12
  402edc:	4605      	mov	r5, r0
  402ede:	b29a      	uxth	r2, r3
  402ee0:	d101      	bne.n	402ee6 <_fputwc_r+0x1a>
  402ee2:	0590      	lsls	r0, r2, #22
  402ee4:	d51c      	bpl.n	402f20 <_fputwc_r+0x54>
  402ee6:	0490      	lsls	r0, r2, #18
  402ee8:	d406      	bmi.n	402ef8 <_fputwc_r+0x2c>
  402eea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402eec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402ef4:	81a3      	strh	r3, [r4, #12]
  402ef6:	6662      	str	r2, [r4, #100]	; 0x64
  402ef8:	4628      	mov	r0, r5
  402efa:	4622      	mov	r2, r4
  402efc:	f7ff ff96 	bl	402e2c <__fputwc>
  402f00:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402f02:	07da      	lsls	r2, r3, #31
  402f04:	4605      	mov	r5, r0
  402f06:	d402      	bmi.n	402f0e <_fputwc_r+0x42>
  402f08:	89a3      	ldrh	r3, [r4, #12]
  402f0a:	059b      	lsls	r3, r3, #22
  402f0c:	d502      	bpl.n	402f14 <_fputwc_r+0x48>
  402f0e:	4628      	mov	r0, r5
  402f10:	b003      	add	sp, #12
  402f12:	bd30      	pop	{r4, r5, pc}
  402f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402f16:	f000 faf9 	bl	40350c <__retarget_lock_release_recursive>
  402f1a:	4628      	mov	r0, r5
  402f1c:	b003      	add	sp, #12
  402f1e:	bd30      	pop	{r4, r5, pc}
  402f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402f22:	9101      	str	r1, [sp, #4]
  402f24:	f000 faf0 	bl	403508 <__retarget_lock_acquire_recursive>
  402f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402f2c:	9901      	ldr	r1, [sp, #4]
  402f2e:	b29a      	uxth	r2, r3
  402f30:	e7d9      	b.n	402ee6 <_fputwc_r+0x1a>
  402f32:	bf00      	nop

00402f34 <_malloc_trim_r>:
  402f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402f36:	4f24      	ldr	r7, [pc, #144]	; (402fc8 <_malloc_trim_r+0x94>)
  402f38:	460c      	mov	r4, r1
  402f3a:	4606      	mov	r6, r0
  402f3c:	f000 ff7e 	bl	403e3c <__malloc_lock>
  402f40:	68bb      	ldr	r3, [r7, #8]
  402f42:	685d      	ldr	r5, [r3, #4]
  402f44:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402f48:	310f      	adds	r1, #15
  402f4a:	f025 0503 	bic.w	r5, r5, #3
  402f4e:	4429      	add	r1, r5
  402f50:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402f54:	f021 010f 	bic.w	r1, r1, #15
  402f58:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402f5c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402f60:	db07      	blt.n	402f72 <_malloc_trim_r+0x3e>
  402f62:	2100      	movs	r1, #0
  402f64:	4630      	mov	r0, r6
  402f66:	f001 f91b 	bl	4041a0 <_sbrk_r>
  402f6a:	68bb      	ldr	r3, [r7, #8]
  402f6c:	442b      	add	r3, r5
  402f6e:	4298      	cmp	r0, r3
  402f70:	d004      	beq.n	402f7c <_malloc_trim_r+0x48>
  402f72:	4630      	mov	r0, r6
  402f74:	f000 ff68 	bl	403e48 <__malloc_unlock>
  402f78:	2000      	movs	r0, #0
  402f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402f7c:	4261      	negs	r1, r4
  402f7e:	4630      	mov	r0, r6
  402f80:	f001 f90e 	bl	4041a0 <_sbrk_r>
  402f84:	3001      	adds	r0, #1
  402f86:	d00d      	beq.n	402fa4 <_malloc_trim_r+0x70>
  402f88:	4b10      	ldr	r3, [pc, #64]	; (402fcc <_malloc_trim_r+0x98>)
  402f8a:	68ba      	ldr	r2, [r7, #8]
  402f8c:	6819      	ldr	r1, [r3, #0]
  402f8e:	1b2d      	subs	r5, r5, r4
  402f90:	f045 0501 	orr.w	r5, r5, #1
  402f94:	4630      	mov	r0, r6
  402f96:	1b09      	subs	r1, r1, r4
  402f98:	6055      	str	r5, [r2, #4]
  402f9a:	6019      	str	r1, [r3, #0]
  402f9c:	f000 ff54 	bl	403e48 <__malloc_unlock>
  402fa0:	2001      	movs	r0, #1
  402fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402fa4:	2100      	movs	r1, #0
  402fa6:	4630      	mov	r0, r6
  402fa8:	f001 f8fa 	bl	4041a0 <_sbrk_r>
  402fac:	68ba      	ldr	r2, [r7, #8]
  402fae:	1a83      	subs	r3, r0, r2
  402fb0:	2b0f      	cmp	r3, #15
  402fb2:	ddde      	ble.n	402f72 <_malloc_trim_r+0x3e>
  402fb4:	4c06      	ldr	r4, [pc, #24]	; (402fd0 <_malloc_trim_r+0x9c>)
  402fb6:	4905      	ldr	r1, [pc, #20]	; (402fcc <_malloc_trim_r+0x98>)
  402fb8:	6824      	ldr	r4, [r4, #0]
  402fba:	f043 0301 	orr.w	r3, r3, #1
  402fbe:	1b00      	subs	r0, r0, r4
  402fc0:	6053      	str	r3, [r2, #4]
  402fc2:	6008      	str	r0, [r1, #0]
  402fc4:	e7d5      	b.n	402f72 <_malloc_trim_r+0x3e>
  402fc6:	bf00      	nop
  402fc8:	200005a8 	.word	0x200005a8
  402fcc:	20000a50 	.word	0x20000a50
  402fd0:	200009b0 	.word	0x200009b0

00402fd4 <_free_r>:
  402fd4:	2900      	cmp	r1, #0
  402fd6:	d044      	beq.n	403062 <_free_r+0x8e>
  402fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402fdc:	460d      	mov	r5, r1
  402fde:	4680      	mov	r8, r0
  402fe0:	f000 ff2c 	bl	403e3c <__malloc_lock>
  402fe4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402fe8:	4969      	ldr	r1, [pc, #420]	; (403190 <_free_r+0x1bc>)
  402fea:	f027 0301 	bic.w	r3, r7, #1
  402fee:	f1a5 0408 	sub.w	r4, r5, #8
  402ff2:	18e2      	adds	r2, r4, r3
  402ff4:	688e      	ldr	r6, [r1, #8]
  402ff6:	6850      	ldr	r0, [r2, #4]
  402ff8:	42b2      	cmp	r2, r6
  402ffa:	f020 0003 	bic.w	r0, r0, #3
  402ffe:	d05e      	beq.n	4030be <_free_r+0xea>
  403000:	07fe      	lsls	r6, r7, #31
  403002:	6050      	str	r0, [r2, #4]
  403004:	d40b      	bmi.n	40301e <_free_r+0x4a>
  403006:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40300a:	1be4      	subs	r4, r4, r7
  40300c:	f101 0e08 	add.w	lr, r1, #8
  403010:	68a5      	ldr	r5, [r4, #8]
  403012:	4575      	cmp	r5, lr
  403014:	443b      	add	r3, r7
  403016:	d06d      	beq.n	4030f4 <_free_r+0x120>
  403018:	68e7      	ldr	r7, [r4, #12]
  40301a:	60ef      	str	r7, [r5, #12]
  40301c:	60bd      	str	r5, [r7, #8]
  40301e:	1815      	adds	r5, r2, r0
  403020:	686d      	ldr	r5, [r5, #4]
  403022:	07ed      	lsls	r5, r5, #31
  403024:	d53e      	bpl.n	4030a4 <_free_r+0xd0>
  403026:	f043 0201 	orr.w	r2, r3, #1
  40302a:	6062      	str	r2, [r4, #4]
  40302c:	50e3      	str	r3, [r4, r3]
  40302e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403032:	d217      	bcs.n	403064 <_free_r+0x90>
  403034:	08db      	lsrs	r3, r3, #3
  403036:	1c58      	adds	r0, r3, #1
  403038:	109a      	asrs	r2, r3, #2
  40303a:	684d      	ldr	r5, [r1, #4]
  40303c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  403040:	60a7      	str	r7, [r4, #8]
  403042:	2301      	movs	r3, #1
  403044:	4093      	lsls	r3, r2
  403046:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40304a:	432b      	orrs	r3, r5
  40304c:	3a08      	subs	r2, #8
  40304e:	60e2      	str	r2, [r4, #12]
  403050:	604b      	str	r3, [r1, #4]
  403052:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  403056:	60fc      	str	r4, [r7, #12]
  403058:	4640      	mov	r0, r8
  40305a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40305e:	f000 bef3 	b.w	403e48 <__malloc_unlock>
  403062:	4770      	bx	lr
  403064:	0a5a      	lsrs	r2, r3, #9
  403066:	2a04      	cmp	r2, #4
  403068:	d852      	bhi.n	403110 <_free_r+0x13c>
  40306a:	099a      	lsrs	r2, r3, #6
  40306c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403070:	00ff      	lsls	r7, r7, #3
  403072:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403076:	19c8      	adds	r0, r1, r7
  403078:	59ca      	ldr	r2, [r1, r7]
  40307a:	3808      	subs	r0, #8
  40307c:	4290      	cmp	r0, r2
  40307e:	d04f      	beq.n	403120 <_free_r+0x14c>
  403080:	6851      	ldr	r1, [r2, #4]
  403082:	f021 0103 	bic.w	r1, r1, #3
  403086:	428b      	cmp	r3, r1
  403088:	d232      	bcs.n	4030f0 <_free_r+0x11c>
  40308a:	6892      	ldr	r2, [r2, #8]
  40308c:	4290      	cmp	r0, r2
  40308e:	d1f7      	bne.n	403080 <_free_r+0xac>
  403090:	68c3      	ldr	r3, [r0, #12]
  403092:	60a0      	str	r0, [r4, #8]
  403094:	60e3      	str	r3, [r4, #12]
  403096:	609c      	str	r4, [r3, #8]
  403098:	60c4      	str	r4, [r0, #12]
  40309a:	4640      	mov	r0, r8
  40309c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4030a0:	f000 bed2 	b.w	403e48 <__malloc_unlock>
  4030a4:	6895      	ldr	r5, [r2, #8]
  4030a6:	4f3b      	ldr	r7, [pc, #236]	; (403194 <_free_r+0x1c0>)
  4030a8:	42bd      	cmp	r5, r7
  4030aa:	4403      	add	r3, r0
  4030ac:	d040      	beq.n	403130 <_free_r+0x15c>
  4030ae:	68d0      	ldr	r0, [r2, #12]
  4030b0:	60e8      	str	r0, [r5, #12]
  4030b2:	f043 0201 	orr.w	r2, r3, #1
  4030b6:	6085      	str	r5, [r0, #8]
  4030b8:	6062      	str	r2, [r4, #4]
  4030ba:	50e3      	str	r3, [r4, r3]
  4030bc:	e7b7      	b.n	40302e <_free_r+0x5a>
  4030be:	07ff      	lsls	r7, r7, #31
  4030c0:	4403      	add	r3, r0
  4030c2:	d407      	bmi.n	4030d4 <_free_r+0x100>
  4030c4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4030c8:	1aa4      	subs	r4, r4, r2
  4030ca:	4413      	add	r3, r2
  4030cc:	68a0      	ldr	r0, [r4, #8]
  4030ce:	68e2      	ldr	r2, [r4, #12]
  4030d0:	60c2      	str	r2, [r0, #12]
  4030d2:	6090      	str	r0, [r2, #8]
  4030d4:	4a30      	ldr	r2, [pc, #192]	; (403198 <_free_r+0x1c4>)
  4030d6:	6812      	ldr	r2, [r2, #0]
  4030d8:	f043 0001 	orr.w	r0, r3, #1
  4030dc:	4293      	cmp	r3, r2
  4030de:	6060      	str	r0, [r4, #4]
  4030e0:	608c      	str	r4, [r1, #8]
  4030e2:	d3b9      	bcc.n	403058 <_free_r+0x84>
  4030e4:	4b2d      	ldr	r3, [pc, #180]	; (40319c <_free_r+0x1c8>)
  4030e6:	4640      	mov	r0, r8
  4030e8:	6819      	ldr	r1, [r3, #0]
  4030ea:	f7ff ff23 	bl	402f34 <_malloc_trim_r>
  4030ee:	e7b3      	b.n	403058 <_free_r+0x84>
  4030f0:	4610      	mov	r0, r2
  4030f2:	e7cd      	b.n	403090 <_free_r+0xbc>
  4030f4:	1811      	adds	r1, r2, r0
  4030f6:	6849      	ldr	r1, [r1, #4]
  4030f8:	07c9      	lsls	r1, r1, #31
  4030fa:	d444      	bmi.n	403186 <_free_r+0x1b2>
  4030fc:	6891      	ldr	r1, [r2, #8]
  4030fe:	68d2      	ldr	r2, [r2, #12]
  403100:	60ca      	str	r2, [r1, #12]
  403102:	4403      	add	r3, r0
  403104:	f043 0001 	orr.w	r0, r3, #1
  403108:	6091      	str	r1, [r2, #8]
  40310a:	6060      	str	r0, [r4, #4]
  40310c:	50e3      	str	r3, [r4, r3]
  40310e:	e7a3      	b.n	403058 <_free_r+0x84>
  403110:	2a14      	cmp	r2, #20
  403112:	d816      	bhi.n	403142 <_free_r+0x16e>
  403114:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403118:	00ff      	lsls	r7, r7, #3
  40311a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40311e:	e7aa      	b.n	403076 <_free_r+0xa2>
  403120:	10aa      	asrs	r2, r5, #2
  403122:	2301      	movs	r3, #1
  403124:	684d      	ldr	r5, [r1, #4]
  403126:	4093      	lsls	r3, r2
  403128:	432b      	orrs	r3, r5
  40312a:	604b      	str	r3, [r1, #4]
  40312c:	4603      	mov	r3, r0
  40312e:	e7b0      	b.n	403092 <_free_r+0xbe>
  403130:	f043 0201 	orr.w	r2, r3, #1
  403134:	614c      	str	r4, [r1, #20]
  403136:	610c      	str	r4, [r1, #16]
  403138:	60e5      	str	r5, [r4, #12]
  40313a:	60a5      	str	r5, [r4, #8]
  40313c:	6062      	str	r2, [r4, #4]
  40313e:	50e3      	str	r3, [r4, r3]
  403140:	e78a      	b.n	403058 <_free_r+0x84>
  403142:	2a54      	cmp	r2, #84	; 0x54
  403144:	d806      	bhi.n	403154 <_free_r+0x180>
  403146:	0b1a      	lsrs	r2, r3, #12
  403148:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40314c:	00ff      	lsls	r7, r7, #3
  40314e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  403152:	e790      	b.n	403076 <_free_r+0xa2>
  403154:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403158:	d806      	bhi.n	403168 <_free_r+0x194>
  40315a:	0bda      	lsrs	r2, r3, #15
  40315c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  403160:	00ff      	lsls	r7, r7, #3
  403162:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403166:	e786      	b.n	403076 <_free_r+0xa2>
  403168:	f240 5054 	movw	r0, #1364	; 0x554
  40316c:	4282      	cmp	r2, r0
  40316e:	d806      	bhi.n	40317e <_free_r+0x1aa>
  403170:	0c9a      	lsrs	r2, r3, #18
  403172:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403176:	00ff      	lsls	r7, r7, #3
  403178:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40317c:	e77b      	b.n	403076 <_free_r+0xa2>
  40317e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  403182:	257e      	movs	r5, #126	; 0x7e
  403184:	e777      	b.n	403076 <_free_r+0xa2>
  403186:	f043 0101 	orr.w	r1, r3, #1
  40318a:	6061      	str	r1, [r4, #4]
  40318c:	6013      	str	r3, [r2, #0]
  40318e:	e763      	b.n	403058 <_free_r+0x84>
  403190:	200005a8 	.word	0x200005a8
  403194:	200005b0 	.word	0x200005b0
  403198:	200009b4 	.word	0x200009b4
  40319c:	20000a80 	.word	0x20000a80

004031a0 <__sfvwrite_r>:
  4031a0:	6893      	ldr	r3, [r2, #8]
  4031a2:	2b00      	cmp	r3, #0
  4031a4:	d073      	beq.n	40328e <__sfvwrite_r+0xee>
  4031a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4031aa:	898b      	ldrh	r3, [r1, #12]
  4031ac:	b083      	sub	sp, #12
  4031ae:	460c      	mov	r4, r1
  4031b0:	0719      	lsls	r1, r3, #28
  4031b2:	9000      	str	r0, [sp, #0]
  4031b4:	4616      	mov	r6, r2
  4031b6:	d526      	bpl.n	403206 <__sfvwrite_r+0x66>
  4031b8:	6922      	ldr	r2, [r4, #16]
  4031ba:	b322      	cbz	r2, 403206 <__sfvwrite_r+0x66>
  4031bc:	f013 0002 	ands.w	r0, r3, #2
  4031c0:	6835      	ldr	r5, [r6, #0]
  4031c2:	d02c      	beq.n	40321e <__sfvwrite_r+0x7e>
  4031c4:	f04f 0900 	mov.w	r9, #0
  4031c8:	4fb0      	ldr	r7, [pc, #704]	; (40348c <__sfvwrite_r+0x2ec>)
  4031ca:	46c8      	mov	r8, r9
  4031cc:	46b2      	mov	sl, r6
  4031ce:	45b8      	cmp	r8, r7
  4031d0:	4643      	mov	r3, r8
  4031d2:	464a      	mov	r2, r9
  4031d4:	bf28      	it	cs
  4031d6:	463b      	movcs	r3, r7
  4031d8:	9800      	ldr	r0, [sp, #0]
  4031da:	f1b8 0f00 	cmp.w	r8, #0
  4031de:	d050      	beq.n	403282 <__sfvwrite_r+0xe2>
  4031e0:	69e1      	ldr	r1, [r4, #28]
  4031e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4031e4:	47b0      	blx	r6
  4031e6:	2800      	cmp	r0, #0
  4031e8:	dd58      	ble.n	40329c <__sfvwrite_r+0xfc>
  4031ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4031ee:	1a1b      	subs	r3, r3, r0
  4031f0:	4481      	add	r9, r0
  4031f2:	eba8 0800 	sub.w	r8, r8, r0
  4031f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4031fa:	2b00      	cmp	r3, #0
  4031fc:	d1e7      	bne.n	4031ce <__sfvwrite_r+0x2e>
  4031fe:	2000      	movs	r0, #0
  403200:	b003      	add	sp, #12
  403202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403206:	4621      	mov	r1, r4
  403208:	9800      	ldr	r0, [sp, #0]
  40320a:	f7ff fc51 	bl	402ab0 <__swsetup_r>
  40320e:	2800      	cmp	r0, #0
  403210:	f040 8133 	bne.w	40347a <__sfvwrite_r+0x2da>
  403214:	89a3      	ldrh	r3, [r4, #12]
  403216:	6835      	ldr	r5, [r6, #0]
  403218:	f013 0002 	ands.w	r0, r3, #2
  40321c:	d1d2      	bne.n	4031c4 <__sfvwrite_r+0x24>
  40321e:	f013 0901 	ands.w	r9, r3, #1
  403222:	d145      	bne.n	4032b0 <__sfvwrite_r+0x110>
  403224:	464f      	mov	r7, r9
  403226:	9601      	str	r6, [sp, #4]
  403228:	b337      	cbz	r7, 403278 <__sfvwrite_r+0xd8>
  40322a:	059a      	lsls	r2, r3, #22
  40322c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403230:	f140 8083 	bpl.w	40333a <__sfvwrite_r+0x19a>
  403234:	4547      	cmp	r7, r8
  403236:	46c3      	mov	fp, r8
  403238:	f0c0 80ab 	bcc.w	403392 <__sfvwrite_r+0x1f2>
  40323c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403240:	f040 80ac 	bne.w	40339c <__sfvwrite_r+0x1fc>
  403244:	6820      	ldr	r0, [r4, #0]
  403246:	46ba      	mov	sl, r7
  403248:	465a      	mov	r2, fp
  40324a:	4649      	mov	r1, r9
  40324c:	f000 fd92 	bl	403d74 <memmove>
  403250:	68a2      	ldr	r2, [r4, #8]
  403252:	6823      	ldr	r3, [r4, #0]
  403254:	eba2 0208 	sub.w	r2, r2, r8
  403258:	445b      	add	r3, fp
  40325a:	60a2      	str	r2, [r4, #8]
  40325c:	6023      	str	r3, [r4, #0]
  40325e:	9a01      	ldr	r2, [sp, #4]
  403260:	6893      	ldr	r3, [r2, #8]
  403262:	eba3 030a 	sub.w	r3, r3, sl
  403266:	44d1      	add	r9, sl
  403268:	eba7 070a 	sub.w	r7, r7, sl
  40326c:	6093      	str	r3, [r2, #8]
  40326e:	2b00      	cmp	r3, #0
  403270:	d0c5      	beq.n	4031fe <__sfvwrite_r+0x5e>
  403272:	89a3      	ldrh	r3, [r4, #12]
  403274:	2f00      	cmp	r7, #0
  403276:	d1d8      	bne.n	40322a <__sfvwrite_r+0x8a>
  403278:	f8d5 9000 	ldr.w	r9, [r5]
  40327c:	686f      	ldr	r7, [r5, #4]
  40327e:	3508      	adds	r5, #8
  403280:	e7d2      	b.n	403228 <__sfvwrite_r+0x88>
  403282:	f8d5 9000 	ldr.w	r9, [r5]
  403286:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40328a:	3508      	adds	r5, #8
  40328c:	e79f      	b.n	4031ce <__sfvwrite_r+0x2e>
  40328e:	2000      	movs	r0, #0
  403290:	4770      	bx	lr
  403292:	4621      	mov	r1, r4
  403294:	9800      	ldr	r0, [sp, #0]
  403296:	f7ff fd1f 	bl	402cd8 <_fflush_r>
  40329a:	b370      	cbz	r0, 4032fa <__sfvwrite_r+0x15a>
  40329c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4032a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4032a4:	f04f 30ff 	mov.w	r0, #4294967295
  4032a8:	81a3      	strh	r3, [r4, #12]
  4032aa:	b003      	add	sp, #12
  4032ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032b0:	4681      	mov	r9, r0
  4032b2:	4633      	mov	r3, r6
  4032b4:	464e      	mov	r6, r9
  4032b6:	46a8      	mov	r8, r5
  4032b8:	469a      	mov	sl, r3
  4032ba:	464d      	mov	r5, r9
  4032bc:	b34e      	cbz	r6, 403312 <__sfvwrite_r+0x172>
  4032be:	b380      	cbz	r0, 403322 <__sfvwrite_r+0x182>
  4032c0:	6820      	ldr	r0, [r4, #0]
  4032c2:	6923      	ldr	r3, [r4, #16]
  4032c4:	6962      	ldr	r2, [r4, #20]
  4032c6:	45b1      	cmp	r9, r6
  4032c8:	46cb      	mov	fp, r9
  4032ca:	bf28      	it	cs
  4032cc:	46b3      	movcs	fp, r6
  4032ce:	4298      	cmp	r0, r3
  4032d0:	465f      	mov	r7, fp
  4032d2:	d904      	bls.n	4032de <__sfvwrite_r+0x13e>
  4032d4:	68a3      	ldr	r3, [r4, #8]
  4032d6:	4413      	add	r3, r2
  4032d8:	459b      	cmp	fp, r3
  4032da:	f300 80a6 	bgt.w	40342a <__sfvwrite_r+0x28a>
  4032de:	4593      	cmp	fp, r2
  4032e0:	db4b      	blt.n	40337a <__sfvwrite_r+0x1da>
  4032e2:	4613      	mov	r3, r2
  4032e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4032e6:	69e1      	ldr	r1, [r4, #28]
  4032e8:	9800      	ldr	r0, [sp, #0]
  4032ea:	462a      	mov	r2, r5
  4032ec:	47b8      	blx	r7
  4032ee:	1e07      	subs	r7, r0, #0
  4032f0:	ddd4      	ble.n	40329c <__sfvwrite_r+0xfc>
  4032f2:	ebb9 0907 	subs.w	r9, r9, r7
  4032f6:	d0cc      	beq.n	403292 <__sfvwrite_r+0xf2>
  4032f8:	2001      	movs	r0, #1
  4032fa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4032fe:	1bdb      	subs	r3, r3, r7
  403300:	443d      	add	r5, r7
  403302:	1bf6      	subs	r6, r6, r7
  403304:	f8ca 3008 	str.w	r3, [sl, #8]
  403308:	2b00      	cmp	r3, #0
  40330a:	f43f af78 	beq.w	4031fe <__sfvwrite_r+0x5e>
  40330e:	2e00      	cmp	r6, #0
  403310:	d1d5      	bne.n	4032be <__sfvwrite_r+0x11e>
  403312:	f108 0308 	add.w	r3, r8, #8
  403316:	e913 0060 	ldmdb	r3, {r5, r6}
  40331a:	4698      	mov	r8, r3
  40331c:	3308      	adds	r3, #8
  40331e:	2e00      	cmp	r6, #0
  403320:	d0f9      	beq.n	403316 <__sfvwrite_r+0x176>
  403322:	4632      	mov	r2, r6
  403324:	210a      	movs	r1, #10
  403326:	4628      	mov	r0, r5
  403328:	f000 fc3a 	bl	403ba0 <memchr>
  40332c:	2800      	cmp	r0, #0
  40332e:	f000 80a1 	beq.w	403474 <__sfvwrite_r+0x2d4>
  403332:	3001      	adds	r0, #1
  403334:	eba0 0905 	sub.w	r9, r0, r5
  403338:	e7c2      	b.n	4032c0 <__sfvwrite_r+0x120>
  40333a:	6820      	ldr	r0, [r4, #0]
  40333c:	6923      	ldr	r3, [r4, #16]
  40333e:	4298      	cmp	r0, r3
  403340:	d802      	bhi.n	403348 <__sfvwrite_r+0x1a8>
  403342:	6963      	ldr	r3, [r4, #20]
  403344:	429f      	cmp	r7, r3
  403346:	d25d      	bcs.n	403404 <__sfvwrite_r+0x264>
  403348:	45b8      	cmp	r8, r7
  40334a:	bf28      	it	cs
  40334c:	46b8      	movcs	r8, r7
  40334e:	4642      	mov	r2, r8
  403350:	4649      	mov	r1, r9
  403352:	f000 fd0f 	bl	403d74 <memmove>
  403356:	68a3      	ldr	r3, [r4, #8]
  403358:	6822      	ldr	r2, [r4, #0]
  40335a:	eba3 0308 	sub.w	r3, r3, r8
  40335e:	4442      	add	r2, r8
  403360:	60a3      	str	r3, [r4, #8]
  403362:	6022      	str	r2, [r4, #0]
  403364:	b10b      	cbz	r3, 40336a <__sfvwrite_r+0x1ca>
  403366:	46c2      	mov	sl, r8
  403368:	e779      	b.n	40325e <__sfvwrite_r+0xbe>
  40336a:	4621      	mov	r1, r4
  40336c:	9800      	ldr	r0, [sp, #0]
  40336e:	f7ff fcb3 	bl	402cd8 <_fflush_r>
  403372:	2800      	cmp	r0, #0
  403374:	d192      	bne.n	40329c <__sfvwrite_r+0xfc>
  403376:	46c2      	mov	sl, r8
  403378:	e771      	b.n	40325e <__sfvwrite_r+0xbe>
  40337a:	465a      	mov	r2, fp
  40337c:	4629      	mov	r1, r5
  40337e:	f000 fcf9 	bl	403d74 <memmove>
  403382:	68a2      	ldr	r2, [r4, #8]
  403384:	6823      	ldr	r3, [r4, #0]
  403386:	eba2 020b 	sub.w	r2, r2, fp
  40338a:	445b      	add	r3, fp
  40338c:	60a2      	str	r2, [r4, #8]
  40338e:	6023      	str	r3, [r4, #0]
  403390:	e7af      	b.n	4032f2 <__sfvwrite_r+0x152>
  403392:	6820      	ldr	r0, [r4, #0]
  403394:	46b8      	mov	r8, r7
  403396:	46ba      	mov	sl, r7
  403398:	46bb      	mov	fp, r7
  40339a:	e755      	b.n	403248 <__sfvwrite_r+0xa8>
  40339c:	6962      	ldr	r2, [r4, #20]
  40339e:	6820      	ldr	r0, [r4, #0]
  4033a0:	6921      	ldr	r1, [r4, #16]
  4033a2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4033a6:	eba0 0a01 	sub.w	sl, r0, r1
  4033aa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4033ae:	f10a 0001 	add.w	r0, sl, #1
  4033b2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4033b6:	4438      	add	r0, r7
  4033b8:	4540      	cmp	r0, r8
  4033ba:	4642      	mov	r2, r8
  4033bc:	bf84      	itt	hi
  4033be:	4680      	movhi	r8, r0
  4033c0:	4642      	movhi	r2, r8
  4033c2:	055b      	lsls	r3, r3, #21
  4033c4:	d544      	bpl.n	403450 <__sfvwrite_r+0x2b0>
  4033c6:	4611      	mov	r1, r2
  4033c8:	9800      	ldr	r0, [sp, #0]
  4033ca:	f000 f921 	bl	403610 <_malloc_r>
  4033ce:	4683      	mov	fp, r0
  4033d0:	2800      	cmp	r0, #0
  4033d2:	d055      	beq.n	403480 <__sfvwrite_r+0x2e0>
  4033d4:	4652      	mov	r2, sl
  4033d6:	6921      	ldr	r1, [r4, #16]
  4033d8:	f000 fc32 	bl	403c40 <memcpy>
  4033dc:	89a3      	ldrh	r3, [r4, #12]
  4033de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4033e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4033e6:	81a3      	strh	r3, [r4, #12]
  4033e8:	eb0b 000a 	add.w	r0, fp, sl
  4033ec:	eba8 030a 	sub.w	r3, r8, sl
  4033f0:	f8c4 b010 	str.w	fp, [r4, #16]
  4033f4:	f8c4 8014 	str.w	r8, [r4, #20]
  4033f8:	6020      	str	r0, [r4, #0]
  4033fa:	60a3      	str	r3, [r4, #8]
  4033fc:	46b8      	mov	r8, r7
  4033fe:	46ba      	mov	sl, r7
  403400:	46bb      	mov	fp, r7
  403402:	e721      	b.n	403248 <__sfvwrite_r+0xa8>
  403404:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  403408:	42b9      	cmp	r1, r7
  40340a:	bf28      	it	cs
  40340c:	4639      	movcs	r1, r7
  40340e:	464a      	mov	r2, r9
  403410:	fb91 f1f3 	sdiv	r1, r1, r3
  403414:	9800      	ldr	r0, [sp, #0]
  403416:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403418:	fb03 f301 	mul.w	r3, r3, r1
  40341c:	69e1      	ldr	r1, [r4, #28]
  40341e:	47b0      	blx	r6
  403420:	f1b0 0a00 	subs.w	sl, r0, #0
  403424:	f73f af1b 	bgt.w	40325e <__sfvwrite_r+0xbe>
  403428:	e738      	b.n	40329c <__sfvwrite_r+0xfc>
  40342a:	461a      	mov	r2, r3
  40342c:	4629      	mov	r1, r5
  40342e:	9301      	str	r3, [sp, #4]
  403430:	f000 fca0 	bl	403d74 <memmove>
  403434:	6822      	ldr	r2, [r4, #0]
  403436:	9b01      	ldr	r3, [sp, #4]
  403438:	9800      	ldr	r0, [sp, #0]
  40343a:	441a      	add	r2, r3
  40343c:	6022      	str	r2, [r4, #0]
  40343e:	4621      	mov	r1, r4
  403440:	f7ff fc4a 	bl	402cd8 <_fflush_r>
  403444:	9b01      	ldr	r3, [sp, #4]
  403446:	2800      	cmp	r0, #0
  403448:	f47f af28 	bne.w	40329c <__sfvwrite_r+0xfc>
  40344c:	461f      	mov	r7, r3
  40344e:	e750      	b.n	4032f2 <__sfvwrite_r+0x152>
  403450:	9800      	ldr	r0, [sp, #0]
  403452:	f000 fcff 	bl	403e54 <_realloc_r>
  403456:	4683      	mov	fp, r0
  403458:	2800      	cmp	r0, #0
  40345a:	d1c5      	bne.n	4033e8 <__sfvwrite_r+0x248>
  40345c:	9d00      	ldr	r5, [sp, #0]
  40345e:	6921      	ldr	r1, [r4, #16]
  403460:	4628      	mov	r0, r5
  403462:	f7ff fdb7 	bl	402fd4 <_free_r>
  403466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40346a:	220c      	movs	r2, #12
  40346c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403470:	602a      	str	r2, [r5, #0]
  403472:	e715      	b.n	4032a0 <__sfvwrite_r+0x100>
  403474:	f106 0901 	add.w	r9, r6, #1
  403478:	e722      	b.n	4032c0 <__sfvwrite_r+0x120>
  40347a:	f04f 30ff 	mov.w	r0, #4294967295
  40347e:	e6bf      	b.n	403200 <__sfvwrite_r+0x60>
  403480:	9a00      	ldr	r2, [sp, #0]
  403482:	230c      	movs	r3, #12
  403484:	6013      	str	r3, [r2, #0]
  403486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40348a:	e709      	b.n	4032a0 <__sfvwrite_r+0x100>
  40348c:	7ffffc00 	.word	0x7ffffc00

00403490 <_fwalk_reent>:
  403490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403494:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403498:	d01f      	beq.n	4034da <_fwalk_reent+0x4a>
  40349a:	4688      	mov	r8, r1
  40349c:	4606      	mov	r6, r0
  40349e:	f04f 0900 	mov.w	r9, #0
  4034a2:	687d      	ldr	r5, [r7, #4]
  4034a4:	68bc      	ldr	r4, [r7, #8]
  4034a6:	3d01      	subs	r5, #1
  4034a8:	d411      	bmi.n	4034ce <_fwalk_reent+0x3e>
  4034aa:	89a3      	ldrh	r3, [r4, #12]
  4034ac:	2b01      	cmp	r3, #1
  4034ae:	f105 35ff 	add.w	r5, r5, #4294967295
  4034b2:	d908      	bls.n	4034c6 <_fwalk_reent+0x36>
  4034b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4034b8:	3301      	adds	r3, #1
  4034ba:	4621      	mov	r1, r4
  4034bc:	4630      	mov	r0, r6
  4034be:	d002      	beq.n	4034c6 <_fwalk_reent+0x36>
  4034c0:	47c0      	blx	r8
  4034c2:	ea49 0900 	orr.w	r9, r9, r0
  4034c6:	1c6b      	adds	r3, r5, #1
  4034c8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4034cc:	d1ed      	bne.n	4034aa <_fwalk_reent+0x1a>
  4034ce:	683f      	ldr	r7, [r7, #0]
  4034d0:	2f00      	cmp	r7, #0
  4034d2:	d1e6      	bne.n	4034a2 <_fwalk_reent+0x12>
  4034d4:	4648      	mov	r0, r9
  4034d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4034da:	46b9      	mov	r9, r7
  4034dc:	4648      	mov	r0, r9
  4034de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4034e2:	bf00      	nop

004034e4 <__locale_mb_cur_max>:
  4034e4:	4b04      	ldr	r3, [pc, #16]	; (4034f8 <__locale_mb_cur_max+0x14>)
  4034e6:	4a05      	ldr	r2, [pc, #20]	; (4034fc <__locale_mb_cur_max+0x18>)
  4034e8:	681b      	ldr	r3, [r3, #0]
  4034ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4034ec:	2b00      	cmp	r3, #0
  4034ee:	bf08      	it	eq
  4034f0:	4613      	moveq	r3, r2
  4034f2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4034f6:	4770      	bx	lr
  4034f8:	20000008 	.word	0x20000008
  4034fc:	2000043c 	.word	0x2000043c

00403500 <__retarget_lock_init_recursive>:
  403500:	4770      	bx	lr
  403502:	bf00      	nop

00403504 <__retarget_lock_close_recursive>:
  403504:	4770      	bx	lr
  403506:	bf00      	nop

00403508 <__retarget_lock_acquire_recursive>:
  403508:	4770      	bx	lr
  40350a:	bf00      	nop

0040350c <__retarget_lock_release_recursive>:
  40350c:	4770      	bx	lr
  40350e:	bf00      	nop

00403510 <__swhatbuf_r>:
  403510:	b570      	push	{r4, r5, r6, lr}
  403512:	460c      	mov	r4, r1
  403514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403518:	2900      	cmp	r1, #0
  40351a:	b090      	sub	sp, #64	; 0x40
  40351c:	4615      	mov	r5, r2
  40351e:	461e      	mov	r6, r3
  403520:	db14      	blt.n	40354c <__swhatbuf_r+0x3c>
  403522:	aa01      	add	r2, sp, #4
  403524:	f001 f80e 	bl	404544 <_fstat_r>
  403528:	2800      	cmp	r0, #0
  40352a:	db0f      	blt.n	40354c <__swhatbuf_r+0x3c>
  40352c:	9a02      	ldr	r2, [sp, #8]
  40352e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403532:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  403536:	fab2 f282 	clz	r2, r2
  40353a:	0952      	lsrs	r2, r2, #5
  40353c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403540:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403544:	6032      	str	r2, [r6, #0]
  403546:	602b      	str	r3, [r5, #0]
  403548:	b010      	add	sp, #64	; 0x40
  40354a:	bd70      	pop	{r4, r5, r6, pc}
  40354c:	89a2      	ldrh	r2, [r4, #12]
  40354e:	2300      	movs	r3, #0
  403550:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  403554:	6033      	str	r3, [r6, #0]
  403556:	d004      	beq.n	403562 <__swhatbuf_r+0x52>
  403558:	2240      	movs	r2, #64	; 0x40
  40355a:	4618      	mov	r0, r3
  40355c:	602a      	str	r2, [r5, #0]
  40355e:	b010      	add	sp, #64	; 0x40
  403560:	bd70      	pop	{r4, r5, r6, pc}
  403562:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403566:	602b      	str	r3, [r5, #0]
  403568:	b010      	add	sp, #64	; 0x40
  40356a:	bd70      	pop	{r4, r5, r6, pc}

0040356c <__smakebuf_r>:
  40356c:	898a      	ldrh	r2, [r1, #12]
  40356e:	0792      	lsls	r2, r2, #30
  403570:	460b      	mov	r3, r1
  403572:	d506      	bpl.n	403582 <__smakebuf_r+0x16>
  403574:	f101 0243 	add.w	r2, r1, #67	; 0x43
  403578:	2101      	movs	r1, #1
  40357a:	601a      	str	r2, [r3, #0]
  40357c:	611a      	str	r2, [r3, #16]
  40357e:	6159      	str	r1, [r3, #20]
  403580:	4770      	bx	lr
  403582:	b5f0      	push	{r4, r5, r6, r7, lr}
  403584:	b083      	sub	sp, #12
  403586:	ab01      	add	r3, sp, #4
  403588:	466a      	mov	r2, sp
  40358a:	460c      	mov	r4, r1
  40358c:	4606      	mov	r6, r0
  40358e:	f7ff ffbf 	bl	403510 <__swhatbuf_r>
  403592:	9900      	ldr	r1, [sp, #0]
  403594:	4605      	mov	r5, r0
  403596:	4630      	mov	r0, r6
  403598:	f000 f83a 	bl	403610 <_malloc_r>
  40359c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4035a0:	b1d8      	cbz	r0, 4035da <__smakebuf_r+0x6e>
  4035a2:	9a01      	ldr	r2, [sp, #4]
  4035a4:	4f15      	ldr	r7, [pc, #84]	; (4035fc <__smakebuf_r+0x90>)
  4035a6:	9900      	ldr	r1, [sp, #0]
  4035a8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4035aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4035ae:	81a3      	strh	r3, [r4, #12]
  4035b0:	6020      	str	r0, [r4, #0]
  4035b2:	6120      	str	r0, [r4, #16]
  4035b4:	6161      	str	r1, [r4, #20]
  4035b6:	b91a      	cbnz	r2, 4035c0 <__smakebuf_r+0x54>
  4035b8:	432b      	orrs	r3, r5
  4035ba:	81a3      	strh	r3, [r4, #12]
  4035bc:	b003      	add	sp, #12
  4035be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4035c0:	4630      	mov	r0, r6
  4035c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4035c6:	f000 ffd1 	bl	40456c <_isatty_r>
  4035ca:	b1a0      	cbz	r0, 4035f6 <__smakebuf_r+0x8a>
  4035cc:	89a3      	ldrh	r3, [r4, #12]
  4035ce:	f023 0303 	bic.w	r3, r3, #3
  4035d2:	f043 0301 	orr.w	r3, r3, #1
  4035d6:	b21b      	sxth	r3, r3
  4035d8:	e7ee      	b.n	4035b8 <__smakebuf_r+0x4c>
  4035da:	059a      	lsls	r2, r3, #22
  4035dc:	d4ee      	bmi.n	4035bc <__smakebuf_r+0x50>
  4035de:	f023 0303 	bic.w	r3, r3, #3
  4035e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4035e6:	f043 0302 	orr.w	r3, r3, #2
  4035ea:	2101      	movs	r1, #1
  4035ec:	81a3      	strh	r3, [r4, #12]
  4035ee:	6022      	str	r2, [r4, #0]
  4035f0:	6122      	str	r2, [r4, #16]
  4035f2:	6161      	str	r1, [r4, #20]
  4035f4:	e7e2      	b.n	4035bc <__smakebuf_r+0x50>
  4035f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4035fa:	e7dd      	b.n	4035b8 <__smakebuf_r+0x4c>
  4035fc:	00402d2d 	.word	0x00402d2d

00403600 <malloc>:
  403600:	4b02      	ldr	r3, [pc, #8]	; (40360c <malloc+0xc>)
  403602:	4601      	mov	r1, r0
  403604:	6818      	ldr	r0, [r3, #0]
  403606:	f000 b803 	b.w	403610 <_malloc_r>
  40360a:	bf00      	nop
  40360c:	20000008 	.word	0x20000008

00403610 <_malloc_r>:
  403610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403614:	f101 060b 	add.w	r6, r1, #11
  403618:	2e16      	cmp	r6, #22
  40361a:	b083      	sub	sp, #12
  40361c:	4605      	mov	r5, r0
  40361e:	f240 809e 	bls.w	40375e <_malloc_r+0x14e>
  403622:	f036 0607 	bics.w	r6, r6, #7
  403626:	f100 80bd 	bmi.w	4037a4 <_malloc_r+0x194>
  40362a:	42b1      	cmp	r1, r6
  40362c:	f200 80ba 	bhi.w	4037a4 <_malloc_r+0x194>
  403630:	f000 fc04 	bl	403e3c <__malloc_lock>
  403634:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403638:	f0c0 8293 	bcc.w	403b62 <_malloc_r+0x552>
  40363c:	0a73      	lsrs	r3, r6, #9
  40363e:	f000 80b8 	beq.w	4037b2 <_malloc_r+0x1a2>
  403642:	2b04      	cmp	r3, #4
  403644:	f200 8179 	bhi.w	40393a <_malloc_r+0x32a>
  403648:	09b3      	lsrs	r3, r6, #6
  40364a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40364e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403652:	00c3      	lsls	r3, r0, #3
  403654:	4fbf      	ldr	r7, [pc, #764]	; (403954 <_malloc_r+0x344>)
  403656:	443b      	add	r3, r7
  403658:	f1a3 0108 	sub.w	r1, r3, #8
  40365c:	685c      	ldr	r4, [r3, #4]
  40365e:	42a1      	cmp	r1, r4
  403660:	d106      	bne.n	403670 <_malloc_r+0x60>
  403662:	e00c      	b.n	40367e <_malloc_r+0x6e>
  403664:	2a00      	cmp	r2, #0
  403666:	f280 80aa 	bge.w	4037be <_malloc_r+0x1ae>
  40366a:	68e4      	ldr	r4, [r4, #12]
  40366c:	42a1      	cmp	r1, r4
  40366e:	d006      	beq.n	40367e <_malloc_r+0x6e>
  403670:	6863      	ldr	r3, [r4, #4]
  403672:	f023 0303 	bic.w	r3, r3, #3
  403676:	1b9a      	subs	r2, r3, r6
  403678:	2a0f      	cmp	r2, #15
  40367a:	ddf3      	ble.n	403664 <_malloc_r+0x54>
  40367c:	4670      	mov	r0, lr
  40367e:	693c      	ldr	r4, [r7, #16]
  403680:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403968 <_malloc_r+0x358>
  403684:	4574      	cmp	r4, lr
  403686:	f000 81ab 	beq.w	4039e0 <_malloc_r+0x3d0>
  40368a:	6863      	ldr	r3, [r4, #4]
  40368c:	f023 0303 	bic.w	r3, r3, #3
  403690:	1b9a      	subs	r2, r3, r6
  403692:	2a0f      	cmp	r2, #15
  403694:	f300 8190 	bgt.w	4039b8 <_malloc_r+0x3a8>
  403698:	2a00      	cmp	r2, #0
  40369a:	f8c7 e014 	str.w	lr, [r7, #20]
  40369e:	f8c7 e010 	str.w	lr, [r7, #16]
  4036a2:	f280 809d 	bge.w	4037e0 <_malloc_r+0x1d0>
  4036a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4036aa:	f080 8161 	bcs.w	403970 <_malloc_r+0x360>
  4036ae:	08db      	lsrs	r3, r3, #3
  4036b0:	f103 0c01 	add.w	ip, r3, #1
  4036b4:	1099      	asrs	r1, r3, #2
  4036b6:	687a      	ldr	r2, [r7, #4]
  4036b8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4036bc:	f8c4 8008 	str.w	r8, [r4, #8]
  4036c0:	2301      	movs	r3, #1
  4036c2:	408b      	lsls	r3, r1
  4036c4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4036c8:	4313      	orrs	r3, r2
  4036ca:	3908      	subs	r1, #8
  4036cc:	60e1      	str	r1, [r4, #12]
  4036ce:	607b      	str	r3, [r7, #4]
  4036d0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4036d4:	f8c8 400c 	str.w	r4, [r8, #12]
  4036d8:	1082      	asrs	r2, r0, #2
  4036da:	2401      	movs	r4, #1
  4036dc:	4094      	lsls	r4, r2
  4036de:	429c      	cmp	r4, r3
  4036e0:	f200 808b 	bhi.w	4037fa <_malloc_r+0x1ea>
  4036e4:	421c      	tst	r4, r3
  4036e6:	d106      	bne.n	4036f6 <_malloc_r+0xe6>
  4036e8:	f020 0003 	bic.w	r0, r0, #3
  4036ec:	0064      	lsls	r4, r4, #1
  4036ee:	421c      	tst	r4, r3
  4036f0:	f100 0004 	add.w	r0, r0, #4
  4036f4:	d0fa      	beq.n	4036ec <_malloc_r+0xdc>
  4036f6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4036fa:	46cc      	mov	ip, r9
  4036fc:	4680      	mov	r8, r0
  4036fe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403702:	459c      	cmp	ip, r3
  403704:	d107      	bne.n	403716 <_malloc_r+0x106>
  403706:	e16d      	b.n	4039e4 <_malloc_r+0x3d4>
  403708:	2a00      	cmp	r2, #0
  40370a:	f280 817b 	bge.w	403a04 <_malloc_r+0x3f4>
  40370e:	68db      	ldr	r3, [r3, #12]
  403710:	459c      	cmp	ip, r3
  403712:	f000 8167 	beq.w	4039e4 <_malloc_r+0x3d4>
  403716:	6859      	ldr	r1, [r3, #4]
  403718:	f021 0103 	bic.w	r1, r1, #3
  40371c:	1b8a      	subs	r2, r1, r6
  40371e:	2a0f      	cmp	r2, #15
  403720:	ddf2      	ble.n	403708 <_malloc_r+0xf8>
  403722:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403726:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40372a:	9300      	str	r3, [sp, #0]
  40372c:	199c      	adds	r4, r3, r6
  40372e:	4628      	mov	r0, r5
  403730:	f046 0601 	orr.w	r6, r6, #1
  403734:	f042 0501 	orr.w	r5, r2, #1
  403738:	605e      	str	r6, [r3, #4]
  40373a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40373e:	f8cc 8008 	str.w	r8, [ip, #8]
  403742:	617c      	str	r4, [r7, #20]
  403744:	613c      	str	r4, [r7, #16]
  403746:	f8c4 e00c 	str.w	lr, [r4, #12]
  40374a:	f8c4 e008 	str.w	lr, [r4, #8]
  40374e:	6065      	str	r5, [r4, #4]
  403750:	505a      	str	r2, [r3, r1]
  403752:	f000 fb79 	bl	403e48 <__malloc_unlock>
  403756:	9b00      	ldr	r3, [sp, #0]
  403758:	f103 0408 	add.w	r4, r3, #8
  40375c:	e01e      	b.n	40379c <_malloc_r+0x18c>
  40375e:	2910      	cmp	r1, #16
  403760:	d820      	bhi.n	4037a4 <_malloc_r+0x194>
  403762:	f000 fb6b 	bl	403e3c <__malloc_lock>
  403766:	2610      	movs	r6, #16
  403768:	2318      	movs	r3, #24
  40376a:	2002      	movs	r0, #2
  40376c:	4f79      	ldr	r7, [pc, #484]	; (403954 <_malloc_r+0x344>)
  40376e:	443b      	add	r3, r7
  403770:	f1a3 0208 	sub.w	r2, r3, #8
  403774:	685c      	ldr	r4, [r3, #4]
  403776:	4294      	cmp	r4, r2
  403778:	f000 813d 	beq.w	4039f6 <_malloc_r+0x3e6>
  40377c:	6863      	ldr	r3, [r4, #4]
  40377e:	68e1      	ldr	r1, [r4, #12]
  403780:	68a6      	ldr	r6, [r4, #8]
  403782:	f023 0303 	bic.w	r3, r3, #3
  403786:	4423      	add	r3, r4
  403788:	4628      	mov	r0, r5
  40378a:	685a      	ldr	r2, [r3, #4]
  40378c:	60f1      	str	r1, [r6, #12]
  40378e:	f042 0201 	orr.w	r2, r2, #1
  403792:	608e      	str	r6, [r1, #8]
  403794:	605a      	str	r2, [r3, #4]
  403796:	f000 fb57 	bl	403e48 <__malloc_unlock>
  40379a:	3408      	adds	r4, #8
  40379c:	4620      	mov	r0, r4
  40379e:	b003      	add	sp, #12
  4037a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037a4:	2400      	movs	r4, #0
  4037a6:	230c      	movs	r3, #12
  4037a8:	4620      	mov	r0, r4
  4037aa:	602b      	str	r3, [r5, #0]
  4037ac:	b003      	add	sp, #12
  4037ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037b2:	2040      	movs	r0, #64	; 0x40
  4037b4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4037b8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4037bc:	e74a      	b.n	403654 <_malloc_r+0x44>
  4037be:	4423      	add	r3, r4
  4037c0:	68e1      	ldr	r1, [r4, #12]
  4037c2:	685a      	ldr	r2, [r3, #4]
  4037c4:	68a6      	ldr	r6, [r4, #8]
  4037c6:	f042 0201 	orr.w	r2, r2, #1
  4037ca:	60f1      	str	r1, [r6, #12]
  4037cc:	4628      	mov	r0, r5
  4037ce:	608e      	str	r6, [r1, #8]
  4037d0:	605a      	str	r2, [r3, #4]
  4037d2:	f000 fb39 	bl	403e48 <__malloc_unlock>
  4037d6:	3408      	adds	r4, #8
  4037d8:	4620      	mov	r0, r4
  4037da:	b003      	add	sp, #12
  4037dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037e0:	4423      	add	r3, r4
  4037e2:	4628      	mov	r0, r5
  4037e4:	685a      	ldr	r2, [r3, #4]
  4037e6:	f042 0201 	orr.w	r2, r2, #1
  4037ea:	605a      	str	r2, [r3, #4]
  4037ec:	f000 fb2c 	bl	403e48 <__malloc_unlock>
  4037f0:	3408      	adds	r4, #8
  4037f2:	4620      	mov	r0, r4
  4037f4:	b003      	add	sp, #12
  4037f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037fa:	68bc      	ldr	r4, [r7, #8]
  4037fc:	6863      	ldr	r3, [r4, #4]
  4037fe:	f023 0803 	bic.w	r8, r3, #3
  403802:	45b0      	cmp	r8, r6
  403804:	d304      	bcc.n	403810 <_malloc_r+0x200>
  403806:	eba8 0306 	sub.w	r3, r8, r6
  40380a:	2b0f      	cmp	r3, #15
  40380c:	f300 8085 	bgt.w	40391a <_malloc_r+0x30a>
  403810:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40396c <_malloc_r+0x35c>
  403814:	4b50      	ldr	r3, [pc, #320]	; (403958 <_malloc_r+0x348>)
  403816:	f8d9 2000 	ldr.w	r2, [r9]
  40381a:	681b      	ldr	r3, [r3, #0]
  40381c:	3201      	adds	r2, #1
  40381e:	4433      	add	r3, r6
  403820:	eb04 0a08 	add.w	sl, r4, r8
  403824:	f000 8155 	beq.w	403ad2 <_malloc_r+0x4c2>
  403828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40382c:	330f      	adds	r3, #15
  40382e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403832:	f02b 0b0f 	bic.w	fp, fp, #15
  403836:	4659      	mov	r1, fp
  403838:	4628      	mov	r0, r5
  40383a:	f000 fcb1 	bl	4041a0 <_sbrk_r>
  40383e:	1c41      	adds	r1, r0, #1
  403840:	4602      	mov	r2, r0
  403842:	f000 80fc 	beq.w	403a3e <_malloc_r+0x42e>
  403846:	4582      	cmp	sl, r0
  403848:	f200 80f7 	bhi.w	403a3a <_malloc_r+0x42a>
  40384c:	4b43      	ldr	r3, [pc, #268]	; (40395c <_malloc_r+0x34c>)
  40384e:	6819      	ldr	r1, [r3, #0]
  403850:	4459      	add	r1, fp
  403852:	6019      	str	r1, [r3, #0]
  403854:	f000 814d 	beq.w	403af2 <_malloc_r+0x4e2>
  403858:	f8d9 0000 	ldr.w	r0, [r9]
  40385c:	3001      	adds	r0, #1
  40385e:	bf1b      	ittet	ne
  403860:	eba2 0a0a 	subne.w	sl, r2, sl
  403864:	4451      	addne	r1, sl
  403866:	f8c9 2000 	streq.w	r2, [r9]
  40386a:	6019      	strne	r1, [r3, #0]
  40386c:	f012 0107 	ands.w	r1, r2, #7
  403870:	f000 8115 	beq.w	403a9e <_malloc_r+0x48e>
  403874:	f1c1 0008 	rsb	r0, r1, #8
  403878:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40387c:	4402      	add	r2, r0
  40387e:	3108      	adds	r1, #8
  403880:	eb02 090b 	add.w	r9, r2, fp
  403884:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403888:	eba1 0909 	sub.w	r9, r1, r9
  40388c:	4649      	mov	r1, r9
  40388e:	4628      	mov	r0, r5
  403890:	9301      	str	r3, [sp, #4]
  403892:	9200      	str	r2, [sp, #0]
  403894:	f000 fc84 	bl	4041a0 <_sbrk_r>
  403898:	1c43      	adds	r3, r0, #1
  40389a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40389e:	f000 8143 	beq.w	403b28 <_malloc_r+0x518>
  4038a2:	1a80      	subs	r0, r0, r2
  4038a4:	4448      	add	r0, r9
  4038a6:	f040 0001 	orr.w	r0, r0, #1
  4038aa:	6819      	ldr	r1, [r3, #0]
  4038ac:	60ba      	str	r2, [r7, #8]
  4038ae:	4449      	add	r1, r9
  4038b0:	42bc      	cmp	r4, r7
  4038b2:	6050      	str	r0, [r2, #4]
  4038b4:	6019      	str	r1, [r3, #0]
  4038b6:	d017      	beq.n	4038e8 <_malloc_r+0x2d8>
  4038b8:	f1b8 0f0f 	cmp.w	r8, #15
  4038bc:	f240 80fb 	bls.w	403ab6 <_malloc_r+0x4a6>
  4038c0:	6860      	ldr	r0, [r4, #4]
  4038c2:	f1a8 020c 	sub.w	r2, r8, #12
  4038c6:	f022 0207 	bic.w	r2, r2, #7
  4038ca:	eb04 0e02 	add.w	lr, r4, r2
  4038ce:	f000 0001 	and.w	r0, r0, #1
  4038d2:	f04f 0c05 	mov.w	ip, #5
  4038d6:	4310      	orrs	r0, r2
  4038d8:	2a0f      	cmp	r2, #15
  4038da:	6060      	str	r0, [r4, #4]
  4038dc:	f8ce c004 	str.w	ip, [lr, #4]
  4038e0:	f8ce c008 	str.w	ip, [lr, #8]
  4038e4:	f200 8117 	bhi.w	403b16 <_malloc_r+0x506>
  4038e8:	4b1d      	ldr	r3, [pc, #116]	; (403960 <_malloc_r+0x350>)
  4038ea:	68bc      	ldr	r4, [r7, #8]
  4038ec:	681a      	ldr	r2, [r3, #0]
  4038ee:	4291      	cmp	r1, r2
  4038f0:	bf88      	it	hi
  4038f2:	6019      	strhi	r1, [r3, #0]
  4038f4:	4b1b      	ldr	r3, [pc, #108]	; (403964 <_malloc_r+0x354>)
  4038f6:	681a      	ldr	r2, [r3, #0]
  4038f8:	4291      	cmp	r1, r2
  4038fa:	6862      	ldr	r2, [r4, #4]
  4038fc:	bf88      	it	hi
  4038fe:	6019      	strhi	r1, [r3, #0]
  403900:	f022 0203 	bic.w	r2, r2, #3
  403904:	4296      	cmp	r6, r2
  403906:	eba2 0306 	sub.w	r3, r2, r6
  40390a:	d801      	bhi.n	403910 <_malloc_r+0x300>
  40390c:	2b0f      	cmp	r3, #15
  40390e:	dc04      	bgt.n	40391a <_malloc_r+0x30a>
  403910:	4628      	mov	r0, r5
  403912:	f000 fa99 	bl	403e48 <__malloc_unlock>
  403916:	2400      	movs	r4, #0
  403918:	e740      	b.n	40379c <_malloc_r+0x18c>
  40391a:	19a2      	adds	r2, r4, r6
  40391c:	f043 0301 	orr.w	r3, r3, #1
  403920:	f046 0601 	orr.w	r6, r6, #1
  403924:	6066      	str	r6, [r4, #4]
  403926:	4628      	mov	r0, r5
  403928:	60ba      	str	r2, [r7, #8]
  40392a:	6053      	str	r3, [r2, #4]
  40392c:	f000 fa8c 	bl	403e48 <__malloc_unlock>
  403930:	3408      	adds	r4, #8
  403932:	4620      	mov	r0, r4
  403934:	b003      	add	sp, #12
  403936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40393a:	2b14      	cmp	r3, #20
  40393c:	d971      	bls.n	403a22 <_malloc_r+0x412>
  40393e:	2b54      	cmp	r3, #84	; 0x54
  403940:	f200 80a3 	bhi.w	403a8a <_malloc_r+0x47a>
  403944:	0b33      	lsrs	r3, r6, #12
  403946:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40394a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40394e:	00c3      	lsls	r3, r0, #3
  403950:	e680      	b.n	403654 <_malloc_r+0x44>
  403952:	bf00      	nop
  403954:	200005a8 	.word	0x200005a8
  403958:	20000a80 	.word	0x20000a80
  40395c:	20000a50 	.word	0x20000a50
  403960:	20000a78 	.word	0x20000a78
  403964:	20000a7c 	.word	0x20000a7c
  403968:	200005b0 	.word	0x200005b0
  40396c:	200009b0 	.word	0x200009b0
  403970:	0a5a      	lsrs	r2, r3, #9
  403972:	2a04      	cmp	r2, #4
  403974:	d95b      	bls.n	403a2e <_malloc_r+0x41e>
  403976:	2a14      	cmp	r2, #20
  403978:	f200 80ae 	bhi.w	403ad8 <_malloc_r+0x4c8>
  40397c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403980:	00c9      	lsls	r1, r1, #3
  403982:	325b      	adds	r2, #91	; 0x5b
  403984:	eb07 0c01 	add.w	ip, r7, r1
  403988:	5879      	ldr	r1, [r7, r1]
  40398a:	f1ac 0c08 	sub.w	ip, ip, #8
  40398e:	458c      	cmp	ip, r1
  403990:	f000 8088 	beq.w	403aa4 <_malloc_r+0x494>
  403994:	684a      	ldr	r2, [r1, #4]
  403996:	f022 0203 	bic.w	r2, r2, #3
  40399a:	4293      	cmp	r3, r2
  40399c:	d273      	bcs.n	403a86 <_malloc_r+0x476>
  40399e:	6889      	ldr	r1, [r1, #8]
  4039a0:	458c      	cmp	ip, r1
  4039a2:	d1f7      	bne.n	403994 <_malloc_r+0x384>
  4039a4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4039a8:	687b      	ldr	r3, [r7, #4]
  4039aa:	60e2      	str	r2, [r4, #12]
  4039ac:	f8c4 c008 	str.w	ip, [r4, #8]
  4039b0:	6094      	str	r4, [r2, #8]
  4039b2:	f8cc 400c 	str.w	r4, [ip, #12]
  4039b6:	e68f      	b.n	4036d8 <_malloc_r+0xc8>
  4039b8:	19a1      	adds	r1, r4, r6
  4039ba:	f046 0c01 	orr.w	ip, r6, #1
  4039be:	f042 0601 	orr.w	r6, r2, #1
  4039c2:	f8c4 c004 	str.w	ip, [r4, #4]
  4039c6:	4628      	mov	r0, r5
  4039c8:	6179      	str	r1, [r7, #20]
  4039ca:	6139      	str	r1, [r7, #16]
  4039cc:	f8c1 e00c 	str.w	lr, [r1, #12]
  4039d0:	f8c1 e008 	str.w	lr, [r1, #8]
  4039d4:	604e      	str	r6, [r1, #4]
  4039d6:	50e2      	str	r2, [r4, r3]
  4039d8:	f000 fa36 	bl	403e48 <__malloc_unlock>
  4039dc:	3408      	adds	r4, #8
  4039de:	e6dd      	b.n	40379c <_malloc_r+0x18c>
  4039e0:	687b      	ldr	r3, [r7, #4]
  4039e2:	e679      	b.n	4036d8 <_malloc_r+0xc8>
  4039e4:	f108 0801 	add.w	r8, r8, #1
  4039e8:	f018 0f03 	tst.w	r8, #3
  4039ec:	f10c 0c08 	add.w	ip, ip, #8
  4039f0:	f47f ae85 	bne.w	4036fe <_malloc_r+0xee>
  4039f4:	e02d      	b.n	403a52 <_malloc_r+0x442>
  4039f6:	68dc      	ldr	r4, [r3, #12]
  4039f8:	42a3      	cmp	r3, r4
  4039fa:	bf08      	it	eq
  4039fc:	3002      	addeq	r0, #2
  4039fe:	f43f ae3e 	beq.w	40367e <_malloc_r+0x6e>
  403a02:	e6bb      	b.n	40377c <_malloc_r+0x16c>
  403a04:	4419      	add	r1, r3
  403a06:	461c      	mov	r4, r3
  403a08:	684a      	ldr	r2, [r1, #4]
  403a0a:	68db      	ldr	r3, [r3, #12]
  403a0c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403a10:	f042 0201 	orr.w	r2, r2, #1
  403a14:	604a      	str	r2, [r1, #4]
  403a16:	4628      	mov	r0, r5
  403a18:	60f3      	str	r3, [r6, #12]
  403a1a:	609e      	str	r6, [r3, #8]
  403a1c:	f000 fa14 	bl	403e48 <__malloc_unlock>
  403a20:	e6bc      	b.n	40379c <_malloc_r+0x18c>
  403a22:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403a26:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403a2a:	00c3      	lsls	r3, r0, #3
  403a2c:	e612      	b.n	403654 <_malloc_r+0x44>
  403a2e:	099a      	lsrs	r2, r3, #6
  403a30:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403a34:	00c9      	lsls	r1, r1, #3
  403a36:	3238      	adds	r2, #56	; 0x38
  403a38:	e7a4      	b.n	403984 <_malloc_r+0x374>
  403a3a:	42bc      	cmp	r4, r7
  403a3c:	d054      	beq.n	403ae8 <_malloc_r+0x4d8>
  403a3e:	68bc      	ldr	r4, [r7, #8]
  403a40:	6862      	ldr	r2, [r4, #4]
  403a42:	f022 0203 	bic.w	r2, r2, #3
  403a46:	e75d      	b.n	403904 <_malloc_r+0x2f4>
  403a48:	f859 3908 	ldr.w	r3, [r9], #-8
  403a4c:	4599      	cmp	r9, r3
  403a4e:	f040 8086 	bne.w	403b5e <_malloc_r+0x54e>
  403a52:	f010 0f03 	tst.w	r0, #3
  403a56:	f100 30ff 	add.w	r0, r0, #4294967295
  403a5a:	d1f5      	bne.n	403a48 <_malloc_r+0x438>
  403a5c:	687b      	ldr	r3, [r7, #4]
  403a5e:	ea23 0304 	bic.w	r3, r3, r4
  403a62:	607b      	str	r3, [r7, #4]
  403a64:	0064      	lsls	r4, r4, #1
  403a66:	429c      	cmp	r4, r3
  403a68:	f63f aec7 	bhi.w	4037fa <_malloc_r+0x1ea>
  403a6c:	2c00      	cmp	r4, #0
  403a6e:	f43f aec4 	beq.w	4037fa <_malloc_r+0x1ea>
  403a72:	421c      	tst	r4, r3
  403a74:	4640      	mov	r0, r8
  403a76:	f47f ae3e 	bne.w	4036f6 <_malloc_r+0xe6>
  403a7a:	0064      	lsls	r4, r4, #1
  403a7c:	421c      	tst	r4, r3
  403a7e:	f100 0004 	add.w	r0, r0, #4
  403a82:	d0fa      	beq.n	403a7a <_malloc_r+0x46a>
  403a84:	e637      	b.n	4036f6 <_malloc_r+0xe6>
  403a86:	468c      	mov	ip, r1
  403a88:	e78c      	b.n	4039a4 <_malloc_r+0x394>
  403a8a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403a8e:	d815      	bhi.n	403abc <_malloc_r+0x4ac>
  403a90:	0bf3      	lsrs	r3, r6, #15
  403a92:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403a96:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403a9a:	00c3      	lsls	r3, r0, #3
  403a9c:	e5da      	b.n	403654 <_malloc_r+0x44>
  403a9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403aa2:	e6ed      	b.n	403880 <_malloc_r+0x270>
  403aa4:	687b      	ldr	r3, [r7, #4]
  403aa6:	1092      	asrs	r2, r2, #2
  403aa8:	2101      	movs	r1, #1
  403aaa:	fa01 f202 	lsl.w	r2, r1, r2
  403aae:	4313      	orrs	r3, r2
  403ab0:	607b      	str	r3, [r7, #4]
  403ab2:	4662      	mov	r2, ip
  403ab4:	e779      	b.n	4039aa <_malloc_r+0x39a>
  403ab6:	2301      	movs	r3, #1
  403ab8:	6053      	str	r3, [r2, #4]
  403aba:	e729      	b.n	403910 <_malloc_r+0x300>
  403abc:	f240 5254 	movw	r2, #1364	; 0x554
  403ac0:	4293      	cmp	r3, r2
  403ac2:	d822      	bhi.n	403b0a <_malloc_r+0x4fa>
  403ac4:	0cb3      	lsrs	r3, r6, #18
  403ac6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403aca:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403ace:	00c3      	lsls	r3, r0, #3
  403ad0:	e5c0      	b.n	403654 <_malloc_r+0x44>
  403ad2:	f103 0b10 	add.w	fp, r3, #16
  403ad6:	e6ae      	b.n	403836 <_malloc_r+0x226>
  403ad8:	2a54      	cmp	r2, #84	; 0x54
  403ada:	d829      	bhi.n	403b30 <_malloc_r+0x520>
  403adc:	0b1a      	lsrs	r2, r3, #12
  403ade:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403ae2:	00c9      	lsls	r1, r1, #3
  403ae4:	326e      	adds	r2, #110	; 0x6e
  403ae6:	e74d      	b.n	403984 <_malloc_r+0x374>
  403ae8:	4b20      	ldr	r3, [pc, #128]	; (403b6c <_malloc_r+0x55c>)
  403aea:	6819      	ldr	r1, [r3, #0]
  403aec:	4459      	add	r1, fp
  403aee:	6019      	str	r1, [r3, #0]
  403af0:	e6b2      	b.n	403858 <_malloc_r+0x248>
  403af2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403af6:	2800      	cmp	r0, #0
  403af8:	f47f aeae 	bne.w	403858 <_malloc_r+0x248>
  403afc:	eb08 030b 	add.w	r3, r8, fp
  403b00:	68ba      	ldr	r2, [r7, #8]
  403b02:	f043 0301 	orr.w	r3, r3, #1
  403b06:	6053      	str	r3, [r2, #4]
  403b08:	e6ee      	b.n	4038e8 <_malloc_r+0x2d8>
  403b0a:	207f      	movs	r0, #127	; 0x7f
  403b0c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403b10:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403b14:	e59e      	b.n	403654 <_malloc_r+0x44>
  403b16:	f104 0108 	add.w	r1, r4, #8
  403b1a:	4628      	mov	r0, r5
  403b1c:	9300      	str	r3, [sp, #0]
  403b1e:	f7ff fa59 	bl	402fd4 <_free_r>
  403b22:	9b00      	ldr	r3, [sp, #0]
  403b24:	6819      	ldr	r1, [r3, #0]
  403b26:	e6df      	b.n	4038e8 <_malloc_r+0x2d8>
  403b28:	2001      	movs	r0, #1
  403b2a:	f04f 0900 	mov.w	r9, #0
  403b2e:	e6bc      	b.n	4038aa <_malloc_r+0x29a>
  403b30:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403b34:	d805      	bhi.n	403b42 <_malloc_r+0x532>
  403b36:	0bda      	lsrs	r2, r3, #15
  403b38:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403b3c:	00c9      	lsls	r1, r1, #3
  403b3e:	3277      	adds	r2, #119	; 0x77
  403b40:	e720      	b.n	403984 <_malloc_r+0x374>
  403b42:	f240 5154 	movw	r1, #1364	; 0x554
  403b46:	428a      	cmp	r2, r1
  403b48:	d805      	bhi.n	403b56 <_malloc_r+0x546>
  403b4a:	0c9a      	lsrs	r2, r3, #18
  403b4c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403b50:	00c9      	lsls	r1, r1, #3
  403b52:	327c      	adds	r2, #124	; 0x7c
  403b54:	e716      	b.n	403984 <_malloc_r+0x374>
  403b56:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403b5a:	227e      	movs	r2, #126	; 0x7e
  403b5c:	e712      	b.n	403984 <_malloc_r+0x374>
  403b5e:	687b      	ldr	r3, [r7, #4]
  403b60:	e780      	b.n	403a64 <_malloc_r+0x454>
  403b62:	08f0      	lsrs	r0, r6, #3
  403b64:	f106 0308 	add.w	r3, r6, #8
  403b68:	e600      	b.n	40376c <_malloc_r+0x15c>
  403b6a:	bf00      	nop
  403b6c:	20000a50 	.word	0x20000a50

00403b70 <__ascii_mbtowc>:
  403b70:	b082      	sub	sp, #8
  403b72:	b149      	cbz	r1, 403b88 <__ascii_mbtowc+0x18>
  403b74:	b15a      	cbz	r2, 403b8e <__ascii_mbtowc+0x1e>
  403b76:	b16b      	cbz	r3, 403b94 <__ascii_mbtowc+0x24>
  403b78:	7813      	ldrb	r3, [r2, #0]
  403b7a:	600b      	str	r3, [r1, #0]
  403b7c:	7812      	ldrb	r2, [r2, #0]
  403b7e:	1c10      	adds	r0, r2, #0
  403b80:	bf18      	it	ne
  403b82:	2001      	movne	r0, #1
  403b84:	b002      	add	sp, #8
  403b86:	4770      	bx	lr
  403b88:	a901      	add	r1, sp, #4
  403b8a:	2a00      	cmp	r2, #0
  403b8c:	d1f3      	bne.n	403b76 <__ascii_mbtowc+0x6>
  403b8e:	4610      	mov	r0, r2
  403b90:	b002      	add	sp, #8
  403b92:	4770      	bx	lr
  403b94:	f06f 0001 	mvn.w	r0, #1
  403b98:	e7f4      	b.n	403b84 <__ascii_mbtowc+0x14>
  403b9a:	bf00      	nop
  403b9c:	0000      	movs	r0, r0
	...

00403ba0 <memchr>:
  403ba0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403ba4:	2a10      	cmp	r2, #16
  403ba6:	db2b      	blt.n	403c00 <memchr+0x60>
  403ba8:	f010 0f07 	tst.w	r0, #7
  403bac:	d008      	beq.n	403bc0 <memchr+0x20>
  403bae:	f810 3b01 	ldrb.w	r3, [r0], #1
  403bb2:	3a01      	subs	r2, #1
  403bb4:	428b      	cmp	r3, r1
  403bb6:	d02d      	beq.n	403c14 <memchr+0x74>
  403bb8:	f010 0f07 	tst.w	r0, #7
  403bbc:	b342      	cbz	r2, 403c10 <memchr+0x70>
  403bbe:	d1f6      	bne.n	403bae <memchr+0xe>
  403bc0:	b4f0      	push	{r4, r5, r6, r7}
  403bc2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403bc6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403bca:	f022 0407 	bic.w	r4, r2, #7
  403bce:	f07f 0700 	mvns.w	r7, #0
  403bd2:	2300      	movs	r3, #0
  403bd4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403bd8:	3c08      	subs	r4, #8
  403bda:	ea85 0501 	eor.w	r5, r5, r1
  403bde:	ea86 0601 	eor.w	r6, r6, r1
  403be2:	fa85 f547 	uadd8	r5, r5, r7
  403be6:	faa3 f587 	sel	r5, r3, r7
  403bea:	fa86 f647 	uadd8	r6, r6, r7
  403bee:	faa5 f687 	sel	r6, r5, r7
  403bf2:	b98e      	cbnz	r6, 403c18 <memchr+0x78>
  403bf4:	d1ee      	bne.n	403bd4 <memchr+0x34>
  403bf6:	bcf0      	pop	{r4, r5, r6, r7}
  403bf8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403bfc:	f002 0207 	and.w	r2, r2, #7
  403c00:	b132      	cbz	r2, 403c10 <memchr+0x70>
  403c02:	f810 3b01 	ldrb.w	r3, [r0], #1
  403c06:	3a01      	subs	r2, #1
  403c08:	ea83 0301 	eor.w	r3, r3, r1
  403c0c:	b113      	cbz	r3, 403c14 <memchr+0x74>
  403c0e:	d1f8      	bne.n	403c02 <memchr+0x62>
  403c10:	2000      	movs	r0, #0
  403c12:	4770      	bx	lr
  403c14:	3801      	subs	r0, #1
  403c16:	4770      	bx	lr
  403c18:	2d00      	cmp	r5, #0
  403c1a:	bf06      	itte	eq
  403c1c:	4635      	moveq	r5, r6
  403c1e:	3803      	subeq	r0, #3
  403c20:	3807      	subne	r0, #7
  403c22:	f015 0f01 	tst.w	r5, #1
  403c26:	d107      	bne.n	403c38 <memchr+0x98>
  403c28:	3001      	adds	r0, #1
  403c2a:	f415 7f80 	tst.w	r5, #256	; 0x100
  403c2e:	bf02      	ittt	eq
  403c30:	3001      	addeq	r0, #1
  403c32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403c36:	3001      	addeq	r0, #1
  403c38:	bcf0      	pop	{r4, r5, r6, r7}
  403c3a:	3801      	subs	r0, #1
  403c3c:	4770      	bx	lr
  403c3e:	bf00      	nop

00403c40 <memcpy>:
  403c40:	4684      	mov	ip, r0
  403c42:	ea41 0300 	orr.w	r3, r1, r0
  403c46:	f013 0303 	ands.w	r3, r3, #3
  403c4a:	d16d      	bne.n	403d28 <memcpy+0xe8>
  403c4c:	3a40      	subs	r2, #64	; 0x40
  403c4e:	d341      	bcc.n	403cd4 <memcpy+0x94>
  403c50:	f851 3b04 	ldr.w	r3, [r1], #4
  403c54:	f840 3b04 	str.w	r3, [r0], #4
  403c58:	f851 3b04 	ldr.w	r3, [r1], #4
  403c5c:	f840 3b04 	str.w	r3, [r0], #4
  403c60:	f851 3b04 	ldr.w	r3, [r1], #4
  403c64:	f840 3b04 	str.w	r3, [r0], #4
  403c68:	f851 3b04 	ldr.w	r3, [r1], #4
  403c6c:	f840 3b04 	str.w	r3, [r0], #4
  403c70:	f851 3b04 	ldr.w	r3, [r1], #4
  403c74:	f840 3b04 	str.w	r3, [r0], #4
  403c78:	f851 3b04 	ldr.w	r3, [r1], #4
  403c7c:	f840 3b04 	str.w	r3, [r0], #4
  403c80:	f851 3b04 	ldr.w	r3, [r1], #4
  403c84:	f840 3b04 	str.w	r3, [r0], #4
  403c88:	f851 3b04 	ldr.w	r3, [r1], #4
  403c8c:	f840 3b04 	str.w	r3, [r0], #4
  403c90:	f851 3b04 	ldr.w	r3, [r1], #4
  403c94:	f840 3b04 	str.w	r3, [r0], #4
  403c98:	f851 3b04 	ldr.w	r3, [r1], #4
  403c9c:	f840 3b04 	str.w	r3, [r0], #4
  403ca0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ca4:	f840 3b04 	str.w	r3, [r0], #4
  403ca8:	f851 3b04 	ldr.w	r3, [r1], #4
  403cac:	f840 3b04 	str.w	r3, [r0], #4
  403cb0:	f851 3b04 	ldr.w	r3, [r1], #4
  403cb4:	f840 3b04 	str.w	r3, [r0], #4
  403cb8:	f851 3b04 	ldr.w	r3, [r1], #4
  403cbc:	f840 3b04 	str.w	r3, [r0], #4
  403cc0:	f851 3b04 	ldr.w	r3, [r1], #4
  403cc4:	f840 3b04 	str.w	r3, [r0], #4
  403cc8:	f851 3b04 	ldr.w	r3, [r1], #4
  403ccc:	f840 3b04 	str.w	r3, [r0], #4
  403cd0:	3a40      	subs	r2, #64	; 0x40
  403cd2:	d2bd      	bcs.n	403c50 <memcpy+0x10>
  403cd4:	3230      	adds	r2, #48	; 0x30
  403cd6:	d311      	bcc.n	403cfc <memcpy+0xbc>
  403cd8:	f851 3b04 	ldr.w	r3, [r1], #4
  403cdc:	f840 3b04 	str.w	r3, [r0], #4
  403ce0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ce4:	f840 3b04 	str.w	r3, [r0], #4
  403ce8:	f851 3b04 	ldr.w	r3, [r1], #4
  403cec:	f840 3b04 	str.w	r3, [r0], #4
  403cf0:	f851 3b04 	ldr.w	r3, [r1], #4
  403cf4:	f840 3b04 	str.w	r3, [r0], #4
  403cf8:	3a10      	subs	r2, #16
  403cfa:	d2ed      	bcs.n	403cd8 <memcpy+0x98>
  403cfc:	320c      	adds	r2, #12
  403cfe:	d305      	bcc.n	403d0c <memcpy+0xcc>
  403d00:	f851 3b04 	ldr.w	r3, [r1], #4
  403d04:	f840 3b04 	str.w	r3, [r0], #4
  403d08:	3a04      	subs	r2, #4
  403d0a:	d2f9      	bcs.n	403d00 <memcpy+0xc0>
  403d0c:	3204      	adds	r2, #4
  403d0e:	d008      	beq.n	403d22 <memcpy+0xe2>
  403d10:	07d2      	lsls	r2, r2, #31
  403d12:	bf1c      	itt	ne
  403d14:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403d18:	f800 3b01 	strbne.w	r3, [r0], #1
  403d1c:	d301      	bcc.n	403d22 <memcpy+0xe2>
  403d1e:	880b      	ldrh	r3, [r1, #0]
  403d20:	8003      	strh	r3, [r0, #0]
  403d22:	4660      	mov	r0, ip
  403d24:	4770      	bx	lr
  403d26:	bf00      	nop
  403d28:	2a08      	cmp	r2, #8
  403d2a:	d313      	bcc.n	403d54 <memcpy+0x114>
  403d2c:	078b      	lsls	r3, r1, #30
  403d2e:	d08d      	beq.n	403c4c <memcpy+0xc>
  403d30:	f010 0303 	ands.w	r3, r0, #3
  403d34:	d08a      	beq.n	403c4c <memcpy+0xc>
  403d36:	f1c3 0304 	rsb	r3, r3, #4
  403d3a:	1ad2      	subs	r2, r2, r3
  403d3c:	07db      	lsls	r3, r3, #31
  403d3e:	bf1c      	itt	ne
  403d40:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403d44:	f800 3b01 	strbne.w	r3, [r0], #1
  403d48:	d380      	bcc.n	403c4c <memcpy+0xc>
  403d4a:	f831 3b02 	ldrh.w	r3, [r1], #2
  403d4e:	f820 3b02 	strh.w	r3, [r0], #2
  403d52:	e77b      	b.n	403c4c <memcpy+0xc>
  403d54:	3a04      	subs	r2, #4
  403d56:	d3d9      	bcc.n	403d0c <memcpy+0xcc>
  403d58:	3a01      	subs	r2, #1
  403d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
  403d5e:	f800 3b01 	strb.w	r3, [r0], #1
  403d62:	d2f9      	bcs.n	403d58 <memcpy+0x118>
  403d64:	780b      	ldrb	r3, [r1, #0]
  403d66:	7003      	strb	r3, [r0, #0]
  403d68:	784b      	ldrb	r3, [r1, #1]
  403d6a:	7043      	strb	r3, [r0, #1]
  403d6c:	788b      	ldrb	r3, [r1, #2]
  403d6e:	7083      	strb	r3, [r0, #2]
  403d70:	4660      	mov	r0, ip
  403d72:	4770      	bx	lr

00403d74 <memmove>:
  403d74:	4288      	cmp	r0, r1
  403d76:	b5f0      	push	{r4, r5, r6, r7, lr}
  403d78:	d90d      	bls.n	403d96 <memmove+0x22>
  403d7a:	188b      	adds	r3, r1, r2
  403d7c:	4298      	cmp	r0, r3
  403d7e:	d20a      	bcs.n	403d96 <memmove+0x22>
  403d80:	1884      	adds	r4, r0, r2
  403d82:	2a00      	cmp	r2, #0
  403d84:	d051      	beq.n	403e2a <memmove+0xb6>
  403d86:	4622      	mov	r2, r4
  403d88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403d8c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403d90:	4299      	cmp	r1, r3
  403d92:	d1f9      	bne.n	403d88 <memmove+0x14>
  403d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403d96:	2a0f      	cmp	r2, #15
  403d98:	d948      	bls.n	403e2c <memmove+0xb8>
  403d9a:	ea41 0300 	orr.w	r3, r1, r0
  403d9e:	079b      	lsls	r3, r3, #30
  403da0:	d146      	bne.n	403e30 <memmove+0xbc>
  403da2:	f100 0410 	add.w	r4, r0, #16
  403da6:	f101 0310 	add.w	r3, r1, #16
  403daa:	4615      	mov	r5, r2
  403dac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403db0:	f844 6c10 	str.w	r6, [r4, #-16]
  403db4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403db8:	f844 6c0c 	str.w	r6, [r4, #-12]
  403dbc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403dc0:	f844 6c08 	str.w	r6, [r4, #-8]
  403dc4:	3d10      	subs	r5, #16
  403dc6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403dca:	f844 6c04 	str.w	r6, [r4, #-4]
  403dce:	2d0f      	cmp	r5, #15
  403dd0:	f103 0310 	add.w	r3, r3, #16
  403dd4:	f104 0410 	add.w	r4, r4, #16
  403dd8:	d8e8      	bhi.n	403dac <memmove+0x38>
  403dda:	f1a2 0310 	sub.w	r3, r2, #16
  403dde:	f023 030f 	bic.w	r3, r3, #15
  403de2:	f002 0e0f 	and.w	lr, r2, #15
  403de6:	3310      	adds	r3, #16
  403de8:	f1be 0f03 	cmp.w	lr, #3
  403dec:	4419      	add	r1, r3
  403dee:	4403      	add	r3, r0
  403df0:	d921      	bls.n	403e36 <memmove+0xc2>
  403df2:	1f1e      	subs	r6, r3, #4
  403df4:	460d      	mov	r5, r1
  403df6:	4674      	mov	r4, lr
  403df8:	3c04      	subs	r4, #4
  403dfa:	f855 7b04 	ldr.w	r7, [r5], #4
  403dfe:	f846 7f04 	str.w	r7, [r6, #4]!
  403e02:	2c03      	cmp	r4, #3
  403e04:	d8f8      	bhi.n	403df8 <memmove+0x84>
  403e06:	f1ae 0404 	sub.w	r4, lr, #4
  403e0a:	f024 0403 	bic.w	r4, r4, #3
  403e0e:	3404      	adds	r4, #4
  403e10:	4421      	add	r1, r4
  403e12:	4423      	add	r3, r4
  403e14:	f002 0203 	and.w	r2, r2, #3
  403e18:	b162      	cbz	r2, 403e34 <memmove+0xc0>
  403e1a:	3b01      	subs	r3, #1
  403e1c:	440a      	add	r2, r1
  403e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403e22:	f803 4f01 	strb.w	r4, [r3, #1]!
  403e26:	428a      	cmp	r2, r1
  403e28:	d1f9      	bne.n	403e1e <memmove+0xaa>
  403e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403e2c:	4603      	mov	r3, r0
  403e2e:	e7f3      	b.n	403e18 <memmove+0xa4>
  403e30:	4603      	mov	r3, r0
  403e32:	e7f2      	b.n	403e1a <memmove+0xa6>
  403e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403e36:	4672      	mov	r2, lr
  403e38:	e7ee      	b.n	403e18 <memmove+0xa4>
  403e3a:	bf00      	nop

00403e3c <__malloc_lock>:
  403e3c:	4801      	ldr	r0, [pc, #4]	; (403e44 <__malloc_lock+0x8>)
  403e3e:	f7ff bb63 	b.w	403508 <__retarget_lock_acquire_recursive>
  403e42:	bf00      	nop
  403e44:	20000ab4 	.word	0x20000ab4

00403e48 <__malloc_unlock>:
  403e48:	4801      	ldr	r0, [pc, #4]	; (403e50 <__malloc_unlock+0x8>)
  403e4a:	f7ff bb5f 	b.w	40350c <__retarget_lock_release_recursive>
  403e4e:	bf00      	nop
  403e50:	20000ab4 	.word	0x20000ab4

00403e54 <_realloc_r>:
  403e54:	2900      	cmp	r1, #0
  403e56:	f000 8095 	beq.w	403f84 <_realloc_r+0x130>
  403e5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e5e:	460d      	mov	r5, r1
  403e60:	4616      	mov	r6, r2
  403e62:	b083      	sub	sp, #12
  403e64:	4680      	mov	r8, r0
  403e66:	f106 070b 	add.w	r7, r6, #11
  403e6a:	f7ff ffe7 	bl	403e3c <__malloc_lock>
  403e6e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403e72:	2f16      	cmp	r7, #22
  403e74:	f02e 0403 	bic.w	r4, lr, #3
  403e78:	f1a5 0908 	sub.w	r9, r5, #8
  403e7c:	d83c      	bhi.n	403ef8 <_realloc_r+0xa4>
  403e7e:	2210      	movs	r2, #16
  403e80:	4617      	mov	r7, r2
  403e82:	42be      	cmp	r6, r7
  403e84:	d83d      	bhi.n	403f02 <_realloc_r+0xae>
  403e86:	4294      	cmp	r4, r2
  403e88:	da43      	bge.n	403f12 <_realloc_r+0xbe>
  403e8a:	4bc4      	ldr	r3, [pc, #784]	; (40419c <_realloc_r+0x348>)
  403e8c:	6899      	ldr	r1, [r3, #8]
  403e8e:	eb09 0004 	add.w	r0, r9, r4
  403e92:	4288      	cmp	r0, r1
  403e94:	f000 80b4 	beq.w	404000 <_realloc_r+0x1ac>
  403e98:	6843      	ldr	r3, [r0, #4]
  403e9a:	f023 0101 	bic.w	r1, r3, #1
  403e9e:	4401      	add	r1, r0
  403ea0:	6849      	ldr	r1, [r1, #4]
  403ea2:	07c9      	lsls	r1, r1, #31
  403ea4:	d54c      	bpl.n	403f40 <_realloc_r+0xec>
  403ea6:	f01e 0f01 	tst.w	lr, #1
  403eaa:	f000 809b 	beq.w	403fe4 <_realloc_r+0x190>
  403eae:	4631      	mov	r1, r6
  403eb0:	4640      	mov	r0, r8
  403eb2:	f7ff fbad 	bl	403610 <_malloc_r>
  403eb6:	4606      	mov	r6, r0
  403eb8:	2800      	cmp	r0, #0
  403eba:	d03a      	beq.n	403f32 <_realloc_r+0xde>
  403ebc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403ec0:	f023 0301 	bic.w	r3, r3, #1
  403ec4:	444b      	add	r3, r9
  403ec6:	f1a0 0208 	sub.w	r2, r0, #8
  403eca:	429a      	cmp	r2, r3
  403ecc:	f000 8121 	beq.w	404112 <_realloc_r+0x2be>
  403ed0:	1f22      	subs	r2, r4, #4
  403ed2:	2a24      	cmp	r2, #36	; 0x24
  403ed4:	f200 8107 	bhi.w	4040e6 <_realloc_r+0x292>
  403ed8:	2a13      	cmp	r2, #19
  403eda:	f200 80db 	bhi.w	404094 <_realloc_r+0x240>
  403ede:	4603      	mov	r3, r0
  403ee0:	462a      	mov	r2, r5
  403ee2:	6811      	ldr	r1, [r2, #0]
  403ee4:	6019      	str	r1, [r3, #0]
  403ee6:	6851      	ldr	r1, [r2, #4]
  403ee8:	6059      	str	r1, [r3, #4]
  403eea:	6892      	ldr	r2, [r2, #8]
  403eec:	609a      	str	r2, [r3, #8]
  403eee:	4629      	mov	r1, r5
  403ef0:	4640      	mov	r0, r8
  403ef2:	f7ff f86f 	bl	402fd4 <_free_r>
  403ef6:	e01c      	b.n	403f32 <_realloc_r+0xde>
  403ef8:	f027 0707 	bic.w	r7, r7, #7
  403efc:	2f00      	cmp	r7, #0
  403efe:	463a      	mov	r2, r7
  403f00:	dabf      	bge.n	403e82 <_realloc_r+0x2e>
  403f02:	2600      	movs	r6, #0
  403f04:	230c      	movs	r3, #12
  403f06:	4630      	mov	r0, r6
  403f08:	f8c8 3000 	str.w	r3, [r8]
  403f0c:	b003      	add	sp, #12
  403f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f12:	462e      	mov	r6, r5
  403f14:	1be3      	subs	r3, r4, r7
  403f16:	2b0f      	cmp	r3, #15
  403f18:	d81e      	bhi.n	403f58 <_realloc_r+0x104>
  403f1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403f1e:	f003 0301 	and.w	r3, r3, #1
  403f22:	4323      	orrs	r3, r4
  403f24:	444c      	add	r4, r9
  403f26:	f8c9 3004 	str.w	r3, [r9, #4]
  403f2a:	6863      	ldr	r3, [r4, #4]
  403f2c:	f043 0301 	orr.w	r3, r3, #1
  403f30:	6063      	str	r3, [r4, #4]
  403f32:	4640      	mov	r0, r8
  403f34:	f7ff ff88 	bl	403e48 <__malloc_unlock>
  403f38:	4630      	mov	r0, r6
  403f3a:	b003      	add	sp, #12
  403f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f40:	f023 0303 	bic.w	r3, r3, #3
  403f44:	18e1      	adds	r1, r4, r3
  403f46:	4291      	cmp	r1, r2
  403f48:	db1f      	blt.n	403f8a <_realloc_r+0x136>
  403f4a:	68c3      	ldr	r3, [r0, #12]
  403f4c:	6882      	ldr	r2, [r0, #8]
  403f4e:	462e      	mov	r6, r5
  403f50:	60d3      	str	r3, [r2, #12]
  403f52:	460c      	mov	r4, r1
  403f54:	609a      	str	r2, [r3, #8]
  403f56:	e7dd      	b.n	403f14 <_realloc_r+0xc0>
  403f58:	f8d9 2004 	ldr.w	r2, [r9, #4]
  403f5c:	eb09 0107 	add.w	r1, r9, r7
  403f60:	f002 0201 	and.w	r2, r2, #1
  403f64:	444c      	add	r4, r9
  403f66:	f043 0301 	orr.w	r3, r3, #1
  403f6a:	4317      	orrs	r7, r2
  403f6c:	f8c9 7004 	str.w	r7, [r9, #4]
  403f70:	604b      	str	r3, [r1, #4]
  403f72:	6863      	ldr	r3, [r4, #4]
  403f74:	f043 0301 	orr.w	r3, r3, #1
  403f78:	3108      	adds	r1, #8
  403f7a:	6063      	str	r3, [r4, #4]
  403f7c:	4640      	mov	r0, r8
  403f7e:	f7ff f829 	bl	402fd4 <_free_r>
  403f82:	e7d6      	b.n	403f32 <_realloc_r+0xde>
  403f84:	4611      	mov	r1, r2
  403f86:	f7ff bb43 	b.w	403610 <_malloc_r>
  403f8a:	f01e 0f01 	tst.w	lr, #1
  403f8e:	d18e      	bne.n	403eae <_realloc_r+0x5a>
  403f90:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403f94:	eba9 0a01 	sub.w	sl, r9, r1
  403f98:	f8da 1004 	ldr.w	r1, [sl, #4]
  403f9c:	f021 0103 	bic.w	r1, r1, #3
  403fa0:	440b      	add	r3, r1
  403fa2:	4423      	add	r3, r4
  403fa4:	4293      	cmp	r3, r2
  403fa6:	db25      	blt.n	403ff4 <_realloc_r+0x1a0>
  403fa8:	68c2      	ldr	r2, [r0, #12]
  403faa:	6881      	ldr	r1, [r0, #8]
  403fac:	4656      	mov	r6, sl
  403fae:	60ca      	str	r2, [r1, #12]
  403fb0:	6091      	str	r1, [r2, #8]
  403fb2:	f8da 100c 	ldr.w	r1, [sl, #12]
  403fb6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403fba:	1f22      	subs	r2, r4, #4
  403fbc:	2a24      	cmp	r2, #36	; 0x24
  403fbe:	60c1      	str	r1, [r0, #12]
  403fc0:	6088      	str	r0, [r1, #8]
  403fc2:	f200 8094 	bhi.w	4040ee <_realloc_r+0x29a>
  403fc6:	2a13      	cmp	r2, #19
  403fc8:	d96f      	bls.n	4040aa <_realloc_r+0x256>
  403fca:	6829      	ldr	r1, [r5, #0]
  403fcc:	f8ca 1008 	str.w	r1, [sl, #8]
  403fd0:	6869      	ldr	r1, [r5, #4]
  403fd2:	f8ca 100c 	str.w	r1, [sl, #12]
  403fd6:	2a1b      	cmp	r2, #27
  403fd8:	f200 80a2 	bhi.w	404120 <_realloc_r+0x2cc>
  403fdc:	3508      	adds	r5, #8
  403fde:	f10a 0210 	add.w	r2, sl, #16
  403fe2:	e063      	b.n	4040ac <_realloc_r+0x258>
  403fe4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403fe8:	eba9 0a03 	sub.w	sl, r9, r3
  403fec:	f8da 1004 	ldr.w	r1, [sl, #4]
  403ff0:	f021 0103 	bic.w	r1, r1, #3
  403ff4:	1863      	adds	r3, r4, r1
  403ff6:	4293      	cmp	r3, r2
  403ff8:	f6ff af59 	blt.w	403eae <_realloc_r+0x5a>
  403ffc:	4656      	mov	r6, sl
  403ffe:	e7d8      	b.n	403fb2 <_realloc_r+0x15e>
  404000:	6841      	ldr	r1, [r0, #4]
  404002:	f021 0b03 	bic.w	fp, r1, #3
  404006:	44a3      	add	fp, r4
  404008:	f107 0010 	add.w	r0, r7, #16
  40400c:	4583      	cmp	fp, r0
  40400e:	da56      	bge.n	4040be <_realloc_r+0x26a>
  404010:	f01e 0f01 	tst.w	lr, #1
  404014:	f47f af4b 	bne.w	403eae <_realloc_r+0x5a>
  404018:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40401c:	eba9 0a01 	sub.w	sl, r9, r1
  404020:	f8da 1004 	ldr.w	r1, [sl, #4]
  404024:	f021 0103 	bic.w	r1, r1, #3
  404028:	448b      	add	fp, r1
  40402a:	4558      	cmp	r0, fp
  40402c:	dce2      	bgt.n	403ff4 <_realloc_r+0x1a0>
  40402e:	4656      	mov	r6, sl
  404030:	f8da 100c 	ldr.w	r1, [sl, #12]
  404034:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404038:	1f22      	subs	r2, r4, #4
  40403a:	2a24      	cmp	r2, #36	; 0x24
  40403c:	60c1      	str	r1, [r0, #12]
  40403e:	6088      	str	r0, [r1, #8]
  404040:	f200 808f 	bhi.w	404162 <_realloc_r+0x30e>
  404044:	2a13      	cmp	r2, #19
  404046:	f240 808a 	bls.w	40415e <_realloc_r+0x30a>
  40404a:	6829      	ldr	r1, [r5, #0]
  40404c:	f8ca 1008 	str.w	r1, [sl, #8]
  404050:	6869      	ldr	r1, [r5, #4]
  404052:	f8ca 100c 	str.w	r1, [sl, #12]
  404056:	2a1b      	cmp	r2, #27
  404058:	f200 808a 	bhi.w	404170 <_realloc_r+0x31c>
  40405c:	3508      	adds	r5, #8
  40405e:	f10a 0210 	add.w	r2, sl, #16
  404062:	6829      	ldr	r1, [r5, #0]
  404064:	6011      	str	r1, [r2, #0]
  404066:	6869      	ldr	r1, [r5, #4]
  404068:	6051      	str	r1, [r2, #4]
  40406a:	68a9      	ldr	r1, [r5, #8]
  40406c:	6091      	str	r1, [r2, #8]
  40406e:	eb0a 0107 	add.w	r1, sl, r7
  404072:	ebab 0207 	sub.w	r2, fp, r7
  404076:	f042 0201 	orr.w	r2, r2, #1
  40407a:	6099      	str	r1, [r3, #8]
  40407c:	604a      	str	r2, [r1, #4]
  40407e:	f8da 3004 	ldr.w	r3, [sl, #4]
  404082:	f003 0301 	and.w	r3, r3, #1
  404086:	431f      	orrs	r7, r3
  404088:	4640      	mov	r0, r8
  40408a:	f8ca 7004 	str.w	r7, [sl, #4]
  40408e:	f7ff fedb 	bl	403e48 <__malloc_unlock>
  404092:	e751      	b.n	403f38 <_realloc_r+0xe4>
  404094:	682b      	ldr	r3, [r5, #0]
  404096:	6003      	str	r3, [r0, #0]
  404098:	686b      	ldr	r3, [r5, #4]
  40409a:	6043      	str	r3, [r0, #4]
  40409c:	2a1b      	cmp	r2, #27
  40409e:	d82d      	bhi.n	4040fc <_realloc_r+0x2a8>
  4040a0:	f100 0308 	add.w	r3, r0, #8
  4040a4:	f105 0208 	add.w	r2, r5, #8
  4040a8:	e71b      	b.n	403ee2 <_realloc_r+0x8e>
  4040aa:	4632      	mov	r2, r6
  4040ac:	6829      	ldr	r1, [r5, #0]
  4040ae:	6011      	str	r1, [r2, #0]
  4040b0:	6869      	ldr	r1, [r5, #4]
  4040b2:	6051      	str	r1, [r2, #4]
  4040b4:	68a9      	ldr	r1, [r5, #8]
  4040b6:	6091      	str	r1, [r2, #8]
  4040b8:	461c      	mov	r4, r3
  4040ba:	46d1      	mov	r9, sl
  4040bc:	e72a      	b.n	403f14 <_realloc_r+0xc0>
  4040be:	eb09 0107 	add.w	r1, r9, r7
  4040c2:	ebab 0b07 	sub.w	fp, fp, r7
  4040c6:	f04b 0201 	orr.w	r2, fp, #1
  4040ca:	6099      	str	r1, [r3, #8]
  4040cc:	604a      	str	r2, [r1, #4]
  4040ce:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4040d2:	f003 0301 	and.w	r3, r3, #1
  4040d6:	431f      	orrs	r7, r3
  4040d8:	4640      	mov	r0, r8
  4040da:	f845 7c04 	str.w	r7, [r5, #-4]
  4040de:	f7ff feb3 	bl	403e48 <__malloc_unlock>
  4040e2:	462e      	mov	r6, r5
  4040e4:	e728      	b.n	403f38 <_realloc_r+0xe4>
  4040e6:	4629      	mov	r1, r5
  4040e8:	f7ff fe44 	bl	403d74 <memmove>
  4040ec:	e6ff      	b.n	403eee <_realloc_r+0x9a>
  4040ee:	4629      	mov	r1, r5
  4040f0:	4630      	mov	r0, r6
  4040f2:	461c      	mov	r4, r3
  4040f4:	46d1      	mov	r9, sl
  4040f6:	f7ff fe3d 	bl	403d74 <memmove>
  4040fa:	e70b      	b.n	403f14 <_realloc_r+0xc0>
  4040fc:	68ab      	ldr	r3, [r5, #8]
  4040fe:	6083      	str	r3, [r0, #8]
  404100:	68eb      	ldr	r3, [r5, #12]
  404102:	60c3      	str	r3, [r0, #12]
  404104:	2a24      	cmp	r2, #36	; 0x24
  404106:	d017      	beq.n	404138 <_realloc_r+0x2e4>
  404108:	f100 0310 	add.w	r3, r0, #16
  40410c:	f105 0210 	add.w	r2, r5, #16
  404110:	e6e7      	b.n	403ee2 <_realloc_r+0x8e>
  404112:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404116:	f023 0303 	bic.w	r3, r3, #3
  40411a:	441c      	add	r4, r3
  40411c:	462e      	mov	r6, r5
  40411e:	e6f9      	b.n	403f14 <_realloc_r+0xc0>
  404120:	68a9      	ldr	r1, [r5, #8]
  404122:	f8ca 1010 	str.w	r1, [sl, #16]
  404126:	68e9      	ldr	r1, [r5, #12]
  404128:	f8ca 1014 	str.w	r1, [sl, #20]
  40412c:	2a24      	cmp	r2, #36	; 0x24
  40412e:	d00c      	beq.n	40414a <_realloc_r+0x2f6>
  404130:	3510      	adds	r5, #16
  404132:	f10a 0218 	add.w	r2, sl, #24
  404136:	e7b9      	b.n	4040ac <_realloc_r+0x258>
  404138:	692b      	ldr	r3, [r5, #16]
  40413a:	6103      	str	r3, [r0, #16]
  40413c:	696b      	ldr	r3, [r5, #20]
  40413e:	6143      	str	r3, [r0, #20]
  404140:	f105 0218 	add.w	r2, r5, #24
  404144:	f100 0318 	add.w	r3, r0, #24
  404148:	e6cb      	b.n	403ee2 <_realloc_r+0x8e>
  40414a:	692a      	ldr	r2, [r5, #16]
  40414c:	f8ca 2018 	str.w	r2, [sl, #24]
  404150:	696a      	ldr	r2, [r5, #20]
  404152:	f8ca 201c 	str.w	r2, [sl, #28]
  404156:	3518      	adds	r5, #24
  404158:	f10a 0220 	add.w	r2, sl, #32
  40415c:	e7a6      	b.n	4040ac <_realloc_r+0x258>
  40415e:	4632      	mov	r2, r6
  404160:	e77f      	b.n	404062 <_realloc_r+0x20e>
  404162:	4629      	mov	r1, r5
  404164:	4630      	mov	r0, r6
  404166:	9301      	str	r3, [sp, #4]
  404168:	f7ff fe04 	bl	403d74 <memmove>
  40416c:	9b01      	ldr	r3, [sp, #4]
  40416e:	e77e      	b.n	40406e <_realloc_r+0x21a>
  404170:	68a9      	ldr	r1, [r5, #8]
  404172:	f8ca 1010 	str.w	r1, [sl, #16]
  404176:	68e9      	ldr	r1, [r5, #12]
  404178:	f8ca 1014 	str.w	r1, [sl, #20]
  40417c:	2a24      	cmp	r2, #36	; 0x24
  40417e:	d003      	beq.n	404188 <_realloc_r+0x334>
  404180:	3510      	adds	r5, #16
  404182:	f10a 0218 	add.w	r2, sl, #24
  404186:	e76c      	b.n	404062 <_realloc_r+0x20e>
  404188:	692a      	ldr	r2, [r5, #16]
  40418a:	f8ca 2018 	str.w	r2, [sl, #24]
  40418e:	696a      	ldr	r2, [r5, #20]
  404190:	f8ca 201c 	str.w	r2, [sl, #28]
  404194:	3518      	adds	r5, #24
  404196:	f10a 0220 	add.w	r2, sl, #32
  40419a:	e762      	b.n	404062 <_realloc_r+0x20e>
  40419c:	200005a8 	.word	0x200005a8

004041a0 <_sbrk_r>:
  4041a0:	b538      	push	{r3, r4, r5, lr}
  4041a2:	4c07      	ldr	r4, [pc, #28]	; (4041c0 <_sbrk_r+0x20>)
  4041a4:	2300      	movs	r3, #0
  4041a6:	4605      	mov	r5, r0
  4041a8:	4608      	mov	r0, r1
  4041aa:	6023      	str	r3, [r4, #0]
  4041ac:	f7fd fb70 	bl	401890 <_sbrk>
  4041b0:	1c43      	adds	r3, r0, #1
  4041b2:	d000      	beq.n	4041b6 <_sbrk_r+0x16>
  4041b4:	bd38      	pop	{r3, r4, r5, pc}
  4041b6:	6823      	ldr	r3, [r4, #0]
  4041b8:	2b00      	cmp	r3, #0
  4041ba:	d0fb      	beq.n	4041b4 <_sbrk_r+0x14>
  4041bc:	602b      	str	r3, [r5, #0]
  4041be:	bd38      	pop	{r3, r4, r5, pc}
  4041c0:	20000ac8 	.word	0x20000ac8

004041c4 <__sread>:
  4041c4:	b510      	push	{r4, lr}
  4041c6:	460c      	mov	r4, r1
  4041c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4041cc:	f000 f9f6 	bl	4045bc <_read_r>
  4041d0:	2800      	cmp	r0, #0
  4041d2:	db03      	blt.n	4041dc <__sread+0x18>
  4041d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4041d6:	4403      	add	r3, r0
  4041d8:	6523      	str	r3, [r4, #80]	; 0x50
  4041da:	bd10      	pop	{r4, pc}
  4041dc:	89a3      	ldrh	r3, [r4, #12]
  4041de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4041e2:	81a3      	strh	r3, [r4, #12]
  4041e4:	bd10      	pop	{r4, pc}
  4041e6:	bf00      	nop

004041e8 <__swrite>:
  4041e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4041ec:	4616      	mov	r6, r2
  4041ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4041f2:	461f      	mov	r7, r3
  4041f4:	05d3      	lsls	r3, r2, #23
  4041f6:	460c      	mov	r4, r1
  4041f8:	4605      	mov	r5, r0
  4041fa:	d507      	bpl.n	40420c <__swrite+0x24>
  4041fc:	2200      	movs	r2, #0
  4041fe:	2302      	movs	r3, #2
  404200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404204:	f000 f9c4 	bl	404590 <_lseek_r>
  404208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40420c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404210:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404214:	81a2      	strh	r2, [r4, #12]
  404216:	463b      	mov	r3, r7
  404218:	4632      	mov	r2, r6
  40421a:	4628      	mov	r0, r5
  40421c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404220:	f000 b8a4 	b.w	40436c <_write_r>

00404224 <__sseek>:
  404224:	b510      	push	{r4, lr}
  404226:	460c      	mov	r4, r1
  404228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40422c:	f000 f9b0 	bl	404590 <_lseek_r>
  404230:	89a3      	ldrh	r3, [r4, #12]
  404232:	1c42      	adds	r2, r0, #1
  404234:	bf0e      	itee	eq
  404236:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40423a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40423e:	6520      	strne	r0, [r4, #80]	; 0x50
  404240:	81a3      	strh	r3, [r4, #12]
  404242:	bd10      	pop	{r4, pc}

00404244 <__sclose>:
  404244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404248:	f000 b908 	b.w	40445c <_close_r>

0040424c <__swbuf_r>:
  40424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40424e:	460d      	mov	r5, r1
  404250:	4614      	mov	r4, r2
  404252:	4606      	mov	r6, r0
  404254:	b110      	cbz	r0, 40425c <__swbuf_r+0x10>
  404256:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404258:	2b00      	cmp	r3, #0
  40425a:	d04b      	beq.n	4042f4 <__swbuf_r+0xa8>
  40425c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404260:	69a3      	ldr	r3, [r4, #24]
  404262:	60a3      	str	r3, [r4, #8]
  404264:	b291      	uxth	r1, r2
  404266:	0708      	lsls	r0, r1, #28
  404268:	d539      	bpl.n	4042de <__swbuf_r+0x92>
  40426a:	6923      	ldr	r3, [r4, #16]
  40426c:	2b00      	cmp	r3, #0
  40426e:	d036      	beq.n	4042de <__swbuf_r+0x92>
  404270:	b2ed      	uxtb	r5, r5
  404272:	0489      	lsls	r1, r1, #18
  404274:	462f      	mov	r7, r5
  404276:	d515      	bpl.n	4042a4 <__swbuf_r+0x58>
  404278:	6822      	ldr	r2, [r4, #0]
  40427a:	6961      	ldr	r1, [r4, #20]
  40427c:	1ad3      	subs	r3, r2, r3
  40427e:	428b      	cmp	r3, r1
  404280:	da1c      	bge.n	4042bc <__swbuf_r+0x70>
  404282:	3301      	adds	r3, #1
  404284:	68a1      	ldr	r1, [r4, #8]
  404286:	1c50      	adds	r0, r2, #1
  404288:	3901      	subs	r1, #1
  40428a:	60a1      	str	r1, [r4, #8]
  40428c:	6020      	str	r0, [r4, #0]
  40428e:	7015      	strb	r5, [r2, #0]
  404290:	6962      	ldr	r2, [r4, #20]
  404292:	429a      	cmp	r2, r3
  404294:	d01a      	beq.n	4042cc <__swbuf_r+0x80>
  404296:	89a3      	ldrh	r3, [r4, #12]
  404298:	07db      	lsls	r3, r3, #31
  40429a:	d501      	bpl.n	4042a0 <__swbuf_r+0x54>
  40429c:	2d0a      	cmp	r5, #10
  40429e:	d015      	beq.n	4042cc <__swbuf_r+0x80>
  4042a0:	4638      	mov	r0, r7
  4042a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042a4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4042a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4042aa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4042ae:	81a2      	strh	r2, [r4, #12]
  4042b0:	6822      	ldr	r2, [r4, #0]
  4042b2:	6661      	str	r1, [r4, #100]	; 0x64
  4042b4:	6961      	ldr	r1, [r4, #20]
  4042b6:	1ad3      	subs	r3, r2, r3
  4042b8:	428b      	cmp	r3, r1
  4042ba:	dbe2      	blt.n	404282 <__swbuf_r+0x36>
  4042bc:	4621      	mov	r1, r4
  4042be:	4630      	mov	r0, r6
  4042c0:	f7fe fd0a 	bl	402cd8 <_fflush_r>
  4042c4:	b940      	cbnz	r0, 4042d8 <__swbuf_r+0x8c>
  4042c6:	6822      	ldr	r2, [r4, #0]
  4042c8:	2301      	movs	r3, #1
  4042ca:	e7db      	b.n	404284 <__swbuf_r+0x38>
  4042cc:	4621      	mov	r1, r4
  4042ce:	4630      	mov	r0, r6
  4042d0:	f7fe fd02 	bl	402cd8 <_fflush_r>
  4042d4:	2800      	cmp	r0, #0
  4042d6:	d0e3      	beq.n	4042a0 <__swbuf_r+0x54>
  4042d8:	f04f 37ff 	mov.w	r7, #4294967295
  4042dc:	e7e0      	b.n	4042a0 <__swbuf_r+0x54>
  4042de:	4621      	mov	r1, r4
  4042e0:	4630      	mov	r0, r6
  4042e2:	f7fe fbe5 	bl	402ab0 <__swsetup_r>
  4042e6:	2800      	cmp	r0, #0
  4042e8:	d1f6      	bne.n	4042d8 <__swbuf_r+0x8c>
  4042ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4042ee:	6923      	ldr	r3, [r4, #16]
  4042f0:	b291      	uxth	r1, r2
  4042f2:	e7bd      	b.n	404270 <__swbuf_r+0x24>
  4042f4:	f7fe fd48 	bl	402d88 <__sinit>
  4042f8:	e7b0      	b.n	40425c <__swbuf_r+0x10>
  4042fa:	bf00      	nop

004042fc <_wcrtomb_r>:
  4042fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4042fe:	4606      	mov	r6, r0
  404300:	b085      	sub	sp, #20
  404302:	461f      	mov	r7, r3
  404304:	b189      	cbz	r1, 40432a <_wcrtomb_r+0x2e>
  404306:	4c10      	ldr	r4, [pc, #64]	; (404348 <_wcrtomb_r+0x4c>)
  404308:	4d10      	ldr	r5, [pc, #64]	; (40434c <_wcrtomb_r+0x50>)
  40430a:	6824      	ldr	r4, [r4, #0]
  40430c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40430e:	2c00      	cmp	r4, #0
  404310:	bf08      	it	eq
  404312:	462c      	moveq	r4, r5
  404314:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  404318:	47a0      	blx	r4
  40431a:	1c43      	adds	r3, r0, #1
  40431c:	d103      	bne.n	404326 <_wcrtomb_r+0x2a>
  40431e:	2200      	movs	r2, #0
  404320:	238a      	movs	r3, #138	; 0x8a
  404322:	603a      	str	r2, [r7, #0]
  404324:	6033      	str	r3, [r6, #0]
  404326:	b005      	add	sp, #20
  404328:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40432a:	460c      	mov	r4, r1
  40432c:	4906      	ldr	r1, [pc, #24]	; (404348 <_wcrtomb_r+0x4c>)
  40432e:	4a07      	ldr	r2, [pc, #28]	; (40434c <_wcrtomb_r+0x50>)
  404330:	6809      	ldr	r1, [r1, #0]
  404332:	6b49      	ldr	r1, [r1, #52]	; 0x34
  404334:	2900      	cmp	r1, #0
  404336:	bf08      	it	eq
  404338:	4611      	moveq	r1, r2
  40433a:	4622      	mov	r2, r4
  40433c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  404340:	a901      	add	r1, sp, #4
  404342:	47a0      	blx	r4
  404344:	e7e9      	b.n	40431a <_wcrtomb_r+0x1e>
  404346:	bf00      	nop
  404348:	20000008 	.word	0x20000008
  40434c:	2000043c 	.word	0x2000043c

00404350 <__ascii_wctomb>:
  404350:	b121      	cbz	r1, 40435c <__ascii_wctomb+0xc>
  404352:	2aff      	cmp	r2, #255	; 0xff
  404354:	d804      	bhi.n	404360 <__ascii_wctomb+0x10>
  404356:	700a      	strb	r2, [r1, #0]
  404358:	2001      	movs	r0, #1
  40435a:	4770      	bx	lr
  40435c:	4608      	mov	r0, r1
  40435e:	4770      	bx	lr
  404360:	238a      	movs	r3, #138	; 0x8a
  404362:	6003      	str	r3, [r0, #0]
  404364:	f04f 30ff 	mov.w	r0, #4294967295
  404368:	4770      	bx	lr
  40436a:	bf00      	nop

0040436c <_write_r>:
  40436c:	b570      	push	{r4, r5, r6, lr}
  40436e:	460d      	mov	r5, r1
  404370:	4c08      	ldr	r4, [pc, #32]	; (404394 <_write_r+0x28>)
  404372:	4611      	mov	r1, r2
  404374:	4606      	mov	r6, r0
  404376:	461a      	mov	r2, r3
  404378:	4628      	mov	r0, r5
  40437a:	2300      	movs	r3, #0
  40437c:	6023      	str	r3, [r4, #0]
  40437e:	f7fc fc2f 	bl	400be0 <_write>
  404382:	1c43      	adds	r3, r0, #1
  404384:	d000      	beq.n	404388 <_write_r+0x1c>
  404386:	bd70      	pop	{r4, r5, r6, pc}
  404388:	6823      	ldr	r3, [r4, #0]
  40438a:	2b00      	cmp	r3, #0
  40438c:	d0fb      	beq.n	404386 <_write_r+0x1a>
  40438e:	6033      	str	r3, [r6, #0]
  404390:	bd70      	pop	{r4, r5, r6, pc}
  404392:	bf00      	nop
  404394:	20000ac8 	.word	0x20000ac8

00404398 <__register_exitproc>:
  404398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40439c:	4d2c      	ldr	r5, [pc, #176]	; (404450 <__register_exitproc+0xb8>)
  40439e:	4606      	mov	r6, r0
  4043a0:	6828      	ldr	r0, [r5, #0]
  4043a2:	4698      	mov	r8, r3
  4043a4:	460f      	mov	r7, r1
  4043a6:	4691      	mov	r9, r2
  4043a8:	f7ff f8ae 	bl	403508 <__retarget_lock_acquire_recursive>
  4043ac:	4b29      	ldr	r3, [pc, #164]	; (404454 <__register_exitproc+0xbc>)
  4043ae:	681c      	ldr	r4, [r3, #0]
  4043b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4043b4:	2b00      	cmp	r3, #0
  4043b6:	d03e      	beq.n	404436 <__register_exitproc+0x9e>
  4043b8:	685a      	ldr	r2, [r3, #4]
  4043ba:	2a1f      	cmp	r2, #31
  4043bc:	dc1c      	bgt.n	4043f8 <__register_exitproc+0x60>
  4043be:	f102 0e01 	add.w	lr, r2, #1
  4043c2:	b176      	cbz	r6, 4043e2 <__register_exitproc+0x4a>
  4043c4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4043c8:	2401      	movs	r4, #1
  4043ca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4043ce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4043d2:	4094      	lsls	r4, r2
  4043d4:	4320      	orrs	r0, r4
  4043d6:	2e02      	cmp	r6, #2
  4043d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4043dc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4043e0:	d023      	beq.n	40442a <__register_exitproc+0x92>
  4043e2:	3202      	adds	r2, #2
  4043e4:	f8c3 e004 	str.w	lr, [r3, #4]
  4043e8:	6828      	ldr	r0, [r5, #0]
  4043ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4043ee:	f7ff f88d 	bl	40350c <__retarget_lock_release_recursive>
  4043f2:	2000      	movs	r0, #0
  4043f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4043f8:	4b17      	ldr	r3, [pc, #92]	; (404458 <__register_exitproc+0xc0>)
  4043fa:	b30b      	cbz	r3, 404440 <__register_exitproc+0xa8>
  4043fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404400:	f7ff f8fe 	bl	403600 <malloc>
  404404:	4603      	mov	r3, r0
  404406:	b1d8      	cbz	r0, 404440 <__register_exitproc+0xa8>
  404408:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40440c:	6002      	str	r2, [r0, #0]
  40440e:	2100      	movs	r1, #0
  404410:	6041      	str	r1, [r0, #4]
  404412:	460a      	mov	r2, r1
  404414:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404418:	f04f 0e01 	mov.w	lr, #1
  40441c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  404420:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  404424:	2e00      	cmp	r6, #0
  404426:	d0dc      	beq.n	4043e2 <__register_exitproc+0x4a>
  404428:	e7cc      	b.n	4043c4 <__register_exitproc+0x2c>
  40442a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40442e:	430c      	orrs	r4, r1
  404430:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404434:	e7d5      	b.n	4043e2 <__register_exitproc+0x4a>
  404436:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40443a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40443e:	e7bb      	b.n	4043b8 <__register_exitproc+0x20>
  404440:	6828      	ldr	r0, [r5, #0]
  404442:	f7ff f863 	bl	40350c <__retarget_lock_release_recursive>
  404446:	f04f 30ff 	mov.w	r0, #4294967295
  40444a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40444e:	bf00      	nop
  404450:	20000438 	.word	0x20000438
  404454:	00404d10 	.word	0x00404d10
  404458:	00403601 	.word	0x00403601

0040445c <_close_r>:
  40445c:	b538      	push	{r3, r4, r5, lr}
  40445e:	4c07      	ldr	r4, [pc, #28]	; (40447c <_close_r+0x20>)
  404460:	2300      	movs	r3, #0
  404462:	4605      	mov	r5, r0
  404464:	4608      	mov	r0, r1
  404466:	6023      	str	r3, [r4, #0]
  404468:	f7fd fa2e 	bl	4018c8 <_close>
  40446c:	1c43      	adds	r3, r0, #1
  40446e:	d000      	beq.n	404472 <_close_r+0x16>
  404470:	bd38      	pop	{r3, r4, r5, pc}
  404472:	6823      	ldr	r3, [r4, #0]
  404474:	2b00      	cmp	r3, #0
  404476:	d0fb      	beq.n	404470 <_close_r+0x14>
  404478:	602b      	str	r3, [r5, #0]
  40447a:	bd38      	pop	{r3, r4, r5, pc}
  40447c:	20000ac8 	.word	0x20000ac8

00404480 <_fclose_r>:
  404480:	b570      	push	{r4, r5, r6, lr}
  404482:	b159      	cbz	r1, 40449c <_fclose_r+0x1c>
  404484:	4605      	mov	r5, r0
  404486:	460c      	mov	r4, r1
  404488:	b110      	cbz	r0, 404490 <_fclose_r+0x10>
  40448a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40448c:	2b00      	cmp	r3, #0
  40448e:	d03c      	beq.n	40450a <_fclose_r+0x8a>
  404490:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404492:	07d8      	lsls	r0, r3, #31
  404494:	d505      	bpl.n	4044a2 <_fclose_r+0x22>
  404496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40449a:	b92b      	cbnz	r3, 4044a8 <_fclose_r+0x28>
  40449c:	2600      	movs	r6, #0
  40449e:	4630      	mov	r0, r6
  4044a0:	bd70      	pop	{r4, r5, r6, pc}
  4044a2:	89a3      	ldrh	r3, [r4, #12]
  4044a4:	0599      	lsls	r1, r3, #22
  4044a6:	d53c      	bpl.n	404522 <_fclose_r+0xa2>
  4044a8:	4621      	mov	r1, r4
  4044aa:	4628      	mov	r0, r5
  4044ac:	f7fe fb74 	bl	402b98 <__sflush_r>
  4044b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4044b2:	4606      	mov	r6, r0
  4044b4:	b133      	cbz	r3, 4044c4 <_fclose_r+0x44>
  4044b6:	69e1      	ldr	r1, [r4, #28]
  4044b8:	4628      	mov	r0, r5
  4044ba:	4798      	blx	r3
  4044bc:	2800      	cmp	r0, #0
  4044be:	bfb8      	it	lt
  4044c0:	f04f 36ff 	movlt.w	r6, #4294967295
  4044c4:	89a3      	ldrh	r3, [r4, #12]
  4044c6:	061a      	lsls	r2, r3, #24
  4044c8:	d422      	bmi.n	404510 <_fclose_r+0x90>
  4044ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4044cc:	b141      	cbz	r1, 4044e0 <_fclose_r+0x60>
  4044ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4044d2:	4299      	cmp	r1, r3
  4044d4:	d002      	beq.n	4044dc <_fclose_r+0x5c>
  4044d6:	4628      	mov	r0, r5
  4044d8:	f7fe fd7c 	bl	402fd4 <_free_r>
  4044dc:	2300      	movs	r3, #0
  4044de:	6323      	str	r3, [r4, #48]	; 0x30
  4044e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4044e2:	b121      	cbz	r1, 4044ee <_fclose_r+0x6e>
  4044e4:	4628      	mov	r0, r5
  4044e6:	f7fe fd75 	bl	402fd4 <_free_r>
  4044ea:	2300      	movs	r3, #0
  4044ec:	6463      	str	r3, [r4, #68]	; 0x44
  4044ee:	f7fe fc77 	bl	402de0 <__sfp_lock_acquire>
  4044f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4044f4:	2200      	movs	r2, #0
  4044f6:	07db      	lsls	r3, r3, #31
  4044f8:	81a2      	strh	r2, [r4, #12]
  4044fa:	d50e      	bpl.n	40451a <_fclose_r+0x9a>
  4044fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4044fe:	f7ff f801 	bl	403504 <__retarget_lock_close_recursive>
  404502:	f7fe fc73 	bl	402dec <__sfp_lock_release>
  404506:	4630      	mov	r0, r6
  404508:	bd70      	pop	{r4, r5, r6, pc}
  40450a:	f7fe fc3d 	bl	402d88 <__sinit>
  40450e:	e7bf      	b.n	404490 <_fclose_r+0x10>
  404510:	6921      	ldr	r1, [r4, #16]
  404512:	4628      	mov	r0, r5
  404514:	f7fe fd5e 	bl	402fd4 <_free_r>
  404518:	e7d7      	b.n	4044ca <_fclose_r+0x4a>
  40451a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40451c:	f7fe fff6 	bl	40350c <__retarget_lock_release_recursive>
  404520:	e7ec      	b.n	4044fc <_fclose_r+0x7c>
  404522:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404524:	f7fe fff0 	bl	403508 <__retarget_lock_acquire_recursive>
  404528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40452c:	2b00      	cmp	r3, #0
  40452e:	d1bb      	bne.n	4044a8 <_fclose_r+0x28>
  404530:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404532:	f016 0601 	ands.w	r6, r6, #1
  404536:	d1b1      	bne.n	40449c <_fclose_r+0x1c>
  404538:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40453a:	f7fe ffe7 	bl	40350c <__retarget_lock_release_recursive>
  40453e:	4630      	mov	r0, r6
  404540:	bd70      	pop	{r4, r5, r6, pc}
  404542:	bf00      	nop

00404544 <_fstat_r>:
  404544:	b538      	push	{r3, r4, r5, lr}
  404546:	460b      	mov	r3, r1
  404548:	4c07      	ldr	r4, [pc, #28]	; (404568 <_fstat_r+0x24>)
  40454a:	4605      	mov	r5, r0
  40454c:	4611      	mov	r1, r2
  40454e:	4618      	mov	r0, r3
  404550:	2300      	movs	r3, #0
  404552:	6023      	str	r3, [r4, #0]
  404554:	f7fd f9bb 	bl	4018ce <_fstat>
  404558:	1c43      	adds	r3, r0, #1
  40455a:	d000      	beq.n	40455e <_fstat_r+0x1a>
  40455c:	bd38      	pop	{r3, r4, r5, pc}
  40455e:	6823      	ldr	r3, [r4, #0]
  404560:	2b00      	cmp	r3, #0
  404562:	d0fb      	beq.n	40455c <_fstat_r+0x18>
  404564:	602b      	str	r3, [r5, #0]
  404566:	bd38      	pop	{r3, r4, r5, pc}
  404568:	20000ac8 	.word	0x20000ac8

0040456c <_isatty_r>:
  40456c:	b538      	push	{r3, r4, r5, lr}
  40456e:	4c07      	ldr	r4, [pc, #28]	; (40458c <_isatty_r+0x20>)
  404570:	2300      	movs	r3, #0
  404572:	4605      	mov	r5, r0
  404574:	4608      	mov	r0, r1
  404576:	6023      	str	r3, [r4, #0]
  404578:	f7fd f9ae 	bl	4018d8 <_isatty>
  40457c:	1c43      	adds	r3, r0, #1
  40457e:	d000      	beq.n	404582 <_isatty_r+0x16>
  404580:	bd38      	pop	{r3, r4, r5, pc}
  404582:	6823      	ldr	r3, [r4, #0]
  404584:	2b00      	cmp	r3, #0
  404586:	d0fb      	beq.n	404580 <_isatty_r+0x14>
  404588:	602b      	str	r3, [r5, #0]
  40458a:	bd38      	pop	{r3, r4, r5, pc}
  40458c:	20000ac8 	.word	0x20000ac8

00404590 <_lseek_r>:
  404590:	b570      	push	{r4, r5, r6, lr}
  404592:	460d      	mov	r5, r1
  404594:	4c08      	ldr	r4, [pc, #32]	; (4045b8 <_lseek_r+0x28>)
  404596:	4611      	mov	r1, r2
  404598:	4606      	mov	r6, r0
  40459a:	461a      	mov	r2, r3
  40459c:	4628      	mov	r0, r5
  40459e:	2300      	movs	r3, #0
  4045a0:	6023      	str	r3, [r4, #0]
  4045a2:	f7fd f99b 	bl	4018dc <_lseek>
  4045a6:	1c43      	adds	r3, r0, #1
  4045a8:	d000      	beq.n	4045ac <_lseek_r+0x1c>
  4045aa:	bd70      	pop	{r4, r5, r6, pc}
  4045ac:	6823      	ldr	r3, [r4, #0]
  4045ae:	2b00      	cmp	r3, #0
  4045b0:	d0fb      	beq.n	4045aa <_lseek_r+0x1a>
  4045b2:	6033      	str	r3, [r6, #0]
  4045b4:	bd70      	pop	{r4, r5, r6, pc}
  4045b6:	bf00      	nop
  4045b8:	20000ac8 	.word	0x20000ac8

004045bc <_read_r>:
  4045bc:	b570      	push	{r4, r5, r6, lr}
  4045be:	460d      	mov	r5, r1
  4045c0:	4c08      	ldr	r4, [pc, #32]	; (4045e4 <_read_r+0x28>)
  4045c2:	4611      	mov	r1, r2
  4045c4:	4606      	mov	r6, r0
  4045c6:	461a      	mov	r2, r3
  4045c8:	4628      	mov	r0, r5
  4045ca:	2300      	movs	r3, #0
  4045cc:	6023      	str	r3, [r4, #0]
  4045ce:	f7fc fae9 	bl	400ba4 <_read>
  4045d2:	1c43      	adds	r3, r0, #1
  4045d4:	d000      	beq.n	4045d8 <_read_r+0x1c>
  4045d6:	bd70      	pop	{r4, r5, r6, pc}
  4045d8:	6823      	ldr	r3, [r4, #0]
  4045da:	2b00      	cmp	r3, #0
  4045dc:	d0fb      	beq.n	4045d6 <_read_r+0x1a>
  4045de:	6033      	str	r3, [r6, #0]
  4045e0:	bd70      	pop	{r4, r5, r6, pc}
  4045e2:	bf00      	nop
  4045e4:	20000ac8 	.word	0x20000ac8

004045e8 <__aeabi_uldivmod>:
  4045e8:	b953      	cbnz	r3, 404600 <__aeabi_uldivmod+0x18>
  4045ea:	b94a      	cbnz	r2, 404600 <__aeabi_uldivmod+0x18>
  4045ec:	2900      	cmp	r1, #0
  4045ee:	bf08      	it	eq
  4045f0:	2800      	cmpeq	r0, #0
  4045f2:	bf1c      	itt	ne
  4045f4:	f04f 31ff 	movne.w	r1, #4294967295
  4045f8:	f04f 30ff 	movne.w	r0, #4294967295
  4045fc:	f000 b97a 	b.w	4048f4 <__aeabi_idiv0>
  404600:	f1ad 0c08 	sub.w	ip, sp, #8
  404604:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404608:	f000 f806 	bl	404618 <__udivmoddi4>
  40460c:	f8dd e004 	ldr.w	lr, [sp, #4]
  404610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404614:	b004      	add	sp, #16
  404616:	4770      	bx	lr

00404618 <__udivmoddi4>:
  404618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40461c:	468c      	mov	ip, r1
  40461e:	460d      	mov	r5, r1
  404620:	4604      	mov	r4, r0
  404622:	9e08      	ldr	r6, [sp, #32]
  404624:	2b00      	cmp	r3, #0
  404626:	d151      	bne.n	4046cc <__udivmoddi4+0xb4>
  404628:	428a      	cmp	r2, r1
  40462a:	4617      	mov	r7, r2
  40462c:	d96d      	bls.n	40470a <__udivmoddi4+0xf2>
  40462e:	fab2 fe82 	clz	lr, r2
  404632:	f1be 0f00 	cmp.w	lr, #0
  404636:	d00b      	beq.n	404650 <__udivmoddi4+0x38>
  404638:	f1ce 0c20 	rsb	ip, lr, #32
  40463c:	fa01 f50e 	lsl.w	r5, r1, lr
  404640:	fa20 fc0c 	lsr.w	ip, r0, ip
  404644:	fa02 f70e 	lsl.w	r7, r2, lr
  404648:	ea4c 0c05 	orr.w	ip, ip, r5
  40464c:	fa00 f40e 	lsl.w	r4, r0, lr
  404650:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  404654:	0c25      	lsrs	r5, r4, #16
  404656:	fbbc f8fa 	udiv	r8, ip, sl
  40465a:	fa1f f987 	uxth.w	r9, r7
  40465e:	fb0a cc18 	mls	ip, sl, r8, ip
  404662:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  404666:	fb08 f309 	mul.w	r3, r8, r9
  40466a:	42ab      	cmp	r3, r5
  40466c:	d90a      	bls.n	404684 <__udivmoddi4+0x6c>
  40466e:	19ed      	adds	r5, r5, r7
  404670:	f108 32ff 	add.w	r2, r8, #4294967295
  404674:	f080 8123 	bcs.w	4048be <__udivmoddi4+0x2a6>
  404678:	42ab      	cmp	r3, r5
  40467a:	f240 8120 	bls.w	4048be <__udivmoddi4+0x2a6>
  40467e:	f1a8 0802 	sub.w	r8, r8, #2
  404682:	443d      	add	r5, r7
  404684:	1aed      	subs	r5, r5, r3
  404686:	b2a4      	uxth	r4, r4
  404688:	fbb5 f0fa 	udiv	r0, r5, sl
  40468c:	fb0a 5510 	mls	r5, sl, r0, r5
  404690:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  404694:	fb00 f909 	mul.w	r9, r0, r9
  404698:	45a1      	cmp	r9, r4
  40469a:	d909      	bls.n	4046b0 <__udivmoddi4+0x98>
  40469c:	19e4      	adds	r4, r4, r7
  40469e:	f100 33ff 	add.w	r3, r0, #4294967295
  4046a2:	f080 810a 	bcs.w	4048ba <__udivmoddi4+0x2a2>
  4046a6:	45a1      	cmp	r9, r4
  4046a8:	f240 8107 	bls.w	4048ba <__udivmoddi4+0x2a2>
  4046ac:	3802      	subs	r0, #2
  4046ae:	443c      	add	r4, r7
  4046b0:	eba4 0409 	sub.w	r4, r4, r9
  4046b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4046b8:	2100      	movs	r1, #0
  4046ba:	2e00      	cmp	r6, #0
  4046bc:	d061      	beq.n	404782 <__udivmoddi4+0x16a>
  4046be:	fa24 f40e 	lsr.w	r4, r4, lr
  4046c2:	2300      	movs	r3, #0
  4046c4:	6034      	str	r4, [r6, #0]
  4046c6:	6073      	str	r3, [r6, #4]
  4046c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4046cc:	428b      	cmp	r3, r1
  4046ce:	d907      	bls.n	4046e0 <__udivmoddi4+0xc8>
  4046d0:	2e00      	cmp	r6, #0
  4046d2:	d054      	beq.n	40477e <__udivmoddi4+0x166>
  4046d4:	2100      	movs	r1, #0
  4046d6:	e886 0021 	stmia.w	r6, {r0, r5}
  4046da:	4608      	mov	r0, r1
  4046dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4046e0:	fab3 f183 	clz	r1, r3
  4046e4:	2900      	cmp	r1, #0
  4046e6:	f040 808e 	bne.w	404806 <__udivmoddi4+0x1ee>
  4046ea:	42ab      	cmp	r3, r5
  4046ec:	d302      	bcc.n	4046f4 <__udivmoddi4+0xdc>
  4046ee:	4282      	cmp	r2, r0
  4046f0:	f200 80fa 	bhi.w	4048e8 <__udivmoddi4+0x2d0>
  4046f4:	1a84      	subs	r4, r0, r2
  4046f6:	eb65 0503 	sbc.w	r5, r5, r3
  4046fa:	2001      	movs	r0, #1
  4046fc:	46ac      	mov	ip, r5
  4046fe:	2e00      	cmp	r6, #0
  404700:	d03f      	beq.n	404782 <__udivmoddi4+0x16a>
  404702:	e886 1010 	stmia.w	r6, {r4, ip}
  404706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40470a:	b912      	cbnz	r2, 404712 <__udivmoddi4+0xfa>
  40470c:	2701      	movs	r7, #1
  40470e:	fbb7 f7f2 	udiv	r7, r7, r2
  404712:	fab7 fe87 	clz	lr, r7
  404716:	f1be 0f00 	cmp.w	lr, #0
  40471a:	d134      	bne.n	404786 <__udivmoddi4+0x16e>
  40471c:	1beb      	subs	r3, r5, r7
  40471e:	0c3a      	lsrs	r2, r7, #16
  404720:	fa1f fc87 	uxth.w	ip, r7
  404724:	2101      	movs	r1, #1
  404726:	fbb3 f8f2 	udiv	r8, r3, r2
  40472a:	0c25      	lsrs	r5, r4, #16
  40472c:	fb02 3318 	mls	r3, r2, r8, r3
  404730:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404734:	fb0c f308 	mul.w	r3, ip, r8
  404738:	42ab      	cmp	r3, r5
  40473a:	d907      	bls.n	40474c <__udivmoddi4+0x134>
  40473c:	19ed      	adds	r5, r5, r7
  40473e:	f108 30ff 	add.w	r0, r8, #4294967295
  404742:	d202      	bcs.n	40474a <__udivmoddi4+0x132>
  404744:	42ab      	cmp	r3, r5
  404746:	f200 80d1 	bhi.w	4048ec <__udivmoddi4+0x2d4>
  40474a:	4680      	mov	r8, r0
  40474c:	1aed      	subs	r5, r5, r3
  40474e:	b2a3      	uxth	r3, r4
  404750:	fbb5 f0f2 	udiv	r0, r5, r2
  404754:	fb02 5510 	mls	r5, r2, r0, r5
  404758:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40475c:	fb0c fc00 	mul.w	ip, ip, r0
  404760:	45a4      	cmp	ip, r4
  404762:	d907      	bls.n	404774 <__udivmoddi4+0x15c>
  404764:	19e4      	adds	r4, r4, r7
  404766:	f100 33ff 	add.w	r3, r0, #4294967295
  40476a:	d202      	bcs.n	404772 <__udivmoddi4+0x15a>
  40476c:	45a4      	cmp	ip, r4
  40476e:	f200 80b8 	bhi.w	4048e2 <__udivmoddi4+0x2ca>
  404772:	4618      	mov	r0, r3
  404774:	eba4 040c 	sub.w	r4, r4, ip
  404778:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40477c:	e79d      	b.n	4046ba <__udivmoddi4+0xa2>
  40477e:	4631      	mov	r1, r6
  404780:	4630      	mov	r0, r6
  404782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404786:	f1ce 0420 	rsb	r4, lr, #32
  40478a:	fa05 f30e 	lsl.w	r3, r5, lr
  40478e:	fa07 f70e 	lsl.w	r7, r7, lr
  404792:	fa20 f804 	lsr.w	r8, r0, r4
  404796:	0c3a      	lsrs	r2, r7, #16
  404798:	fa25 f404 	lsr.w	r4, r5, r4
  40479c:	ea48 0803 	orr.w	r8, r8, r3
  4047a0:	fbb4 f1f2 	udiv	r1, r4, r2
  4047a4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4047a8:	fb02 4411 	mls	r4, r2, r1, r4
  4047ac:	fa1f fc87 	uxth.w	ip, r7
  4047b0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4047b4:	fb01 f30c 	mul.w	r3, r1, ip
  4047b8:	42ab      	cmp	r3, r5
  4047ba:	fa00 f40e 	lsl.w	r4, r0, lr
  4047be:	d909      	bls.n	4047d4 <__udivmoddi4+0x1bc>
  4047c0:	19ed      	adds	r5, r5, r7
  4047c2:	f101 30ff 	add.w	r0, r1, #4294967295
  4047c6:	f080 808a 	bcs.w	4048de <__udivmoddi4+0x2c6>
  4047ca:	42ab      	cmp	r3, r5
  4047cc:	f240 8087 	bls.w	4048de <__udivmoddi4+0x2c6>
  4047d0:	3902      	subs	r1, #2
  4047d2:	443d      	add	r5, r7
  4047d4:	1aeb      	subs	r3, r5, r3
  4047d6:	fa1f f588 	uxth.w	r5, r8
  4047da:	fbb3 f0f2 	udiv	r0, r3, r2
  4047de:	fb02 3310 	mls	r3, r2, r0, r3
  4047e2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4047e6:	fb00 f30c 	mul.w	r3, r0, ip
  4047ea:	42ab      	cmp	r3, r5
  4047ec:	d907      	bls.n	4047fe <__udivmoddi4+0x1e6>
  4047ee:	19ed      	adds	r5, r5, r7
  4047f0:	f100 38ff 	add.w	r8, r0, #4294967295
  4047f4:	d26f      	bcs.n	4048d6 <__udivmoddi4+0x2be>
  4047f6:	42ab      	cmp	r3, r5
  4047f8:	d96d      	bls.n	4048d6 <__udivmoddi4+0x2be>
  4047fa:	3802      	subs	r0, #2
  4047fc:	443d      	add	r5, r7
  4047fe:	1aeb      	subs	r3, r5, r3
  404800:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404804:	e78f      	b.n	404726 <__udivmoddi4+0x10e>
  404806:	f1c1 0720 	rsb	r7, r1, #32
  40480a:	fa22 f807 	lsr.w	r8, r2, r7
  40480e:	408b      	lsls	r3, r1
  404810:	fa05 f401 	lsl.w	r4, r5, r1
  404814:	ea48 0303 	orr.w	r3, r8, r3
  404818:	fa20 fe07 	lsr.w	lr, r0, r7
  40481c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404820:	40fd      	lsrs	r5, r7
  404822:	ea4e 0e04 	orr.w	lr, lr, r4
  404826:	fbb5 f9fc 	udiv	r9, r5, ip
  40482a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40482e:	fb0c 5519 	mls	r5, ip, r9, r5
  404832:	fa1f f883 	uxth.w	r8, r3
  404836:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40483a:	fb09 f408 	mul.w	r4, r9, r8
  40483e:	42ac      	cmp	r4, r5
  404840:	fa02 f201 	lsl.w	r2, r2, r1
  404844:	fa00 fa01 	lsl.w	sl, r0, r1
  404848:	d908      	bls.n	40485c <__udivmoddi4+0x244>
  40484a:	18ed      	adds	r5, r5, r3
  40484c:	f109 30ff 	add.w	r0, r9, #4294967295
  404850:	d243      	bcs.n	4048da <__udivmoddi4+0x2c2>
  404852:	42ac      	cmp	r4, r5
  404854:	d941      	bls.n	4048da <__udivmoddi4+0x2c2>
  404856:	f1a9 0902 	sub.w	r9, r9, #2
  40485a:	441d      	add	r5, r3
  40485c:	1b2d      	subs	r5, r5, r4
  40485e:	fa1f fe8e 	uxth.w	lr, lr
  404862:	fbb5 f0fc 	udiv	r0, r5, ip
  404866:	fb0c 5510 	mls	r5, ip, r0, r5
  40486a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40486e:	fb00 f808 	mul.w	r8, r0, r8
  404872:	45a0      	cmp	r8, r4
  404874:	d907      	bls.n	404886 <__udivmoddi4+0x26e>
  404876:	18e4      	adds	r4, r4, r3
  404878:	f100 35ff 	add.w	r5, r0, #4294967295
  40487c:	d229      	bcs.n	4048d2 <__udivmoddi4+0x2ba>
  40487e:	45a0      	cmp	r8, r4
  404880:	d927      	bls.n	4048d2 <__udivmoddi4+0x2ba>
  404882:	3802      	subs	r0, #2
  404884:	441c      	add	r4, r3
  404886:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40488a:	eba4 0408 	sub.w	r4, r4, r8
  40488e:	fba0 8902 	umull	r8, r9, r0, r2
  404892:	454c      	cmp	r4, r9
  404894:	46c6      	mov	lr, r8
  404896:	464d      	mov	r5, r9
  404898:	d315      	bcc.n	4048c6 <__udivmoddi4+0x2ae>
  40489a:	d012      	beq.n	4048c2 <__udivmoddi4+0x2aa>
  40489c:	b156      	cbz	r6, 4048b4 <__udivmoddi4+0x29c>
  40489e:	ebba 030e 	subs.w	r3, sl, lr
  4048a2:	eb64 0405 	sbc.w	r4, r4, r5
  4048a6:	fa04 f707 	lsl.w	r7, r4, r7
  4048aa:	40cb      	lsrs	r3, r1
  4048ac:	431f      	orrs	r7, r3
  4048ae:	40cc      	lsrs	r4, r1
  4048b0:	6037      	str	r7, [r6, #0]
  4048b2:	6074      	str	r4, [r6, #4]
  4048b4:	2100      	movs	r1, #0
  4048b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4048ba:	4618      	mov	r0, r3
  4048bc:	e6f8      	b.n	4046b0 <__udivmoddi4+0x98>
  4048be:	4690      	mov	r8, r2
  4048c0:	e6e0      	b.n	404684 <__udivmoddi4+0x6c>
  4048c2:	45c2      	cmp	sl, r8
  4048c4:	d2ea      	bcs.n	40489c <__udivmoddi4+0x284>
  4048c6:	ebb8 0e02 	subs.w	lr, r8, r2
  4048ca:	eb69 0503 	sbc.w	r5, r9, r3
  4048ce:	3801      	subs	r0, #1
  4048d0:	e7e4      	b.n	40489c <__udivmoddi4+0x284>
  4048d2:	4628      	mov	r0, r5
  4048d4:	e7d7      	b.n	404886 <__udivmoddi4+0x26e>
  4048d6:	4640      	mov	r0, r8
  4048d8:	e791      	b.n	4047fe <__udivmoddi4+0x1e6>
  4048da:	4681      	mov	r9, r0
  4048dc:	e7be      	b.n	40485c <__udivmoddi4+0x244>
  4048de:	4601      	mov	r1, r0
  4048e0:	e778      	b.n	4047d4 <__udivmoddi4+0x1bc>
  4048e2:	3802      	subs	r0, #2
  4048e4:	443c      	add	r4, r7
  4048e6:	e745      	b.n	404774 <__udivmoddi4+0x15c>
  4048e8:	4608      	mov	r0, r1
  4048ea:	e708      	b.n	4046fe <__udivmoddi4+0xe6>
  4048ec:	f1a8 0802 	sub.w	r8, r8, #2
  4048f0:	443d      	add	r5, r7
  4048f2:	e72b      	b.n	40474c <__udivmoddi4+0x134>

004048f4 <__aeabi_idiv0>:
  4048f4:	4770      	bx	lr
  4048f6:	bf00      	nop
  4048f8:	3d3d0d0a 	.word	0x3d3d0d0a
  4048fc:	3d3d3d3d 	.word	0x3d3d3d3d
  404900:	3d3d3d3d 	.word	0x3d3d3d3d
  404904:	3d3d3d3d 	.word	0x3d3d3d3d
  404908:	3d3d3d3d 	.word	0x3d3d3d3d
  40490c:	3d3d3d3d 	.word	0x3d3d3d3d
  404910:	3d3d3d3d 	.word	0x3d3d3d3d
  404914:	3d3d3d3d 	.word	0x3d3d3d3d
  404918:	3d3d3d3d 	.word	0x3d3d3d3d
  40491c:	3d3d3d3d 	.word	0x3d3d3d3d
  404920:	3d3d3d3d 	.word	0x3d3d3d3d
  404924:	3d3d3d3d 	.word	0x3d3d3d3d
  404928:	3d3d3d3d 	.word	0x3d3d3d3d
  40492c:	4d0d0a3d 	.word	0x4d0d0a3d
  404930:	3a756e65 	.word	0x3a756e65
  404934:	65727020 	.word	0x65727020
  404938:	61207373 	.word	0x61207373
  40493c:	79656b20 	.word	0x79656b20
  404940:	206f7420 	.word	0x206f7420
  404944:	6e616863 	.word	0x6e616863
  404948:	74206567 	.word	0x74206567
  40494c:	63206568 	.word	0x63206568
  404950:	69666e6f 	.word	0x69666e6f
  404954:	61727567 	.word	0x61727567
  404958:	6e6f6974 	.word	0x6e6f6974
  40495c:	2d0d0a2e 	.word	0x2d0d0a2e
  404960:	2d2d2d2d 	.word	0x2d2d2d2d
  404964:	2d2d2d2d 	.word	0x2d2d2d2d
  404968:	2d2d2d2d 	.word	0x2d2d2d2d
  40496c:	2d2d2d2d 	.word	0x2d2d2d2d
  404970:	2d2d2d2d 	.word	0x2d2d2d2d
  404974:	2d2d2d2d 	.word	0x2d2d2d2d
  404978:	2d2d2d2d 	.word	0x2d2d2d2d
  40497c:	2d2d2d2d 	.word	0x2d2d2d2d
  404980:	2d2d2d2d 	.word	0x2d2d2d2d
  404984:	2d2d2d2d 	.word	0x2d2d2d2d
  404988:	2d2d2d2d 	.word	0x2d2d2d2d
  40498c:	2d2d2d2d 	.word	0x2d2d2d2d
  404990:	2d2d2d2d 	.word	0x2d2d2d2d
  404994:	2d2d2d2d 	.word	0x2d2d2d2d
  404998:	00000d0a 	.word	0x00000d0a
  40499c:	5d63255b 	.word	0x5d63255b
  4049a0:	203a3020 	.word	0x203a3020
  4049a4:	20746553 	.word	0x20746553
  4049a8:	20434441 	.word	0x20434441
  4049ac:	67697274 	.word	0x67697274
  4049b0:	20726567 	.word	0x20726567
  4049b4:	65646f6d 	.word	0x65646f6d
  4049b8:	6f53203a 	.word	0x6f53203a
  4049bc:	61777466 	.word	0x61777466
  4049c0:	0a2e6572 	.word	0x0a2e6572
  4049c4:	0000000d 	.word	0x0000000d
  4049c8:	5d63255b 	.word	0x5d63255b
  4049cc:	203a3120 	.word	0x203a3120
  4049d0:	20746553 	.word	0x20746553
  4049d4:	20434441 	.word	0x20434441
  4049d8:	67697274 	.word	0x67697274
  4049dc:	20726567 	.word	0x20726567
  4049e0:	65646f6d 	.word	0x65646f6d
  4049e4:	4441203a 	.word	0x4441203a
  4049e8:	2e475254 	.word	0x2e475254
  4049ec:	00000d0a 	.word	0x00000d0a
  4049f0:	5d63255b 	.word	0x5d63255b
  4049f4:	203a3220 	.word	0x203a3220
  4049f8:	20746553 	.word	0x20746553
  4049fc:	20434441 	.word	0x20434441
  404a00:	67697274 	.word	0x67697274
  404a04:	20726567 	.word	0x20726567
  404a08:	65646f6d 	.word	0x65646f6d
  404a0c:	6954203a 	.word	0x6954203a
  404a10:	2072656d 	.word	0x2072656d
  404a14:	414f4954 	.word	0x414f4954
  404a18:	000d0a2e 	.word	0x000d0a2e
  404a1c:	5d63255b 	.word	0x5d63255b
  404a20:	203a3320 	.word	0x203a3320
  404a24:	20746553 	.word	0x20746553
  404a28:	20434441 	.word	0x20434441
  404a2c:	67697274 	.word	0x67697274
  404a30:	20726567 	.word	0x20726567
  404a34:	65646f6d 	.word	0x65646f6d
  404a38:	5750203a 	.word	0x5750203a
  404a3c:	7645204d 	.word	0x7645204d
  404a40:	20746e65 	.word	0x20746e65
  404a44:	656e694c 	.word	0x656e694c
  404a48:	000d0a2e 	.word	0x000d0a2e
  404a4c:	5d63255b 	.word	0x5d63255b
  404a50:	203a3420 	.word	0x203a3420
  404a54:	20746553 	.word	0x20746553
  404a58:	20434441 	.word	0x20434441
  404a5c:	67697274 	.word	0x67697274
  404a60:	20726567 	.word	0x20726567
  404a64:	65646f6d 	.word	0x65646f6d
  404a68:	7246203a 	.word	0x7246203a
  404a6c:	72206565 	.word	0x72206565
  404a70:	6d206e75 	.word	0x6d206e75
  404a74:	2e65646f 	.word	0x2e65646f
  404a78:	00000d0a 	.word	0x00000d0a
  404a7c:	5d63255b 	.word	0x5d63255b
  404a80:	203a5420 	.word	0x203a5420
  404a84:	62616e45 	.word	0x62616e45
  404a88:	442f656c 	.word	0x442f656c
  404a8c:	62617369 	.word	0x62617369
  404a90:	7420656c 	.word	0x7420656c
  404a94:	7274206f 	.word	0x7274206f
  404a98:	66736e61 	.word	0x66736e61
  404a9c:	77207265 	.word	0x77207265
  404aa0:	20687469 	.word	0x20687469
  404aa4:	2e434450 	.word	0x2e434450
  404aa8:	00000d0a 	.word	0x00000d0a
  404aac:	5d63255b 	.word	0x5d63255b
  404ab0:	203a5320 	.word	0x203a5320
  404ab4:	62616e45 	.word	0x62616e45
  404ab8:	442f656c 	.word	0x442f656c
  404abc:	62617369 	.word	0x62617369
  404ac0:	7420656c 	.word	0x7420656c
  404ac4:	7375206f 	.word	0x7375206f
  404ac8:	73752065 	.word	0x73752065
  404acc:	73207265 	.word	0x73207265
  404ad0:	65757165 	.word	0x65757165
  404ad4:	2065636e 	.word	0x2065636e
  404ad8:	65646f6d 	.word	0x65646f6d
  404adc:	000d0a2e 	.word	0x000d0a2e
  404ae0:	5d63255b 	.word	0x5d63255b
  404ae4:	203a5020 	.word	0x203a5020
  404ae8:	62616e45 	.word	0x62616e45
  404aec:	442f656c 	.word	0x442f656c
  404af0:	62617369 	.word	0x62617369
  404af4:	4120656c 	.word	0x4120656c
  404af8:	70204344 	.word	0x70204344
  404afc:	7265776f 	.word	0x7265776f
  404b00:	76617320 	.word	0x76617320
  404b04:	6f6d2065 	.word	0x6f6d2065
  404b08:	0a2e6564 	.word	0x0a2e6564
  404b0c:	0000000d 	.word	0x0000000d
  404b10:	5d63255b 	.word	0x5d63255b
  404b14:	203a4720 	.word	0x203a4720
  404b18:	62616e45 	.word	0x62616e45
  404b1c:	442f656c 	.word	0x442f656c
  404b20:	62617369 	.word	0x62617369
  404b24:	7420656c 	.word	0x7420656c
  404b28:	6573206f 	.word	0x6573206f
  404b2c:	61672074 	.word	0x61672074
  404b30:	323d6e69 	.word	0x323d6e69
  404b34:	726f6620 	.word	0x726f6620
  404b38:	746f7020 	.word	0x746f7020
  404b3c:	69746e65 	.word	0x69746e65
  404b40:	74656d6f 	.word	0x74656d6f
  404b44:	63207265 	.word	0x63207265
  404b48:	6e6e6168 	.word	0x6e6e6168
  404b4c:	0a2e6c65 	.word	0x0a2e6c65
  404b50:	0000000d 	.word	0x0000000d
  404b54:	5d63255b 	.word	0x5d63255b
  404b58:	203a4f20 	.word	0x203a4f20
  404b5c:	62616e45 	.word	0x62616e45
  404b60:	442f656c 	.word	0x442f656c
  404b64:	62617369 	.word	0x62617369
  404b68:	6f20656c 	.word	0x6f20656c
  404b6c:	65736666 	.word	0x65736666
  404b70:	6f662074 	.word	0x6f662074
  404b74:	6f702072 	.word	0x6f702072
  404b78:	746e6574 	.word	0x746e6574
  404b7c:	656d6f69 	.word	0x656d6f69
  404b80:	20726574 	.word	0x20726574
  404b84:	6e616863 	.word	0x6e616863
  404b88:	2e6c656e 	.word	0x2e6c656e
  404b8c:	00000d0a 	.word	0x00000d0a
  404b90:	5d63255b 	.word	0x5d63255b
  404b94:	203a4320 	.word	0x203a4320
  404b98:	62616e45 	.word	0x62616e45
  404b9c:	4120656c 	.word	0x4120656c
  404ba0:	206f7475 	.word	0x206f7475
  404ba4:	696c6143 	.word	0x696c6143
  404ba8:	74617262 	.word	0x74617262
  404bac:	206e6f69 	.word	0x206e6f69
  404bb0:	65646f4d 	.word	0x65646f4d
  404bb4:	000d0a2e 	.word	0x000d0a2e
  404bb8:	20202020 	.word	0x20202020
  404bbc:	51203a51 	.word	0x51203a51
  404bc0:	20746975 	.word	0x20746975
  404bc4:	666e6f63 	.word	0x666e6f63
  404bc8:	72756769 	.word	0x72756769
  404bcc:	6f697461 	.word	0x6f697461
  404bd0:	6e61206e 	.word	0x6e61206e
  404bd4:	74732064 	.word	0x74732064
  404bd8:	20747261 	.word	0x20747261
  404bdc:	2e434441 	.word	0x2e434441
  404be0:	0000000d 	.word	0x0000000d
  404be4:	3d3d3d3d 	.word	0x3d3d3d3d
  404be8:	3d3d3d3d 	.word	0x3d3d3d3d
  404bec:	3d3d3d3d 	.word	0x3d3d3d3d
  404bf0:	3d3d3d3d 	.word	0x3d3d3d3d
  404bf4:	3d3d3d3d 	.word	0x3d3d3d3d
  404bf8:	3d3d3d3d 	.word	0x3d3d3d3d
  404bfc:	3d3d3d3d 	.word	0x3d3d3d3d
  404c00:	3d3d3d3d 	.word	0x3d3d3d3d
  404c04:	3d3d3d3d 	.word	0x3d3d3d3d
  404c08:	3d3d3d3d 	.word	0x3d3d3d3d
  404c0c:	3d3d3d3d 	.word	0x3d3d3d3d
  404c10:	3d3d3d3d 	.word	0x3d3d3d3d
  404c14:	3d3d3d3d 	.word	0x3d3d3d3d
  404c18:	3d3d3d3d 	.word	0x3d3d3d3d
  404c1c:	00000d3d 	.word	0x00000d3d
  404c20:	41202d2d 	.word	0x41202d2d
  404c24:	45204344 	.word	0x45204344
  404c28:	706d6178 	.word	0x706d6178
  404c2c:	2d20656c 	.word	0x2d20656c
  404c30:	2d0a0d2d 	.word	0x2d0a0d2d
  404c34:	4153202d 	.word	0x4153202d
  404c38:	2d53344d 	.word	0x2d53344d
  404c3c:	20324b45 	.word	0x20324b45
  404c40:	0a0d2d2d 	.word	0x0a0d2d2d
  404c44:	43202d2d 	.word	0x43202d2d
  404c48:	69706d6f 	.word	0x69706d6f
  404c4c:	3a64656c 	.word	0x3a64656c
  404c50:	79614d20 	.word	0x79614d20
  404c54:	20323220 	.word	0x20323220
  404c58:	38313032 	.word	0x38313032
  404c5c:	3a313120 	.word	0x3a313120
  404c60:	313a3133 	.word	0x313a3133
  404c64:	2d2d2038 	.word	0x2d2d2038
  404c68:	0000000d 	.word	0x0000000d
  404c6c:	666e6f43 	.word	0x666e6f43
  404c70:	72756769 	.word	0x72756769
  404c74:	79732065 	.word	0x79732065
  404c78:	6d657473 	.word	0x6d657473
  404c7c:	63697420 	.word	0x63697420
  404c80:	6f74206b 	.word	0x6f74206b
  404c84:	74656720 	.word	0x74656720
  404c88:	736d3120 	.word	0x736d3120
  404c8c:	63697420 	.word	0x63697420
  404c90:	6570206b 	.word	0x6570206b
  404c94:	646f6972 	.word	0x646f6972
  404c98:	00000d2e 	.word	0x00000d2e
  404c9c:	73657250 	.word	0x73657250
  404ca0:	6e612073 	.word	0x6e612073
  404ca4:	656b2079 	.word	0x656b2079
  404ca8:	6f742079 	.word	0x6f742079
  404cac:	73696420 	.word	0x73696420
  404cb0:	79616c70 	.word	0x79616c70
  404cb4:	6e6f6320 	.word	0x6e6f6320
  404cb8:	75676966 	.word	0x75676966
  404cbc:	69746172 	.word	0x69746172
  404cc0:	6d206e6f 	.word	0x6d206e6f
  404cc4:	2e756e65 	.word	0x2e756e65
  404cc8:	0000000d 	.word	0x0000000d
  404ccc:	30254843 	.word	0x30254843
  404cd0:	203a6432 	.word	0x203a6432
  404cd4:	64343025 	.word	0x64343025
  404cd8:	2e766d20 	.word	0x2e766d20
  404cdc:	20202020 	.word	0x20202020
  404ce0:	00000000 	.word	0x00000000
  404ce4:	00000001 	.word	0x00000001
  404ce8:	00000002 	.word	0x00000002
  404cec:	00000004 	.word	0x00000004
  404cf0:	00000008 	.word	0x00000008
  404cf4:	00000010 	.word	0x00000010
  404cf8:	00000020 	.word	0x00000020
  404cfc:	00000040 	.word	0x00000040
  404d00:	00000080 	.word	0x00000080
  404d04:	00000100 	.word	0x00000100
  404d08:	00000200 	.word	0x00000200
  404d0c:	00000400 	.word	0x00000400

00404d10 <_global_impure_ptr>:
  404d10:	20000010 0000000a 33323130 37363534     ... ....01234567
  404d20:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  404d30:	37363534 62613938 66656463 00000000     456789abcdef....
  404d40:	6c756e28 0000296c                       (null)..

00404d48 <blanks.7217>:
  404d48:	20202020 20202020 20202020 20202020                     

00404d58 <zeroes.7218>:
  404d58:	30303030 30303030 30303030 30303030     0000000000000000
  404d68:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00404d78 <_ctype_>:
  404d78:	20202000 20202020 28282020 20282828     .         ((((( 
  404d88:	20202020 20202020 20202020 20202020                     
  404d98:	10108820 10101010 10101010 10101010      ...............
  404da8:	04040410 04040404 10040404 10101010     ................
  404db8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404dc8:	01010101 01010101 01010101 10101010     ................
  404dd8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404de8:	02020202 02020202 02020202 10101010     ................
  404df8:	00000020 00000000 00000000 00000000      ...............
	...

00404e7c <_init>:
  404e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404e7e:	bf00      	nop
  404e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404e82:	bc08      	pop	{r3}
  404e84:	469e      	mov	lr, r3
  404e86:	4770      	bx	lr

00404e88 <__init_array_start>:
  404e88:	00402b79 	.word	0x00402b79

00404e8c <__frame_dummy_init_array_entry>:
  404e8c:	004000f1                                ..@.

00404e90 <_fini>:
  404e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404e92:	bf00      	nop
  404e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404e96:	bc08      	pop	{r3}
  404e98:	469e      	mov	lr, r3
  404e9a:	4770      	bx	lr

00404e9c <__fini_array_start>:
  404e9c:	004000cd 	.word	0x004000cd
